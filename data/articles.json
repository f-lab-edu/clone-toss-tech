{
    "1": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"토스 프론트엔드 챕터를 소개합니다!\" srcset=\"https://wp.toss.tech/wp-content/uploads/2021/04/techblog-01-about-fechapter.png\"/><h1>토스 프론트엔드 챕터를 소개합니다!</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/sojin.jpg\"/><div><div><h3>박서진</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2021. 4. 28</div></div></section></header><div><p id=\"841fef21-198f-4448-85d4-de334e191db5\"><span><span><span>안녕하세요. 토스 프론트엔드 챕터 블로그에 오신 것을 환영합니다. 앞으로 토스팀에서 프론트엔드 개발을 하면서 생기는 이야기들을 정리하여 블로그로 전해드리려고 합니다.</span></span></span></p><figure id=\"56fbb336-7aab-4db8-8013-b1c8237fec15\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/94adcfab-88f4-42b4-b64d-940422559529\"/></figure><h2 id=\"e3a4a606-16d1-4127-8102-0ac7845bec2f\"><span><span><span>토스 프론트엔드 챕터는?</span></span></span></h2><p id=\"d9810a61-2dcb-4d9c-b30a-76ff84df8bf0\"><span><span><span>토스에서는 같은 일을 하는 사람들을 모아서 </span><span>챕터</span><span>라고 합니다. 프론트엔드 챕터는 JavaScript, HTML, CSS를 이용하여 웹 프론트엔드 제품을 만드는 직군을 가리키는 말입니다.</span></span></span></p><p id=\"9b504e5a-e73d-4a59-8e01-16e6d4118dba\"><span><span><span>토스의 프론트엔드 개발자들은 ‘사일로’라고 하는 목적 조직에서 각자 독립적으로 일하고 있습니다. 각각의 사일로는 토스에서 하나의 제품을 전담하며, 작은 스타트업처럼 독립적으로 일합니다. 예를 들어, 송금을 담당하는 사일로는 송금 사일로, 결제를 담당하는 사일로는 결제 사일로입니다.</span></span></span></p><p id=\"396d1df5-2823-4b3a-9324-3da75a5c7410\"><span><span><span>사일로는 기본적으로 프로덕트 오너, 디자이너, 서버 개발자, 프론트엔드 개발자, 데이터 분석가 1명씩으로 구성됩니다. 사일로에서 프론트엔드 개발자는 다른 직군의 동료들과 가까운 자리에서 밀접하게 협업하면서, 주어진 반기별 OKR(목표)를 달성하기 위해 꾸준히 제품 개선에 참여하고 있습니다.</span></span></span></p><p id=\"e2b3847e-853b-4047-9818-096feb0385db\"><span><span><span>→ </span><a href=\"https://blog.toss.im/2019/09/05/tossteam/people/toss-frontendchapter-interview/\" rel=\"noreferrer noopener\" target=\"_blank\">토스의 첫인상을 책임지는 사람들, 프론트엔드 개발자를 만나다</a></span></span></p><h2 id=\"bc7967fa-7757-4ebb-8c26-f1de19a42b55\"><span><span><span>함께 협업하기</span></span></span></h2><p id=\"aecc20b4-7b53-4bee-a334-5765e1362060\"><span><span><span>각 사일로에서 독립적으로 일하는 프론트엔드 개발자들이지만, 하나의 팀처럼 같이 협업하고 있습니다. 예를 들어서,</span></span></span></p><ol><li id=\"7551a767-7836-4204-b9b5-c94e1da009a3\"><span><span><span>함께 라이브러리를 개발하고 있습니다</span><span>. UI 컴포넌트, 비동기 처리와 같이 프론트엔드 개발을 하면서 꼭 필요한 것들이 모두 라이브러리화되어 있습니다. 서비스를 개발하다가 적절히 추상화된 코드 조각이 생기면 라이브러리에 꾸준히 반영하고 있습니다.</span></span></span></li><li id=\"cf052530-f4a8-4bd4-9c53-6089f23e451f\"><span><span><span>서로 코드를 리뷰합니다.</span><span> 라이브러리 개발과 서비스 개발 모두에서 코드 리뷰가 의무화되어 있습니다. 코드 리뷰를 주고받으면서 더 나은 설계에 대해 토론하고, 새로운 기술 채택에 대해 의견을 나누고 있습니다.</span></span></span></li><li id=\"c38935cf-bef9-4710-8b9b-25cd257f3742\"><span><span><span>챕터 위클리에 참여합니다.</span><span> 주기적으로 모든 프론트엔드 개발자들이 모여서 그동안 있었던 개발 업무를 주제로 이야기합니다. 챕터 위클리에서는 돌아가면서 “Tech Talk” 라고 하는 작은 발표를 열고 있는데, 개발 노하우나 새로운 기술 토픽을 소개합니다.</span></span></span></li></ol><p id=\"752a0420-09a2-48fd-81ed-95afde6414a8\"><span><span><span>그 이외에도 비정기적으로 기술 스터디를 열기도 합니다. 서로 자리가 떨어져 있어도 슬랙 채널이나 각자의 자리에서 활발하게 소통합니다.</span></span></span></p><h2 id=\"a062457a-241f-4cdb-8231-ac956ee26b11\"><span><span><span>프론트엔드 챕터가 사용하는 기술</span></span></span></h2><p id=\"9dc86e6b-e8c4-44bc-9538-c8805089d0d7\"><span><span><span>React, TypeScript, Next.js가 토스 프론트엔드 챕터가 다루는 기술의 핵심을 이루고 있습니다.</span></span></span></p><ul><li id=\"45c61633-31e0-4b3e-8cbd-bc406aa5b2f2\"><span><span><span>React</span><span>: 토스 웹 페이지는 대부분 React로 구성되어 있습니다. 제품의 성격에 따라 React Suspense와 같은 실험적인 기술을 적극적으로 도입하고는 합니다.</span></span></span></li><li id=\"6746a5d5-0039-4ba3-8d9d-17185d83f597\"><span><span><span>TypeScript</span><span>: 토스에서는 모든 코드를 TypeScript로 작성합니다. 사람의 실수를 줄이고, 빌드 시간에 미리 오류를 찾아냄으로써 웹 서비스를 안정적으로 운영하는 데에 큰 도움이 되고 있습니다.</span></span></span></li><li id=\"16408399-be85-4dd6-8aee-40a47d0acfc4\"><span><span><span>Next.js</span><span>: 토스 사용자들에게 더 빠른 웹을 보여주기 위해 적극적으로 SSR와 Static Export를 활용하고 있습니다.</span></span></span></li></ul><p id=\"b128f773-f1f2-4c9b-9115-98233dff0354\"><span><span><span>그 이외에 아래 기술을 보조적으로 사용하고 있어요.</span></span></span></p><ul><li id=\"1b7795aa-790a-4186-b523-001f3fcc5d3b\"><span><span><span>Yarn Berry</span><span>: 토스에서 의존성을 관리하기 위해 사용하는 패키지 매니저입니다. NPM보다 엄격히 package.json을 관리함으로써 개발자의 실수를 더 빨리 발견할 수 있도록 해 줍니다. NPM보다 모듈을 로드하는 속도가 빠릅니다. (</span><a href=\"https://yarnpkg.com/\" rel=\"noreferrer noopener\" target=\"_blank\">홈페이지</a><span>)</span></span></span></li><li id=\"95c05e48-725e-4f19-a73c-ddbba4c29f85\"><span><span><span>Emotion</span><span>: CSS를 다루기 위해 emotion 라이브러리를 사용하고 있습니다. </span><a href=\"https://emotion.sh/docs/css-prop\" rel=\"noreferrer noopener\" target=\"_blank\">CSS Prop</a><span>으로 생산적으로 스타일을 다룰 수 있습니다. 서버 사이드 렌더링을 했을 때 첫 렌더에 포함되는 Critical CSS만을 HTML에 포함해줌으로써 더 빠르게 화면을 보여줄 수 있도록 도와주기도 합니다.</span></span></span></li><li id=\"351d00f8-aa39-465e-a633-3bee51dc8ecc\"><span><span><span>React Query, SWR</span><span>: 비동기를 다루는 상황에서 대부분 사용하고 있는 라이브러리입니다. 선언적으로 비동기 자원을 관리하고 캐싱할 수 있습니다.</span></span></span></li></ul><h2 id=\"d198b16c-c865-44fe-9da9-e531b8ec0ddc\"><span><span><span>Tech Talks</span></span></span></h2><p id=\"0bca5bc5-3b1f-49b2-93dc-8f71b41465ad\"><span><span><span>토스에서는 모든 프론트엔드 챕터 구성원이 모이는 챕터 위클리에서 Tech Talk라고 하는 작은 발표를 열고 있습니다. 발표의 주제는 서비스 개발을 할 때의 꿀팁부터 React Suspense 소개까지 다양합니다. 2019년부터 지금까지 총 90개 이상의 크고 작은 발표가 있었습니다.</span></span></span></p><p id=\"38809c7e-e2d1-4a55-a327-4a863749952f\"><span><span><span>토스 FE 블로그의 아티클은 위클리에서 있었던 Tech Talk의 내용을 간단히 정리한 것입니다.</span></span></span></p><p id=\"fc18a7d3-a726-4f17-9973-854301de05cb\"><span><span><span>기술 블로그에서 공개된 내용보다 더 좋은 발표를 듣고 싶다면, 그리고 저희와 함께 웹 서비스의 문제를 풀어가고 싶다면, 언제든 토스팀에 </span><a href=\"https://toss.im/career/job-detail?job_id=4071101003\" rel=\"noreferrer noopener\" target=\"_blank\">지원해주세요</a><span>. 모든 단계에서 최대한 빠르고 솔직하게 피드백을 드리겠습니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "2": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"웹 서비스 캐시 똑똑하게 다루기\" srcset=\"https://wp.toss.tech/wp-content/uploads/2021/04/techblog-02-webcash.png\"/><h1>웹 서비스 캐시 똑똑하게 다루기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/sojin.jpg\"/><div><div><h3>박서진</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2021. 4. 29</div></div></section></header><div><p id=\"d3433c62-2460-4e86-89a3-27956500de77\"><span><span><span>토스 프론트엔드 챕터에서는 웹 성능을 최대한으로 높이기 위해 HTTP 캐시를 적극적으로 사용하고 있습니다. 캐시를 잘못 관리했을 때, 원하는 시점에 캐시가 사라지지 않을 수 있습니다. 필요 이상으로 HTTP 요청이 발생하기도 합니다.</span></span></span></p><p id=\"4f4c6fba-cc88-4a3a-aab7-14e5b734e39a\"><span><span><span>HTTP 캐시를 효율적으로 관리하려면 Cache-Control 헤더를 섬세하게 조절해야 합니다. 토스 프론트엔드 챕터에서 다양한 생명 주기를 가지는 캐시를 다루면서 알게 된 노하우를 테크 블로그로 공유합니다.</span></span></span></p><h2 id=\"6f6b2f2f-664a-45fc-9c0d-92b38eb041f4\"><span><span><span>캐시의 생명 주기</span></span></span></h2><p id=\"d8c0fc63-294b-4246-82fb-e8929e062e3a\"><span><span><span>HTTP에서 </span><span>리소스</span><span>(Resource)란 웹 브라우저가 HTTP 요청으로 가져올 수 있는 모든 종류의 파일을 말합니다. 대표적으로 HTML, CSS, JS, 이미지, 비디오 파일 등이 리소스에 해당합니다.</span></span></span></p><p id=\"3c314889-f49c-4df9-bf88-329f74716c4d\"><span><span><span>웹 브라우저가 서버에서 지금까지 요청한 적이 없는 리소스를 가져오려고 할 때, 서버와 브라우저는 완전한 HTTP 요청/응답을 주고받습니다. HTTP 요청도 완전하고, 응답도 완전합니다. 이후 HTTP 응답에 포함된 </span><span>Cache-Control 헤더</span><span>에 따라 받은 리소스의 생명 주기가 결정됩니다.</span></span></span></p><h3 id=\"ee879106-8ae4-4d4e-8d53-03c76aabfe93\"><span><span><span>캐시의 유효 기간: max-age</span></span></span></h3><p id=\"58eadc1a-acb0-4e21-abc9-ec92760ce8f0\"><span><span><span>서버의 Cache-Control 헤더의 값으로 </span><code>max-age=&lt;seconds&gt;</code><span> 값을 지정하면, 이 리소스의 캐시가 유효한 시간은 </span><code>&lt;seconds&gt;</code><span> 초가 됩니다.</span></span></span></p><h3 id=\"749bd30e-e2bc-42f2-9dc6-e2f81a0a1991\"><span><span><span>캐시의 유효 기간이 지나기 전</span></span></span></h3><p id=\"595f396e-af61-4f8f-9009-516450e14774\"><span><span><span>한 번 받아온 리소스의 유효 기간이 지나기 전이라면, 브라우저는 서버에 요청을 보내지 않고 디스크 또는 메모리에서만 캐시를 읽어와 계속 사용합니다.</span></span></span></p><figure id=\"e6ef5971-38f5-4def-aca4-3559852a55eb\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/6b04da53-f74a-42a4-ad89-20b2321ba960\"/></figure><p id=\"0d5950b3-20a9-49e9-8027-1f69750abca3\"><span><span><span>메모리 캐시에서 불러온 HTTP 리소스</span></span></span></p><p id=\"f937a53f-ca6f-4946-890b-6106e88ec56a\"><span><span><span>예를 들어, 위 개발자 도구 캡처와 같이 어떤 JavaScript 파일을 요청하는 경우를 가정합시다. 이 리소스가 가지는 </span><code>Cache-Control</code><span> 헤더 값은 </span><code>max-age=31536000</code><span> 이기 때문에, 이 리소스는 1년(31,536,000초)동안 캐시할 수 있습니다.</span></span></span></p><p id=\"edf323e2-bff4-44c4-a41c-5cd0af1629bb\"><span><span><span>스크린샷에서는 유효한 캐시가 메모리에 남아 있기 때문에 </span><code>(from memory cache)</code><span> 라고 표기된 것을 확인할 수 있습니다.</span></span></span></p><p id=\"9ed7a799-2bf0-4125-9473-a0cc0f7f69f5\"><span><span><span>“서버에 요청을 보내지 않고” 라고 하는 말에 주의합시다. 한번 브라우저에 캐시가 저장되면 만료될 때까지 캐시는 계속 브라우저에 남아 있게 됩니다. 때문에 CDN Invalidation을 포함한 서버의 어떤 작업이 있어도 브라우저의 유효한 캐시를 지우기는 어렵습니다.</span></span></span></p><blockquote id=\"f4be130e-b277-4ad6-bf24-93df9dc03fa3\"><span><span><span>Note:</span><span> Cache-Control max-age 값 대신 Expires 헤더로 캐시 만료 시간을 정확히 지정할 수도 있습니다.</span></span></span></blockquote><h3 id=\"3958d5dd-c93e-434f-ae18-9e6dc6e83b06\"><span><span><span>캐시의 유효 기간이 지난 이후: 재검증</span></span></span></h3><p id=\"6f87e474-121c-4d9a-b4f5-aa77b33cb782\"><span><span><span>그렇다면 캐시의 유효 기간이 지나면 캐시가 완전히 사라지게 될까요? 그렇지는 않습니다. 대신 브라우저는 서버에 </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests\" rel=\"noreferrer noopener\" target=\"_blank\">조건부 요청(Conditional request)</a><span>을 통해 캐시가 유효한지 재검증(Revalidation)을 수행합니다.</span></span></span></p><figure id=\"d5d2413c-cb57-411e-8587-29bc4eb3b41f\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/59c48bce-9744-4b94-bbed-745b908f0e44\"/></figure><p id=\"388160f8-6b2a-4562-b301-5b62dea2dead\"><span><span><span>재검증 결과 브라우저가 가지고 있는 캐시가 유효하다면, 서버는 </span><span>[304 Not Modified]</span><span> 요청을 내려줍니다. </span><span>[304 Not Modified]</span><span> 응답은 HTTP 본문을 포함하지 않기 때문에 매우 빠르게 내려받을 수 있습니다. 예를 들어, 위 스크린샷을 살펴보면 59.1KB 리소스의 캐시 검증을 위해 324바이트만의 네트워크 송수신만을 주고받았음을 볼 수 있습니다.</span></span></span></p><figure id=\"2a0e3794-c78c-48e1-971c-8a715bf28cbd\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/9911d4e8-f059-4851-9958-d8ae74acfc20\"/></figure><p id=\"d7f1c7d8-aa0f-4a58-8a70-f930650a7266\"><span><span><span>If-None-Match와 If-Modified-Since가 포함된 요청</span></span></span></p><p id=\"e623cb63-5680-44f2-878c-7b018cf4cb34\"><span><span><span>대표적인 재검증 요청 헤더들로는 아래와 같은 헤더가 있습니다.</span></span></span></p><ol><li id=\"f17fb4ae-3cce-480e-ae81-073b00d66348\"><span><span><span>If-None-Match</span><span>: 캐시된 리소스의 </span><code>ETag</code><span> 값과 현재 서버 리소스의 </span><code>ETag</code><span> 값이 같은지 확인합니다.</span></span></span></li><li id=\"1b2271de-bc47-4fcb-a663-78b18029b669\"><span><span><span>If-Modified-Since</span><span>: 캐시된 리소스의 </span><code>Last-Modified</code><span> 값 이후에 서버 리소스가 수정되었는지 확인합니다.</span></span></span></li></ol><p id=\"3bc26ec7-a4be-49ec-8259-0b8fb098c9bc\"><span><span><span>위의 </span><code>ETag</code><span> 와 </span><code>Last-Modified</code><span> 값은 기존에 받았던 리소스의 응답 헤더에 있는 값을 사용합니다.</span></span></span></p><p id=\"1e2eadaa-cfd2-4621-8ea8-0a0304176faa\"><span><span><span>재검증 결과 캐시가 유효하지 않으면, 서버는 </span><span>[200 OK]</span><span> 또는 적합한 상태 코드를 본문과 함께 내려줍니다. 추가로 HTTP 요청을 보낼 필요 없이 바로 최신 값을 내려받을 수 있기 때문에 매우 효율적이죠. 😉</span></span></span></p><blockquote id=\"b1196ebf-e203-476c-8550-04e24238c295\"><span><span><span>max-age=0 주의보</span><span> 정의대로라면 max-age=0 값이 Cache-Control 헤더로 설정되었을 때, 매번 리소스를 요청할 때마다 서버에 재검증 요청을 보내야 할 것입니다. 그렇지만 일부 모바일 브라우저의 경우 웹 브라우저를 껐다 켜기 전까지 리소스가 만료되지 않도록 하는 경우가 있습니다. 네트워크 요청을 아끼고 사용자에게 빠른 웹 경험을 제공하기 위해서라고 합니다.</span></span></span><div><p id=\"ff496e7f-60aa-45fb-be32-093a94cd08d8\"><span><span><span>이 경우에는 웹 브라우저를 껐다 켜거나, 아래에서 소개할 no-store 값을 사용해주세요.</span></span></span></p></div></blockquote><h3 id=\"20ef5294-2e1f-4e66-90d4-ead5069cc9b7\"><span><span><span>no-cache와 no-store</span></span></span></h3><p id=\"6f4c67cd-180a-4715-adc5-a7dd5e63efc2\"><span><span><span>Cache-Control에서 가장 헷갈리는 두 가지 값이 있다면 바로 </span><code>no-cache</code><span> 와 </span><code>no-store</code><span> 입니다. 이름은 비슷하지만 두 값의 동작은 매우 다릅니다.</span></span></span></p><p id=\"330d0992-ddb4-44d5-ba27-2f8ee92ba508\"><span><span><span>no-cache</span><span> 값은 대부분의 브라우저에서 max-age=0 과 동일한 뜻을 가집니다. 즉, 캐시는 저장하지만 사용하려고 할 때마다 서버에 재검증 요청을 보내야 합니다.</span></span></span></p><p id=\"d033071d-391a-4647-bb7a-ecd7672769dc\"><span><span><span>no-store</span><span> 값은 캐시를 절대로 해서는 안 되는 리소스일 때 사용합니다. 캐시를 만들어서 저장조차 하지 말라는 가장 강력한 Cache-Control 값입니다. no-store를 사용하면 브라우저는 어떤 경우에도 캐시 저장소에 해당 리소스를 저장하지 않습니다.</span></span></span></p><h2 id=\"93075d7b-e11b-48dc-b34a-d357f28e68c8\"><span><span><span>캐시의 위치</span></span></span></h2><figure id=\"9e978a4d-b770-4231-8575-e092304a677b\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/572b54c1-b92d-4ba3-abbd-2c2590048beb\"/></figure><p id=\"1f638309-b76f-4552-bdf7-2bc61697716f\"><span><span><span>CDN과 같은 중간 서버를 사용할 때, 캐시는 여러 곳에 생길 수 있습니다. 서버가 가지고 있는 원래 응답을 CDN이 캐시합니다. CDN의 캐시된 응답은 사용자 브라우저가 다시 가져와서 캐시합니다. 이처럼 HTTP 캐시는 여러 레이어에 저장될 수 있기 때문에 세심히 다루어야 합니다.</span></span></span></p><h3 id=\"f85d810f-6c85-47de-b0db-1d12d2048d86\"><span><span><span>CDN Invalidation</span></span></span></h3><p id=\"ee002315-5795-40b7-8d9a-c3080290986f\"><span><span><span>일반적으로 캐시를 없애기 위해서 “CDN Invalidation”을 수행한다고 이야기합니다. CDN Invalidation은 위 다이어그램에서 가운데에 위치하는 CDN에 저장되어 있는 캐시를 삭제한다는 뜻입니다. 브라우저의 캐시는 다른 곳에 위치하기 때문에 CDN 캐시를 삭제한다고 해서 브라우저 캐시가 삭제되지는 않습니다.</span></span></span></p><p id=\"01605205-cb16-4cbb-9d37-98595136a036\"><span><span><span>경우에 따라 중간 서버나 CDN이 여러 개 있는 경우도 발생하는데, 이 경우 전체 캐시를 날리려면 중간 서버 각각에 대해서 캐시를 삭제해야 합니다.</span></span></span></p><p id=\"d6b5bde7-a7d1-43f7-9fb2-3a59cd91d6d3\"><span><span><span>이렇게 한번 저장된 캐시는 지우기 어렵기 때문에 Cache-Control의 max-age 값은 신중히 설정하여야 합니다.</span></span></span></p><h3 id=\"fdb532eb-9d7a-4916-9fb8-a72e9dbca6a7\"><span><span><span>Cache-Control: public과 private</span></span></span></h3><p id=\"a6142363-f1aa-4b1d-9e6c-f0384214cd6e\"><span><span><span>CDN과 같은 중간 서버가 특정 리소스를 캐시할 수 있는지 여부를 지정하기 위해 Cache-Control 헤더 값으로 public 또는 private을 추가할 수 있습니다.</span></span></span></p><p id=\"61b09225-a2be-4624-a2ec-6fe573caea29\"><span><span><span>public은 모든 사람과 중간 서버가 캐시를 저장할 수 있음을 나타내고, private은 가장 끝의 사용자 브라우저만 캐시를 저장할 수 있음을 나타냅니다.</span></span></span></p><p id=\"2ba9152d-3b6d-45a4-9dfb-f76b6b6ca1eb\"><span><span><span>기존과 max-age 값과 조합하려면 </span><code>Cache-Control: public, max-age=86400</code><span> 과 같이 콤마로 연결할 수 있습니다.</span></span></span></p><h3 id=\"5bf5c84a-c475-4db0-a776-78531dd90bfe\"><span><span><span>s-maxage</span></span></span></h3><p id=\"15b6c913-2204-483e-b85d-97a356fbe2c0\"><span><span><span>중간 서버에서만 적용되는 max-age 값을 설정하기 위해 s-maxage 값을 사용할 수 있습니다.</span></span></span></p><p id=\"59c365fc-c324-4f36-860c-f04464f22ebe\"><span><span><span>예를 들어, Cache-Control 값을 </span><code>s-maxage=31536000, max-age=0</code><span> 과 같이 설정하면 CDN에서는 1년동안 캐시되지만 브라우저에서는 매번 재검증 요청을 보내도록 설정할 수 있습니다.</span></span></span></p><h2 id=\"25609900-7b35-4e7a-ba6c-d26b84ee72ab\"><span><span><span>토스에서의 Cache-Control</span></span></span></h2><p id=\"d9dfd3ed-0b95-4f19-8309-b2305be5abb1\"><span><span><span>토스 프론트엔드 챕터는 리소스의 성격에 따라 세심히 Cache-Control 헤더 값을 조절하고 있습니다.</span></span></span></p><h3 id=\"b42efa45-78fc-4f2c-9798-948a2b7593bd\"><span><span><span>HTML 파일</span></span></span></h3><p id=\"a6acfa01-a38c-4f19-86f6-4ee73ff977c9\"><span><span><span>일반적으로 </span><a href=\"https://service.toss.im/toss-card/introduction\" rel=\"noreferrer noopener\" target=\"_blank\">https://service.toss.im/toss-card/introduction</a><span> 과 같은 HTML 리소스는 새로 배포가 이루어질 때마다 값이 바뀔 수 있습니다. 때문에 브라우저는 항상 HTML 파일을 불러올 때 새로운 배포가 있는지 확인해야 합니다.</span></span></span></p><figure id=\"0226c062-68b4-4df0-b50a-31bc62a42e1a\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/cfc66729-7d9f-41d9-9411-932cb884883b\"/></figure><p id=\"f371a8e8-f620-48bb-be63-e4e94a1bf83d\"><span><span><span>이런 리소스에 대해 토스 프론트엔드 챕터는 Cache-Control 값으로 </span><span>max-age=0, s-maxage=31536000</span><span> 을 설정했습니다. 이로써 브라우저는 HTML 파일을 가져올 때마다 서버에 재검증 요청을 보내고, 그 사이에 배포가 있었다면 새로운 HTML 파일을 내려받습니다.</span></span></span></p><p id=\"293071b9-af2c-4a09-a2ad-4f5000739671\"><span><span><span>CDN은 계속해서 HTML 파일에 대한 캐시를 가지고 있도록 했습니다. 대신 배포가 이루어질 때마다 CDN Invalidation을 발생시켜 CDN이 서버로부터 새로운 HTML 파일들을 받아오도록 설정했습니다.</span></span></span></p><h3 id=\"a5e128f8-2c98-4aa1-b328-73f6d1eadd05\"><span><span><span>JS, CSS 파일</span></span></span></h3><p id=\"103a59d8-8878-4403-8817-d5961deed467\"><span><span><span>JavaScript나 CSS 파일은 프론트엔드 웹 서비스를 빌드할 때마다 새로 생깁니다. 토스 프론트엔드 챕터는 임의의 버전 번호를 URL 앞부분에 붙여서 빌드 결과물마다 고유한 URL을 가지도록 설정하고 있습니다.</span></span></span></p><figure id=\"413fef98-cd4e-4e99-8625-6ba7f48b9bae\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/22a12595-1fc4-4573-9b41-e8329e886be6\"/></figure><p id=\"accc7932-fac9-4bfb-9eaf-9d59c96fcaf1\"><span><span><span>고유 버전 번호가 붙어 있는 JavaScript 파일</span></span></span></p><p id=\"8f9daf35-fa1c-4414-8378-02fe5ef4804a\"><span><span><span>이렇게 JS, CSS 파일을 관리했을 때, 같은 URL에 대해 내용이 바뀔 수 있는 경우는 없습니다. 내용이 바뀔 여지가 없으므로 리소스의 캐시가 만료될 일도 없습니다.</span></span></span></p><p id=\"9df668ad-ce91-440e-8581-ecf68259d368\"><span><span><span>이런 리소스에 대해 토스 프론트엔드 챕터는 Cache-Control 값으로 max-age의 최대치인 </span><span>max-age=31536000</span><span> 을 설정하고 있습니다. 이로써 새로 배포가 일어나지 않는 한, 브라우저는 캐시에 저장된 JavaScript 파일을 계속 사용합니다.</span></span></span></p><p id=\"f7be3021-dd7a-4e7c-bf0c-cae03a97e572\"><span><span><span>캐시 설정을 섬세히 제어함으로써 사용자는 더 빠르게 HTTP 리소스를 로드할 수 있고, 개발자는 트래픽 비용을 절감할 수 있습니다. 위에서 Cache-Control와 ETag 헤더를 리소스의 성격에 따라 잘 설정하는 것만으로 캐시를 정확하게 설정할 수 있다는 것을 살펴보았습니다. HTTP 캐시로 고민하고 있는 분들께 도움이 되었기를 기대합니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "3": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"JSCodeShift로 기술 부채 청산하기\" srcset=\"https://wp.toss.tech/wp-content/uploads/2021/05/techblog-03-jscodeshift.png\"/><h1>JSCodeShift로 기술 부채 청산하기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/jiwoo.png\"/><div><div><h3>박지우</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2021. 5. 4</div></div></section></header><div><p id=\"94fd4c7a-5086-44a0-8395-d8584a566db7\"><span><span><span>토스 프론트엔드 챕터에서는 100개 이상의 서비스들이 작은 패키지 단위로 쪼개져 활발하게 개발되고 있는데요. 공통으로 사용하는 라이브러리에서 인터페이스가 변경되는 Breaking Change가 발생하면, 의존하고 있는 모든 서비스의 코드를 수정해야 했습니다. 관리하는 코드베이스가 점점 커지면서 해야 하는 작업의 양도 계속 늘어나고는 했습니다.</span></span></span></p><p id=\"68046d23-29de-45c1-bf73-325bd3af126c\"><span><span><span>이에 프론트엔드 챕터는 JSCodeShift를 도입하여 대부분의 코드 수정 작업을 자동화할 수 있었습니다. 토스팀이 JSCodeShift를 도입하면서 알게 된 점과 노하우를 테크 블로그로 공유합니다.</span></span></span></p><h2 id=\"33caacc6-3a5e-4c02-988c-13d798f5e35f\"><span><span><span>JSCodeShift란?</span></span></span></h2><p id=\"3ba73c0f-9a9c-4008-9dff-6cc82e941d4c\"><span><span><a href=\"https://github.com/facebook/jscodeshift\" rel=\"noreferrer noopener\" target=\"_blank\">JSCodeShift</a><span>는 Facebook이 만든 JavaScript/TypeScript 코드 수정 도구입니다. JSCodeShift를 통해 코드를 수정하는 코드를 작성할 수 있습니다.</span></span></span></p><h2 id=\"a48d287c-2ad3-4f4c-9916-77f4e6608e6d\"><span><span><span>찾아 바꾸기와의 비교</span></span></span></h2><p id=\"67813cfa-3eea-4b28-9484-230da9b726f9\"><span><span><span>JSCodeShift를 도입하기 전, 토스에서는 대량의 코드 수정이 필요할 때면 IDE의 찾아 바꾸기(Find &amp; Replace)를 사용했습니다. 그러나 찾아 바꾸기로는 안전하게 코드를 수정하는 데에 한계가 많았습니다.</span></span></span></p><h3 id=\"a83cea02-78d0-423f-85a1-8f4b8495fe7c\"><span><span><span>예시 1: console.log() 모두 삭제하기</span></span></span></h3><p id=\"fd030a1e-8c16-4734-8ecb-2d8a7757478e\"><span><span><span>프로젝트 전체에 있는 </span><code>console.log()</code><span> 호출을 모두 제거하고 싶은 상황을 생각해봅시다. 간단한 예제임에도 쉽게 고칠 수 없는 엣지 케이스들이 발생합니다. 우선 console.log 안에 들어가는 인자의 내용이 달라질 수 있습니다. console.log에 여러 인자를 넘겨서 함수 호출이 여러 줄에 걸칠 수도 있습니다.</span></span></span></p><p id=\"787fd1a6-7768-4c4c-9d04-a984aa552a67\"><span><span><span>이것을 정규식을 이용하여 어느 정도 해결할 수도 있습니다. 그러나 다양한 엣지케이스에 대응하기 위해서 정규식이 점점 복잡해지는 경우가 발생했습니다. 또 정규식은 정규 언어이기 때문에 기술적으로 대응할 수 없는 경우도 존재했습니다.</span></span></span></p><h3 id=\"42bd0ec8-88d2-4d0b-8ac0-f0cdd0da0b15\"><span><span><span>예시 2: default import된 객체의 프로퍼티 수정하기</span></span></span></h3><p id=\"4ec0265e-e90f-40d6-b905-69f498a879c7\"><span><span><span>아래와 같은 코드가 있었다고 생각해봅시다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>A</span> <span>from</span> <span>'@tossteam/a'</span><span>;</span>\n\n<span>A</span>.<span>foo</span><span>(</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"d519e37b-203f-473d-a1f3-85f460ee2f7e\"><span><span><span>어느 순간 </span><code>A.foo()</code><span> 함수가 </span><code>A.bar()</code><span> 함수로 이름이 변경되었다고 가정해봅시다.</span></span></span></p><p id=\"f05e5912-7718-4985-9516-1362c869e364\"><span><span><span>Default import의 변수 이름은 사용하는 사람마다 임의로 정할 수 있기 때문에, 어떤 사람은 이 라이브러리를 </span><code>B</code><span> 라고 하는 이름으로 사용하고 있을 수도 있습니다. 때문에 이 라이브러리를 </span><code>B.foo()</code><span> 처럼 사용하고 있던 코드가 있었다면, </span><code>B.bar()</code><span> 로 수정해주어야 합니다.</span></span></span></p><p id=\"9df6e9ec-a36e-41d3-ad4c-b393b6b78e75\"><span><span><span>이런 경우는 찾아 바꾸기로 쉽게 대응하기 어렵습니다.</span></span></span></p><h2 id=\"534be5ab-bc44-4ef3-a48b-188ea133d3ae\"><span><span><span>JSCodeShift 기초</span></span></span></h2><p id=\"e7f214e6-b434-47cc-a58c-6045374d2e5b\"><span><span><span>JSCodeShift는 추상 구문 트리(AST, Abstract Syntax Tree)를 이용하여 코드를 수정하는 방법을 제공함으로써 코드 수정 작업을 정확하고 편리하게 할 수 있도록 도와줍니다.</span></span></span></p><h3 id=\"7739352e-edc5-45e8-a88b-75fcabc564fc\"><span><span><span>추상 구문 트리 (AST)</span></span></span></h3><p id=\"332b4d0c-e4be-4592-9e6b-428d357b61fe\"><span><span><span>추상 구문 트리는 프로그램의 소스 코드를 쉽게 다룰 수 있도록 도와주는 자료구조입니다.</span></span></span></p><p id=\"81296736-30d6-4c3f-bbfe-1d5696f35d03\"><span><span><span>예를 들어서, 다음 </span><code>import</code><span> 문을 추상 구문 트리로 옮기면 이런 모습이 됩니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>React</span><span>,</span> <span>{</span> <span>useMemo</span> <span>}</span> <span>from</span> <span>'react'</span><span>;</span></code></pre></div></div></div></div><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>ImportDeclaration </span><span>{</span>\n  specifiers<span>:</span> <span>[</span>\n    <span>ImportDefaultSpecifier </span><span>{</span>\n      local<span>:</span> <span>Identifier </span><span>{</span>\n        name<span>:</span> <span>\"React\"</span>\n      <span>}</span>\n    <span>}</span><span>,</span>\n    <span>ImportSpecifier </span><span>{</span>\n      local<span>:</span> <span>Identifier </span><span>{</span>\n        name<span>:</span> <span>\"useMemo\"</span>\n      <span>}</span>\n    <span>}</span>\n  <span>]</span><span>,</span>\n  source<span>:</span> <span>Literal </span><span>{</span>\n    value<span>:</span> <span>\"react\"</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"74f70368-5074-4e02-8e53-1458e27a6609\"><span><span><span>살펴보면 </span><code>import</code><span> 문이 </span><code>ImportDeclaration</code><span> 객체로 바뀌었습니다. 또 내부에서 사용되는 Default Import와 Named Import, 라이브러리 이름이 알맞은 객체로 옮겨진 것을 확인할 수 있습니다.</span></span></span></p><h3 id=\"a025b205-ce8c-43a7-9cb2-1a9cd2be38c7\"><span><span><span>ASTExplorer</span></span></span></h3><figure id=\"33600c37-a137-4aaf-80dc-afc1efe8c860\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/7b10539b-73f5-4814-8671-c1e733ab0e28\"/></figure><p id=\"2f1bfc66-c2f4-437d-8a31-da67e1016492\"><span><span><span>작성한 코드의 추상 구문 트리를 </span><a href=\"https://astexplorer.net/\" rel=\"noreferrer noopener\" target=\"_blank\">ASTExplorer</a><span>로 쉽게 확인할 수 있습니다. 코드만 붙여넣으면 해당하는 구문 트리를 바로 확인할 수 있어 편리합니다. 소스 코드의 특정 부분에 커서를 옮기면 그 부분이 트리의 어떤 부분에 해당하는지 바로 볼 수 있기도 합니다. 😉 추상 구문 트리에 익숙하지 않다면, 사용해보시는 것을 권장합니다.</span></span></span></p><h3 id=\"87a6c30f-f42b-4f15-9983-576293f15227\"><span><span><span>라이브러리별 추상 구문 트리</span></span></span></h3><p id=\"b0b98b55-1d15-4934-b711-9a60d0f8b9d8\"><span><span><span>라이브러리마다 사용하는 추상 구문 트리의 모습은 다를 수 있습니다. 예를 들어서 같은 JavaScript를 다루더라도 ESLint가 사용하는 트리와 Babel이 사용하는 트리는 약간 다릅니다. JSCodeShift는 Babel이 사용하는 트리를 사용하고 있습니다.</span></span></span></p><figure id=\"1c398f56-346c-4a09-9e5e-a108e905f78e\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/55c1d152-7073-4114-bfe0-ca5a99dce28d\"/></figure><p id=\"3299ba8f-6bef-45a5-9c7d-4abe167f3ca3\"><span><span><span>ASTExplorer 상단 메뉴에서 사용할 추상 구문 트리를 선택할 수 있습니다. JSCodeShift가 사용하는 트리는 </span><code>@babel/parser</code><span> 입니다.</span></span></span></p><h2 id=\"e3b824d6-aec1-45ef-aaa7-e2cc7794bd00\"><span><span><span>JSCodeShift 사용하기</span></span></span></h2><p id=\"419b75ca-b397-42a7-aada-cfc207bdf21c\"><span><span><span>JSCodeShift로 코드를 수정하는 과정은 크게 4가지 작업으로 나눌 수 있습니다.</span></span></span></p><ol><li id=\"d679490e-2844-4d31-b608-3b6e6c135823\"><span><span><span>AST로 파싱:</span><span> 파일의 소스 코드를 AST로 파싱합니다.</span></span></span></li><li id=\"cc8dcc22-7b26-4231-9428-ba77b544a452\"><span><span><span>수정할 노드 선택</span><span>: AST에서 수정할 노드를 선택합니다.</span></span></span></li><li id=\"2134d1fe-1b1b-4dcb-b8d0-e68e8de1606e\"><span><span><span>수정하기</span><span>: 검색한 노드를 JSCodeShift가 제공하는 유틸리티로 코드를 변경시킵니다.</span></span></span></li><li id=\"d022934d-2cb1-40c6-90f2-6d76dd64bd8b\"><span><span><span>소스 코드로 내보내기:</span><span> 수정된 AST를 JavaScript 소스 코드로 내보냅니다.</span></span></span></li></ol><p id=\"364f7a03-436b-4fee-ace7-88cd06df832c\"><span><span><span>예를 들어, 이런 형식으로 코드를 작성합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>/* transformSomeCode.js */</span>\n<span>function</span> <span>transformSomeCode</span><span>(</span><span>file</span><span>,</span> <span>{</span> <span>jscodeshift</span> <span>}</span><span>)</span> <span>{</span>\n  <span>// 1. AST로 파싱</span>\n  <span>const</span> <span>tree</span> = <span>jscodeshift</span><span>(</span><span>file</span>.<span>source</span><span>)</span><span>;</span>\n\n  <span>// 2. 수정할 노드 선택</span>\n  <span>const</span> <span>nodes</span> = <span>tree</span>.<span>find</span><span>(</span><span>...</span><span>)</span><span>;</span>\n\n  <span>// 3. 수정</span>\n  <span>jscodeshift</span><span>(</span><span>nodes</span><span>)</span>\n    .<span>remove</span><span>(</span><span>)</span> | .<span>replaceWith</span><span>(</span><span>)</span> | .<span>insertBefore</span><span>(</span><span>)</span>\n\n  <span>// 4. 소스 코드로 내보내기</span>\n  <span>return</span> <span>tree</span>.<span>toSource</span><span>(</span><span>)</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"9c2b1d64-2cc4-4d18-a570-5a79ee680173\"><span><span><span>이후 JSCodeShift CLI를 이용하여 </span><code>jscodeshift -t transformSomeCode.js &lt;target&gt;</code><span> 와 같은 명령을 실행하면 </span><code>&lt;target&gt;</code><span> 에 있는 소스 코드들이 </span><code>transformSomeCode.js</code><span> 에 정의된 규칙에 맞게 수정됩니다.</span></span></span></p><p id=\"fa090808-820f-4fbb-a7ee-23011e81eefd\"><span><span><span>이제 본격적으로 JSCodeShift에서 자주 사용되는 메서드들을 살펴보겠습니다.</span></span></span></p><h3 id=\"492f6aca-76f4-4330-80d7-298b4c24efeb\"><span><span><span>수정할 노드 선택하기: find()</span></span></span></h3><p id=\"4e6e49aa-0f0c-4cc4-9b54-dda768468aa6\"><span><span><span>기본적으로 수정할 노드를 선택하기 위해 </span><code>find()</code><span> 함수를 사용합니다.</span></span></span></p><p id=\"cfe64acf-af3b-4236-b64e-6c96fc16c73f\"><span><span><span>예를 들어, </span><code>react</code><span> 라이브러리의 </span><code>useMemo</code><span> 를 가져오는 </span><code>import</code><span> 구문들을 선택하기 위해서는 아래와 같이 코드를 작성할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>nodes</span> = <span>tree</span>.<span>find</span><span>(</span>\n  <span>/* 찾을 AST 노드 타입 */</span>\n  <span>jscodeshift</span>.<span>ImportDeclaration</span><span>,</span>\n  <span>/* 필터링할 함수 */</span>\n  <span>node</span> <span>=&gt;</span> <span>{</span>\n    <span>return</span> <span>(</span>\n      <span>/* ImportDeclaration 중에서 */</span>\n      <span>node</span>.<span>type</span> === <span>'ImportDeclaration'</span> &amp;&amp;\n      <span>/* react 라이브러리에서 */</span>\n      <span>node</span>.<span>source</span>.<span>value</span> === <span>'react'</span> &amp;&amp;\n      <span>/* 가져오는 것 중에서 */</span>\n      <span>node</span>.<span>specifiers</span>.<span>some</span><span>(</span><span>specifier</span> <span>=&gt;</span> <span>{</span>\n        <span>/* useMemo를 포함하는 것을 */</span>\n        <span>return</span> <span>(</span>\n          <span>specifier</span>.<span>type</span> === <span>'ImportSpecifier'</span> &amp;&amp;\n          <span>specifier</span>.<span>imported</span>.<span>name</span> === <span>'useMemo'</span>\n        <span>)</span><span>;</span>\n      <span>}</span><span>)</span>\n      <span>/* 선택한다 */</span>\n    <span>)</span>\n  <span>}</span>\n<span>)</span><span>;</span></code></pre></div></div></div></div><h3 id=\"67b42cea-1f1e-45f3-b12a-5f4a90569021\"><span><span><span>노드 삭제하기: remove()</span></span></span></h3><p id=\"f42d18e9-7ee2-469f-a9d4-a7033e2911f0\"><span><span><span>선택한 노드를 삭제하기 위해 </span><code>remove()</code><span> 함수를 사용합니다.</span></span></span></p><p id=\"10806e1f-c058-4e4d-bf6a-562155db6ff6\"><span><span><span>예를 들어서, 아래와 같이 코드를 작성함으로써 선택한 </span><code>node</code><span> 의 목록을 삭제할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>for</span> <span>(</span><span>const</span> <span>node</span> <span>of</span> <span>nodes</span><span>)</span> <span>{</span>\n  <span>jscodeshift</span><span>(</span><span>node</span><span>)</span>.<span>remove</span><span>(</span><span>)</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><h3 id=\"4699f53c-d656-4dc5-8b01-93fc6cb4358f\"><span><span><span>노드를 다른 노드로 치환하기: replaceWith()</span></span></span></h3><p id=\"62c0e906-b800-4503-a054-a1cc2e48f6dc\"><span><span><span>선택한 노드를 새로운 노드로 치환하려고 할 때 </span><code>replaceWith()</code><span> 함수를 사용할 수 있습니다.</span></span></span></p><p id=\"b3465844-0fae-4a1b-8b07-411f8fa9ce63\"><span><span><span>예를 들어서, 선택한 </span><code>node</code><span> 들을 다른 모습으로 치환하기 위해서는 아래와 같이 코드를 작성할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>for</span> <span>(</span><span>const</span> <span>node</span> <span>of</span> <span>nodes</span><span>)</span> <span>{</span>\n  <span>/* 노드를 만드는 방법에 대해서 아래에서 더 자세히 다룹니다. */</span>\n  <span>const</span> <span>newNode</span> = <span>createNode</span><span>(</span><span>)</span><span>;</span>\n\n  <span>jscodeshift</span><span>(</span><span>node</span><span>)</span>.<span>replaceWith</span><span>(</span><span>newNode</span><span>)</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><h3 id=\"24432ffa-8512-47f3-950d-18969a99490c\"><span><span><span>새로운 노드 만들기</span></span></span></h3><p id=\"a4b9d75c-59f1-4ff0-9edf-eb410ac56a75\"><span><span><code>replaceWith()</code><span> 와 같은 함수에서 사용하기 위해서 새로운 노드를 만들 때는 JSCodeShift에서 제공하는 도우미 함수들을 사용할 수 있습니다.</span></span></span></p><blockquote id=\"7344debe-98c7-454e-948f-57f36e8e2ec1\"><span><span><span>각 노드를 만드는 방법을 모두 알 필요는 없습니다. TypeScript를 사용하는 경우, 각 함수가 어떤 인자를 받는지 바로 확인할 수 있습니다. JavaScript를 사용하는 경우, ast-types가 정의하는 타입 정보를 참고해주세요.</span></span></span></blockquote><p id=\"de9d8f87-5434-4088-a893-cd0002f3c17a\"><span><span><span>변수 참조:</span><span> </span><code>foo</code><span>와 같은 변수에 참조하는 노드를 만들기 위해서 </span><code>jscodeshift.identifier()</code><span> 를 사용할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>jscodeshift</span>.<span>identifier</span><span>(</span><span>'foo'</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"77521b54-2c08-4735-b414-98575b0e56d2\"><span><span><span>멤버 접근:</span><span> 변수 </span><code>foo</code><span>의 멤버 </span><code>bar</code><span> 에 접근하는 노드를 만들기 위해서 </span><code>jscodeshift.memberExpression()</code><span> 을 사용할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>jscodeshift</span>.<span>memberExpression</span><span>(</span>\n  <span>jscodeshift</span>.<span>identifier</span><span>(</span><span>'foo'</span><span>)</span><span>,</span>\n  <span>jscodeshift</span>.<span>identifier</span><span>(</span><span>'bar'</span><span>)</span>\n<span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"736974a6-2d50-41e6-a397-87ff7b8df21a\"><span><span><span>import 문:</span><span> </span><code>import { useMemo } from 'react';</code><span> 와 같은 </span><code>import</code><span> 문을 만들기 위해서 </span><code>jscodeshift.importDeclaration()</code><span> 을 사용할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>jscodeShift</span>.<span>importDeclaration</span><span>(</span>\n  <span>[</span>\n    <span>jscodeShift</span>.<span>importSpecifier</span><span>(</span>\n      <span>jscodeshift</span>.<span>identifier</span><span>(</span><span>'useMemo'</span><span>)</span>\n    <span>)</span>\n  <span>]</span><span>,</span>\n  <span>jscodeshift</span>.<span>literal</span><span>(</span><span>'react'</span><span>)</span>\n<span>)</span><span>;</span></code></pre></div></div></div></div><h2 id=\"06d8f0c7-4efb-47cc-b40d-2b26af96b738\"><span><span><span>JSCodeShift 사용 예시</span></span></span></h2><p id=\"877757f6-439d-4838-8368-9a9867ab79fd\"><span><span><span>토스 프론트엔드 챕터에서는 2020년 </span><code>import { Adaptive } from '@tossteam/web-development-kits'</code><span> 와 같은 </span><code>import</code><span> 문을 모두 </span><code>import { adaptive } from '@tossteam/colors'</code><span> 으로 수정해야 하는 필요성이 있었습니다.</span></span></span></p><p id=\"175ded40-5a2a-476a-a077-4f05cfa1e2c7\"><span><span><span>이런 경우는 찾아 바꾸기로 해결하는 데에 어려움이 있었습니다. 코드를 수정하는 규칙이 복잡했기 때문입니다.</span></span></span></p><ol><li id=\"22d0f679-f2bb-4a71-ae93-7826c5e76b97\"><span><span><code>@tossteam/web-development-kits</code><span> 라이브러리로부터 </span><code>Adaptive</code><span> 뿐 아니라 다른 변수나 함수를 import 하는 경우가 있었습니다. 그런 경우에는 전체 import 문을 지우는 것이 아닌, </span><code>Adaptive</code><span> 를 가져오는 부분만 삭제해야 했습니다.</span></span></span></li><li id=\"bff9636c-1d39-40cb-8fc5-080e1bece2e0\"><span><span><code>Adaptive</code><span> 를 import하는 부분이 삭제된 경우에만 </span><code>import { adaptive } from '@tossteam/colors';</code><span> 와 같이 새로운 import 문을 파일의 가장 처음에 추가해주어야 했습니다. 아닌 경우, 사용하지 않은 변수로 인해 컴파일 시간에 오류가 발생했습니다.</span></span></span></li><li id=\"bc2e0f78-779e-4cba-bc61-36eec92af3e5\"><span><span><code>Adaptive</code><span> 를 import하는 부분이 삭제된 경우에만 그 파일에서 사용되는 모든 </span><code>Adaptive</code><span> 변수를 </span><code>adaptive</code><span> 로 바꿔줘야 했습니다.</span></span></span></li></ol><p id=\"1c874e9a-18cb-4627-b70f-ec7f56be8ee8\"><span><span><span>다행히 토스팀에서는 간단히 이 문제를 JSCodeShift로 해결할 수 있었습니다. 저희가 설계한 JSCodeShift 변환 코드의 구조는 다음과 같습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>function</span> <span>transformLegacyImportToNewImport</span><span>(</span><span>file</span><span>,</span> <span>{</span> <span>jscodeshift</span> <span>}</span><span>)</span> <span>{</span>\n  <span>const</span> <span>root</span> = <span>jscodeshift</span><span>(</span><span>file</span>.<span>source</span><span>)</span><span>;</span>\n\n  <span>/* 오래된 import 문들을 찾음 */</span>\n  <span>const</span> <span>oldImports</span> = <span>findOldImports</span><span>(</span><span>root</span><span>,</span> <span>{</span> <span>jscodeshift</span> <span>}</span><span>)</span><span>;</span>\n\n  <span>/* 오래된 import 문이 없는 파일인 경우, 아무 작업을 하지 않음 */</span>\n  <span>if</span> <span>(</span><span>oldImports</span>.<span>length</span> === <span>0</span><span>)</span> <span>{</span>\n    <span>return</span><span>;</span>\n  <span>}</span>\n\n  <span>for</span> <span>(</span><span>const</span> <span>oldImport</span> <span>of</span> <span>oldImports</span><span>)</span> <span>{</span>\n    <span>/* 오래된 import 문에서 Adaptive를 가져오는 부분을 삭제 */</span>\n    <span>/* (Adaptive만을 가져오는 import 문인 경우, import 문 전체를 삭제) */</span>\n    <span>removeImportMember</span><span>(</span><span>root</span><span>,</span> <span>oldImport</span><span>,</span> <span>'Adaptive'</span><span>,</span> <span>{</span> <span>jscodeshift</span> <span>}</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>/* @tossteam/colors에서 adaptive를 import하는 부분을 추가 */</span>\n  <span>/* (@tossteam/colors를 import하고 있지 않은 경우, import 문을 추가) */</span>\n  <span>addImportMember</span><span>(</span><span>root</span><span>,</span> <span>'@tossteam/colors'</span><span>,</span> <span>'adaptive'</span><span>,</span> <span>{</span> <span>jscodeshift</span> <span>}</span><span>)</span><span>;</span>\n\n  <span>/* Adaptive 변수를 모두 adaptive로 치환 */</span>\n  <span>const</span> <span>oldAdaptives</span> = <span>findIdentifiers</span><span>(</span><span>root</span><span>,</span> <span>'Adaptive'</span><span>,</span> <span>{</span> <span>jscodeshift</span> <span>}</span><span>)</span><span>;</span>\n\n  <span>for</span> <span>(</span><span>const</span> <span>oldAdaptive</span> <span>of</span> <span>oldAdaptives</span><span>)</span> <span>{</span>\n    <span>jscodeshift</span><span>(</span><span>oldAdaptive</span><span>)</span>.<span>replaceWith</span><span>(</span>\n      <span>jscodeshift</span>.<span>identifier</span><span>(</span><span>'adaptive'</span><span>)</span>\n    <span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>/* 수정된 소스코드를 반환 */</span>\n  <span>return</span> <span>root</span>.<span>toSource</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><p id=\"c95f547d-9520-4698-abbe-d8902ca10521\"><span><span><span>이 중에서 </span><code>removeImportMember</code><span> 함수와 같은 경우, 아래와 같이 간단히 구현할 수 있었습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>function</span> <span>removeImportMember</span><span>(</span><span>root</span><span>,</span> <span>importNode</span><span>,</span> <span>name</span><span>,</span> <span>{</span> <span>jscodeshift</span> <span>}</span><span>)</span> <span>{</span>\n  <span>const</span> <span>oldSpecifiers</span> = <span>importNode</span>.<span>value</span>.<span>specifiers</span><span>;</span>\n\n  <span>/* name을 import하는 부분을 삭제 */</span>\n  <span>const</span> <span>newSpecifiers</span> = <span>oldSpecifiers</span>.<span>filter</span><span>(</span><span>specifier</span> <span>=&gt;</span> <span>{</span>\n    <span>return</span> <span>(</span>\n      <span>specifier</span>.<span>type</span> !== <span>'ImportSpecifier'</span> ||\n      <span>specifier</span>.<span>imported</span>.<span>name</span> !== <span>name</span>\n    <span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>/* 더 이상 import할 것이 남지 않은 경우에는, import 문을 삭제 */</span>\n  <span>if</span> <span>(</span><span>newSpecifiers</span>.<span>length</span> === <span>0</span><span>)</span> <span>{</span>\n    <span>jscodeshift</span><span>(</span><span>importNode</span><span>)</span>.<span>remove</span><span>(</span><span>)</span><span>;</span>\n    <span>return</span><span>;</span>\n  <span>}</span>\n\n  <span>/* 그렇지 않은 경우, import 문에서 name을 가져오는 부분만 삭제 */</span>\n  <span>jscodeshift</span><span>(</span><span>importNode</span><span>)</span>.<span>replaceWith</span><span>(</span>\n    <span>jscodeshift</span>.<span>importDeclaration</span><span>(</span>\n      <span>newSpecifiers</span><span>,</span>\n      <span>importNode</span>.<span>value</span>.<span>source</span>\n    <span>)</span>\n  <span>)</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"6538af82-2d70-4a8d-b4df-1da82689a8d9\"><span><span><span>다른 함수의 경우에도 유사하게 JSCodeShift API를 이용하여 구현할 수 있었습니다.</span></span></span></p><h2 id=\"4c6d7e2e-b1e4-46e9-9e1a-5ee31342ecec\"><span><span><span>JSCodeShift 테스트하기</span></span></span></h2><p id=\"d2e51744-33ae-4d5f-b45c-89ea31eb5c30\"><span><span><span>JSCodeShift는 작성한 변환 코드가 잘 작동하는지 테스트할 수 있도록 </span><code>testUtils</code><span> 라고 하는 이름의 테스트 도구를 제공합니다. 테스트 파일의 디렉토리 구조를 JSCodeShift가 요구하는 대로 맞춰야 하지만, 손쉽게 Jest에 테스트를 붙일 수 있어서 편리합니다.</span></span></span></p><p id=\"13a2fdc7-85ff-49fd-859a-e726f3e7004c\"><span><span><span>테스트가 잘 붙어 있으면, JSCodeShift 코드의 문제점을 바로바로 찾을 수 있게 됩니다. 개발 속도도 절약되는 만큼, JSCodeShift를 개발할 때는 꼭 테스트와 함께 하는 것을 추천합니다.</span></span></span></p><p id=\"8fb93ded-a8b3-43ee-8df4-acd0f7203b52\"><span><span><span>JSCodeShift 테스트와 관련된 자세한 내용은 </span><a href=\"https://github.com/facebook/jscodeshift#unit-testing\" rel=\"noreferrer noopener\" target=\"_blank\">JSCodeShift README</a><span>에서 확인할 수 있습니다.</span></span></span></p><h2 id=\"0d88e030-4e74-4e20-9dfb-b36a4203b581\"><span><span><span>토스팀과 JSCodeShift</span></span></span></h2><p id=\"c07d7a27-0d03-4c87-b37f-d1b571a7f0b3\"><span><span><span>토스 프론트엔드 개발팀은 짧은 시간동안 빠르게 개발환경을 개선해오면서 대량의 레거시 코드를 최신 라이브러리와 코드 컨벤션에 맞추도록 수정해주어야 했습니다. 경우에 따라서는 작성된지 2년이 지난 오래된 코드가 수만 줄 이상 존재하기도 했습니다.</span></span></span></p><p id=\"a5a4af5f-9bab-427f-9c93-e87df3991710\"><span><span><span>이때 JSCodeShift를 사용함으로써 그런 코드도 한번에 최신 코드와 같이 일관성을 맞출 수 있었습니다. 이번 JSCodeShift 가이드가 레거시 시스템을 다루는 다른 프론트엔드 개발자 분들께 도움이 되었으면 합니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "4": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"node_modules로부터 우리를 구원해 줄 Yarn Berry\" srcset=\"https://wp.toss.tech/wp-content/uploads/2021/05/techblog-04-yarn-berry.png\"/><h1>node_modules로부터 우리를 구원해 줄 Yarn Berry</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/sojin.jpg\"/><div><div><h3>박서진</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2021. 5. 7</div></div></section></header><div><p id=\"4b79295a-6edf-4e68-bac7-313295a441b6\"><span><span><span>토스 프론트엔드 챕터에서는 지난해부터 의존성을 관리하기 위해 Yarn Berry(v2)를 도입했습니다. 처음에는 일부 레포지토리부터 시작하여, 현재는 대부분의 레포지토리에 Yarn Berry가 적용되어 있는데요. 토스팀이 새로운 패키지 관리 시스템을 도입하게 된 배경과 사용하면서 좋았던 점을 테크 블로그를 통해 공유합니다.</span></span></span></p><h2 id=\"b43980f8-d861-4469-936b-ee508ee01528\"><span><span><span>Yarn Berry란?</span></span></span></h2><p id=\"937adae9-b5d0-4db4-ae15-015d496d2c3c\"><span><span><span>Yarn Berry는 Node.js를 위한 새로운 패키지 관리 시스템으로, Yarn v1의 주요 개발자인 </span><a href=\"https://github.com/arcanis/\" rel=\"noreferrer noopener\" target=\"_blank\">Maël Nison</a><span> 씨가 만들었습니다. 2020년 1월 25일부터 정식 버전(v2)가 출시되어, 현재는 </span><a href=\"https://github.com/babel/babel/\" rel=\"noreferrer noopener\" target=\"_blank\">Babel</a><span>과 같은 큰 오픈소스 레포지토리에서도 채택하고 있습니다. Yarn Berry는 GitHub </span><a href=\"https://github.com/yarnpkg/berry\" rel=\"noreferrer noopener\" target=\"_blank\">yarnpkg/berry</a><span> 레포지토리에서 소스코드가 관리되고 있습니다.</span></span></span></p><p id=\"7e5ad2db-2768-4e9e-8d44-fb2d1f005539\"><span><span><span>Yarn Berry는 기존의 \"깨져 있는\" NPM 패키지 관리 시스템을 혁신적으로 개선합니다.</span></span></span></p><h2 id=\"9f2f6dfd-8747-433c-b50a-6d3e43cd7804\"><span><span><span>NPM의 문제점</span></span></span></h2><p id=\"21ac632c-3ec1-4914-8b47-dec82a38c8d8\"><span><span><span>NPM은 Node.js 설치 시에 기본으로 제공되어 범용적으로 사용되고 있으나, 비효율적이거나 깨져 있는 부분이 많습니다.</span></span></span></p><figure id=\"886b5ce7-cd04-49f1-bc32-9de27600ebd6\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/5cc6bed3-b1c6-428a-b250-8ed0b8e6551a\"/></figure><h3 id=\"bf78eff2-06a9-4943-91ba-d9e074ac0387\"><span><span><span>비효율적인 의존성 검색</span></span></span></h3><p id=\"bd8e566a-75ea-49d5-b86f-06d7597862c1\"><span><span><span>NPM은 파일 시스템을 이용하여 의존성을 관리합니다. 익숙한 node_modules 폴더를 이용하는 것이 특징인데요. 이렇게 관리했을 때 의존성 검색은 비효율적으로 동작합니다.</span></span></span></p><p id=\"49939bc8-ef36-49fb-9c87-262f0327a174\"><span><span><span>예를 들어, </span><code>/Users/toss/dev/toss-frontend-libraries</code><span> 폴더에서 </span><code>require()</code><span> 문을 이용하여 </span><code>react</code><span> 패키지를 불러오는 상황을 가정합시다.</span></span></span></p><p id=\"1a4e25f4-8d27-4258-b954-23bd12b0c3c7\"><span><span><span>라이브러리를 찾기 위해 순회하는 디렉토리의 목록을 확인하려고 할 때, Node.js에서 제공하는 </span><code>require.resolve.paths()</code><span> 함수를 사용할 수 있습니다. 이 함수는 NPM이 검색하는 디렉토리의 목록을 반환합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>$ </span><span>node</span>\n<span>Welcome </span><span>to </span><span>Node</span>.<span>js</span> <span>v12</span>.<span>16.3</span>.\n<span>Type</span> <span>\".help\"</span> <span>for</span> <span>more </span><span>information</span>.\n&gt; <span>require</span>.<span>resolve</span>.<span>paths</span><span>(</span><span>'react'</span><span>)</span>\n<span>[</span>\n  <span>'/Users/toss/dev/toss-frontend-libraries/repl/node_modules'</span><span>,</span>\n  <span>'/Users/toss/dev/toss-frontend-libraries/node_modules'</span><span>,</span>\n  <span>'/Users/toss/node_modules'</span><span>,</span>\n  <span>'/Users/node_modules'</span><span>,</span>\n  <span>'/node_modules'</span><span>,</span>\n  <span>'/Users/toss/.node_modules'</span><span>,</span>\n  <span>'/Users/toss/.node_libraries'</span><span>,</span>\n  <span>'/Users/toss/.nvm/versions/node/v12.16.3/lib/node'</span><span>,</span>\n  <span>'/Users/toss/.node_modules'</span><span>,</span>\n  <span>'/Users/toss/.node_libraries'</span><span>,</span>\n  <span>'/Users/toss/.nvm/versions/node/v12.16.3/lib/node'</span>\n<span>]</span>\n\n</code></pre></div></div></div></div><p id=\"768c0402-8a16-4860-b7f6-ca8f8234ebd8\"><span><span><span>목록에서 확인할 수 있는 것처럼, NPM은 패키지를 찾기 위해서 계속 상위 디렉토리의 node_modules 폴더를 탐색합니다. 따라서 패키지를 바로 찾지 못할수록 readdir, stat과 같은 느린 I/O 호출이 반복됩니다. 경우에 따라서는 I/O 호출이 중간에 실패하기도 합니다.</span></span></span></p><p id=\"8c3d85f6-a4fa-43ac-98d1-3b19241d82d6\"><span><span><span>TypeScript 4.0까지는 node_modules를 이용한 패키지 탐색이 너무 비효율적인 나머지, 패키지를 처음으로 import 하기 전까지는 node_modules 내부의 타입 정보를 찾아보지 않기도 했습니다. (</span><a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-beta/#smarter-auto-imports\" rel=\"noreferrer noopener\" target=\"_blank\">TS 4.0 Changelog</a><span>)</span></span></span></p><h3 id=\"af781bdf-5956-49c7-94c1-022b7cbc3f8d\"><span><span><span>환경에 따라 달라지는 동작</span></span></span></h3><p id=\"f1b99c79-1350-4b2b-b5ed-f28461336c57\"><span><span><span>NPM은 패키지를 찾지 못하면 상위 디렉토리의 node_modules 폴더를 계속 검색합니다. 이 특성 때문에 어떤 의존성을 찾을 수 있는지는 해당 패키지의 상위 디렉토리 환경에 따라 달라집니다.</span></span></span></p><p id=\"7cd6c27b-3634-4a73-a1b6-f9c33710ef39\"><span><span><span>예를 들어, 상위 디렉토리가 어떤 node_modules를 포함하고 있는지에 따라 의존성을 불러올 수 있기도 하고, 없기도 합니다. 다른 버전의 의존성을 잘못 불러올 수 있는 여지도 존재합니다.</span></span></span></p><p id=\"0c9369d6-1f09-4d1b-b56b-c11ef3a2e105\"><span><span><span>이렇게 환경에 따라 동작이 변하는 것은 나쁜 징조입니다. 해당 상황을 재현하기 까다로워지기 때문입니다.</span></span></span></p><h3 id=\"f9a5c5ee-b6e8-4463-9f75-dc2886205280\"><span><span><span>비효율적인 설치</span></span></span></h3><p id=\"3266d2ff-db29-4fcf-afa3-b4a58d70e14b\"><span><span><span>NPM에서 구성하는 node_modules 디렉토리 구조는 매우 큰 공간을 차지합니다. 일반적으로 간단한 CLI 프로젝트도 수백 메가바이트의 node_modules 폴더가 필요합니다. 용량만 많이 차지할 뿐 아니라, 큰 node_modules 디렉토리 구조를 만들기 위해서는 많은 I/O 작업이 필요합니다.</span></span></span></p><p id=\"87108b06-f731-4776-b7e3-1d5bda107278\"><span><span><span>node_modules 폴더는 복잡하기 때문에 설치가 유효한지 검증하기 어렵습니다. 예를 들어, 수백 개의 패키지가 서로를 의존하는 복잡한 의존성 트리에서 node_modules 디렉토리 구조는 깊어집니다.</span></span></span></p><p id=\"70886df3-985b-43e5-baa3-5c73e4711082\"><span><span><span>이렇게 깊은 트리 구조에서 의존성이 잘 설치되어 있는지 검증하려면 많은 수의 I/O 호출이 필요합니다. 일반적으로 디스크 I/O 호출은 메모리의 자료구조를 다루는 것보다 훨씬 느립니다. 이런 문제로 인해 Yarn v1이나 NPM은 기본적인 의존성 트리의 유효성까지만 검증하고, 각 패키지의 내용이 올바른지는 확인하지 않습니다.</span></span></span></p><h3 id=\"2de49e8f-a139-41a1-8e82-a55dba01763a\"><span><span><span>유령 의존성 (Phantom Dependency)</span></span></span></h3><p id=\"f2170a5f-b108-422b-8737-89a2d39945e3\"><span><span><span>NPM 및 Yarn v1에서는 중복해서 설치되는 node_modules를 아끼기 위해 끌어올리기(Hoisting) 기법을 사용합니다.</span></span></span></p><figure id=\"f095def8-1ae5-451f-ab13-38e92c9a5e92\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/90646656-6012-4da1-95b4-f4b7479beb50\"/></figure><p id=\"0142e93b-9731-445d-85cf-ae830ca8ff56\"><span><span><span>예를 들어, 의존성 트리가 왼쪽의 모습을 하고 있다고 가정합시다.</span></span></span></p><p id=\"48e7edb0-09cf-487a-b5c9-59c8f024512b\"><span><span><span>왼쪽 트리에서 </span><span>[A (1.0)]</span><span>과 </span><span>[B (1.0)]</span><span> 패키지는 두 번 설치되므로 디스크 공간을 낭비합니다. NPM과 Yarn v1에서는 디스크 공간을 아끼기 위해 원래 트리의 모양을 오른쪽 트리처럼 바꿉니다.</span></span></span></p><p id=\"10f5b527-d6ac-425f-81b8-4b47915d72bc\"><span><span><span>오른쪽 트리로 의존성 트리가 바뀌면서 package-1 에서는 원래 require() 할 수 없었던 </span><span>[B (1.0)]</span><span> 라이브러리를 불러올 수 있게 되었습니다.</span></span></span></p><div><div><p id=\"0449674e-22f9-4827-968f-f79b67df8f90\"><span><span><span>이렇게 끌어올리기에 따라 직접 의존하고 있지 않은 라이브러리를 require() 할 수 있는 현상을 유령 의존성(Phantom Dependency)이라고 부릅니다.</span></span></span></p><p id=\"b1fcb219-1b90-4c5f-9a37-b2df97b98c19\"><span><span><span>유령 의존성 현상이 발생할 때, package.json에 명시하지 않은 라이브러리를 조용히 사용할 수 있게 됩니다. 다른 의존성을 package.json 에서 제거했을 때 소리없이 같이 사라지기도 합니다. 이런 특성은 의존성 관리 시스템을 혼란스럽게 만듭니다.</span></span></span></p><p id=\"4b0a5ebf-8dd2-4990-a542-f8773a97b72a\"><span><span></span></span></p></div><div><figure id=\"0b318d19-08e7-4db3-a7ff-66efacb079ef\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/324cde2c-a47f-49cc-b402-ba330688b317\"/></figure></div></div><h2 id=\"a95af650-3571-4c85-95a4-cdde0d515977\"><span><span><span>Plug'n'Play (PnP)</span></span></span></h2><p id=\"872dbe3f-9f9a-4b26-a38a-1ff1beb7ab10\"><span><span><span>Yarn Berry는 위에서 언급한 문제를 새로운 Plug'n'Play 전략을 이용하여 해결합니다.</span></span></span></p><h3 id=\"52c99cdc-6bba-442e-9f1a-8f3a52f8a5b6\"><span><span><span>Plug'n'Play의 배경</span></span></span></h3><p id=\"9d438970-0d2d-4746-bbbd-0c2733fe3c77\"><span><span><span>Yarn v1은 package.json 파일을 기반으로 의존성 트리를 생성하고, 디스크에 node_modules 디렉토리 구조를 만듭니다. 이미 패키지의 의존성 구조를 완전히 알고 있는 것입니다.</span></span></span></p><p id=\"23805ee8-c89c-44b5-aff8-70ee1e08b435\"><span><span><span>node_modules 파일 시스템을 이용한 의존성 관리는 깨지기 쉽습니다. 모든 패키지 매니저가 실수하기 쉬운 Node 내장 의존성 관리 시스템을 사용해야 할까요? 패키지 매니저들이 node_modules 디렉토리 구조를 만드는 것에 그치지 않고, 보다 근본적으로 안전하게 의존성을 관리하면 어떨까요?</span></span></span></p><p id=\"3dacc9d1-3dd7-4129-9d77-1061070b2ec8\"><span><span><span>Plug'n'Play는 이런 생각에서 출발했습니다.</span></span></span></p><h3 id=\"9dc22b52-d5a5-4860-9e97-1f8591533d87\"><span><span><span>Plug'n'Play 켜기</span></span></span></h3><p id=\"7476ca17-417f-4375-941d-a519bb18fa12\"><span><span><span>NPM에서 최신 버전의 Yarn을 내려받고, 버전을 Berry로 설정하면 Yarn Berry를 사용할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>$ </span><span>npm </span><span>install</span> -<span>g </span><span>yarn</span>\n<span>$ </span><span>cd</span> ../<span>path</span>/<span>to</span>/<span>some</span>-<span>package</span>\n<span>$ </span><span>yarn </span><span>set </span><span>version </span><span>berry</span></code></pre></div></div></div></div><p id=\"93052ca6-c4fc-40ed-9f4a-5bd8edd82227\"><span><span><span>Yarn Berry는 기존 Node.js 의존성 관리 시스템과 많이 다르기 때문에 하위호환을 위해 패키지 단위로만 도입할 수 있습니다.</span></span></span></p><h3 id=\"c15aaafa-3aa9-4614-a003-8fd005142f15\"><span><span><span>Plug'n'Play의 동작 방법</span></span></span></h3><p id=\"6c4a9091-8a71-46cd-b3c7-1d54a3350722\"><span><span><span>Plug'n'Play 설치 모드에서 </span><code>yarn install</code><span> 로 의존성을 설치했을 때, 기존과 다른 모습을 볼 수 있습니다.</span></span></span></p><figure id=\"6d4425eb-b927-4521-9f47-6842d4f1acb4\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/d7b95bfc-e525-4788-8dc8-496d01aeb337\"/></figure><p id=\"470ea669-14c4-4e07-a986-8eab96287013\"><span><span><span>Yarn Berry는 node_modules를 생성하지 않습니다. 대신 </span><code>.yarn/cache</code><span> 폴더에 의존성의 정보가 저장되고, </span><code>.pnp.cjs</code><span> 파일에 의존성을 찾을 수 있는 정보가 기록됩니다. </span><code>.pnp.cjs</code><span>를 이용하면 디스크 I/O 없이 어떤 패키지가 어떤 라이브러리에 의존하는지, 각 라이브러리는 어디에 위치하는지를 바로 알 수 있습니다.</span></span></span></p><p id=\"22a4f2bb-51af-413b-8f8c-35d068fcfde8\"><span><span><span>예를 들어, </span><code>react</code><span> 패키지는 </span><code>.pnp.cjs</code><span> 파일에서 다음과 같이 나타납니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>/* react 패키지 중에서 */</span>\n<span>[</span><span>\"react\"</span><span>,</span> <span>[</span>\n  <span>/* npm:17.0.1 버전은 */</span>\n  <span>[</span><span>\"npm:17.0.1\"</span><span>,</span> <span>{</span>\n    <span>/* 이 위치에 있고 */</span>\n    <span>\"packageLocation\"</span><span>:</span> <span>\"./.yarn/cache/react-npm-17.0.1-98658812fc-a76d86ec97.zip/node_modules/react/\"</span><span>,</span>\n    <span>/* 이 의존성들을 참조한다. */</span>\n    <span>\"packageDependencies\"</span><span>:</span> <span>[</span>\n      <span>[</span><span>\"loose-envify\"</span><span>,</span> <span>\"npm:1.4.0\"</span><span>]</span><span>,</span>\n      <span>[</span><span>\"object-assign\"</span><span>,</span> <span>\"npm:4.1.1\"</span><span>]</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>]</span>\n<span>]</span><span>]</span><span>,</span>\n\n</code></pre></div></div></div></div><p id=\"3b55bbe8-736f-44f4-9e39-c828dbdb995e\"><span><span><span>react 17.0.1 버전 패키지의 위치와 의존성의 목록을 완전하게 기술하고 있는 것을 확인할 수 있습니다. 이로부터 특정 패키지와 의존성에 대한 정보가 필요할 때 바로 알 수 있습니다.</span></span></span></p><p id=\"b6de4eb4-9fe4-4314-ba04-0c503f0982c1\"><span><span><span>Yarn은 Node.js가 제공하는 </span><code>require()</code><span> 문의 동작을 덮어씀으로써 효율적으로 패키지를 찾을 수 있도록 합니다. 이 때문에 PnP API를 이용하여 의존성 관리를 하고 있을 때에는 </span><code>node</code><span> 명령어 대신 </span><code>yarn node</code><span> 명령어를 사용해야 합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>$ </span><span>yarn </span><span>node</span></code></pre></div></div></div></div><p id=\"ed5686a0-25db-4b85-95b8-cedcde045311\"><span><span><span>일반적으로 Node.js 앱을 실행할 때에는 package.json의 </span><code>scripts</code><span> 에 실행 스크립트를 등록하여 사용하게 됩니다. 이때 Yarn v1에서 사용하던 것처럼 Yarn으로 스크립트를 실행하기만 하면 자동으로 PnP로 의존성을 불러옵니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>$ </span><span>yarn </span><span>dev</span></code></pre></div></div></div></div><h3 id=\"0eb08510-c3dd-4d1c-becd-8d88ad9509b5\"><span><span><span>ZipFS (Zip Filesystem)</span></span></span></h3><p id=\"5b80e5c6-0844-4ae8-a900-402e7186c3f4\"><span><span><span>zip으로 묶인 라이브러리가 저장된 .yarn/cache 폴더</span></span></span></p><figure id=\"815f9f96-afea-4a0b-9f62-b42dff791e83\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/95f845aa-4b67-422e-9f51-177e93744676\"/></figure><p id=\"9e048475-61ff-4cf8-a92f-c388aa28e1ae\"><span><span><span>Yarn PnP 시스템에서 각 의존성은 Zip 아카이브로 관리됩니다. 예를 들어, Recoil 0.1.2 버전은 </span><code>recoil-npm-0.1.2-9a0edbd2b9-c69105dd7d.zip</code><span>과 같은 압축 파일로 관리됩니다.</span></span></span></p><p id=\"19dd9109-4067-4ead-8b3c-f5c929e129cf\"><span><span><span>이후 .pnp.cjs 파일이 지정하는 바에 따라 동적으로 Zip 아카이브의 내용이 참조됩니다.</span></span></span></p><p id=\"a1266613-685d-4d09-9a2f-bc3f798e1b28\"><span><span><span>Zip 아카이브로 의존성을 관리하면 다음과 같은 장점이 생깁니다.</span></span></span></p><ol><li id=\"841ee5ba-1d1b-47d8-bd1b-a25ebf84e0d2\"><span><span><span>더 이상 node_modules 디렉토리 구조를 생성할 필요가 없기 때문에 설치가 신속히 완료됩니다.</span></span></span></li><li id=\"d8e7fb47-d055-4729-9a80-e20f3be590a7\"><span><span><span>각 패키지는 버전마다 하나의 Zip 아카이브만을 가지기 때문에 중복해서 설치되지 않습니다. 각 Zip 아카이브가 압축되어 있음을 고려할 때, 스토리지 용량을 크게 아낄 수 있습니다.</span></span></span><div><ul><li id=\"3d6248c4-90fb-43eb-9493-ee3880baa6e0\"><span><span><span>실제로 토스팀에서 의존성이 차지하는 크기를 대폭 감축할 수 있었습니다.</span></span></span></li><li id=\"7f0064d2-0723-4b91-8c58-ff5478712ac8\"><span><span><span>한 서비스의 경우 NPM을 이용했을 때 node_modules 디렉토리가 약 400MB를 차지했지만, Yarn PnP를 사용했을 때 의존성 디렉토리의 크기는 120MB에 불과했습니다.</span></span></span></li></ul></div></li><li id=\"4af5a892-8f7d-43c0-bd5e-550f745246f9\"><span><span><span>의존성을 구성하는 파일의 수가 많지 않으므로, 변경 사항을 감지하거나 전체 의존성을 삭제하는 작업이 빠릅니다.</span></span></span><div><ul><li id=\"436fe8e2-e53f-4d8c-80b6-db7222855ed2\"><span><span><span>없는 의존성이나 더 이상 필요 없는 의존성을 쉽게 찾을 수 있습니다.</span></span></span></li><li id=\"812b406e-d3cc-4f99-bdfd-9301b12c7495\"><span><span><span>Zip 파일의 내용이 변경되었을 때에는 체크섬과 비교하여 쉽게 변경 여부를 감지할 수 있습니다.</span></span></span></li></ul></div></li></ol><h2 id=\"9c0e6c61-1532-402a-8e72-b15b2b7a72da\"><span><span><span>Plug'n'Play 도입 결과</span></span></span></h2><p id=\"dc7d1313-5c65-4dae-ac5b-5ec7fb7f5ed4\"><span><span><span>토스 프론트엔드 챕터가 Plug'n'Play를 도입한 결과, 다양한 장점을 느낄 수 있었습니다.</span></span></span></p><h3 id=\"552b4d82-c1d7-4efe-a8aa-16d5aa751fe2\"><span><span><span>의존성을 검색할 때</span></span></span></h3><p id=\"992602a0-10fc-4a63-9cab-274596fc18b8\"><span><span><span>의존성을 검색할 때, 더 이상 node_modules 폴더를 순회할 필요가 없습니다. .pnp.cjs 파일이 제공하는 자료구조를 이용하여 바로 의존성의 위치를 찾기 때문입니다. 이로써 require()에 걸리는 시간이 크게 단축되었습니다.</span></span></span></p><h3 id=\"c1cc0e8e-1bf1-4b65-bcdc-6a0c8f8b9f82\"><span><span><span>재현 가능성</span></span></span></h3><p id=\"40ed669c-0165-4c82-a51c-fbdd1b37d465\"><span><span><span>패키지의 모든 의존성은 .pnp.cjs 파일을 이용하여 관리되기 때문에 더 이상 외부 환경에 영향받지 않습니다. 이로써 다양한 기기 및 CI 환경에서 require() 또는 import 문의 동작이 동일할 것임을 보장할 수 있게 되었습니다.</span></span></span></p><h3 id=\"f8008867-3945-4d1b-a74b-60de5cab15d2\"><span><span><span>의존성을 설치할 때</span></span></span></h3><p id=\"02cefb11-8e02-4ce6-b346-3f5fe5d50366\"><span><span><span>더 이상 설치를 위해 깊은 node_modules 디렉토리를 생성하지 않아도 됩니다. 또 NPM이 설치하는 것처럼 같은 버전의 패키지가 여러 번 복사되어 설치 시간을 극단적으로 단축할 수 있습니다. 이에 더해 Zero-install을 사용하면 대부분 라이브러리를 설치 없이 사용할 수 있습니다.</span></span></span></p><p id=\"b1632dc5-f63e-4a05-a440-e9999a2fdd3a\"><span><span><span>이를 이용하면 CI와 같이 반복적으로 의존성 설치 작업이 이루어지는 곳에서 시간을 크게 절약할 수 있습니다. 토스팀에서는 원래 CI에서 60초씩 걸리던 설치 작업을 Yarn PnP를 도입함으로써 수 초 이내로 단축했습니다.</span></span></span></p><h3 id=\"00eeaa1d-adba-4a00-8328-35114a77857c\"><span><span><span>엄격한 의존성 관리</span></span></span></h3><p id=\"e50d5e13-55b8-41f0-a413-5ee591b278ea\"><span><span><span>Yarn PnP는 node_modules에서와 같이 의존성을 끌어올리지 않습니다. 이로써 각 패키지들은 자신이 package.json에 기술하는 의존성에만 접근할 수 있습니다. 기존에 환경에 따라 우연히 작동할 수 있었던 코드들이 보다 엄격히 관리되는 것입니다. 이로써 예기치 못한 버그를 쉽게 일으키던 유령 의존성 현상을 근본적으로 막을 수 있었습니다.</span></span></span></p><h3 id=\"23bca40f-7dde-4cbf-9b96-af7c01efa74a\"><span><span><span>의존성 검증</span></span></span></h3><p id=\"8656cbe2-ff53-4274-8a2f-3b0a7902f324\"><span><span><span>node_modules를 사용하여 의존성을 관리했을 때에는 올바르게 의존성이 설치되지 못해서 의존성 폴더 전체를 지우고 다시 설치해야 하는 경우가 발생하고는 했습니다. node_modules 폴더를 검증하기 어려웠기 때문입니다. 전체 재설치를 수행할 때 node_modules 디렉토리 구조를 다시 만드느라 1분 이상의 시간이 허비되기도 했습니다.</span></span></span></p><p id=\"cd65e118-e3db-44c6-aa69-56e1992504b1\"><span><span><span>Yarn PnP에서는 Zip 파일을 이용하여 패키지를 관리하기 때문에 빠진 의존성을 찾거나 의존성 파일이 변경되었음을 찾기 쉽습니다. 이로써 의존성이 잘못되었을 때 쉽게 바로잡을 수 있습니다. 이로써 올바르게 의존성이 설치되는 것을 100%에 가깝게 보장할 수 있습니다.</span></span></span></p><h2 id=\"beb6de5e-0850-4329-8e44-89d4f7c21095\"><span><span><span>Zero-Install</span></span></span></h2><p id=\"ee605a80-46da-463a-9440-a5db46126e42\"><span><span><span>위에서 Yarn Berry의 PnP를 도입함으로써 얻을 수 있는 다양한 장점들을 살펴보았습니다. 여기에서 한 발 더 나아간 생각을 해 볼 수 있습니다. 바로 의존성도 Git 등을 이용하여 버전 관리를 하면 어떨까? 라고 하는 생각인데요.</span></span></span></p><p id=\"8acc9268-d67a-412d-b7b5-1bec24874d3d\"><span><span><span>Yarn PnP은 의존성을 압축 파일로 관리하기 때문에 의존성의 용량이 작습니다. 또한 각 의존성은 하나의 Zip 파일로만 표현되기 때문에 의존성을 구성하는 파일의 숫자가 NPM만큼 많지 않습니다. 예를 들어, 일반적인 node_modules 는 1.2GB 크기이고 13만 5천개의 파일로 구성되어 있는 반면, Yarn PnP의 의존성은 139MB 크기의 2천개의 압축 파일로 구성됩니다.</span></span></span></p><p id=\"44ce0964-ade4-4280-8420-16507a391aaa\"><span><span><span>이처럼 용량과 파일의 숫자가 적기 때문에 Yarn Berry를 사용하면 의존성을 Git으로 관리할 수 있습니다. 그리고 이렇게 의존성의 버전을 관리할 때 더욱 큰 장점들을 발견할 수 있습니다.</span></span></span></p><p id=\"0030979b-f668-47b7-aa64-81de42fa8d18\"><span><span><span>이렇게 Yarn Berry에서 의존성을 버전 관리에 포함하는 것을 </span><span>Zero-Install</span><span>이라고 합니다.</span></span></span></p><figure id=\"6d747843-dcb1-4b81-b605-e927e57cfb01\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/976ba3cb-4d8e-46c4-82cd-4205272b0795\"/></figure><p id=\"54a15547-7571-49f3-ab36-688a897fcaf1\"><span><span><span>Yarn Berry Git 레포지토리에서 사용하는 Zero-install</span></span></span></p><p id=\"1519c7d8-8f50-4237-ba76-fb2219bfc935\"><span><span><span>의존성을 버전 관리에 포함하면 많은 장점들이 생깁니다.</span></span></span></p><ol><li id=\"3a98df8b-4b53-4911-bce0-c1993334c72c\"><span><span><span>새로 저장소를 복제하거나 브랜치를 바꾸었다고 해서 yarn install을 실행하지 않아도 됩니다.</span><span> 일반적으로 다른 의존성을 사용하는 곳으로 브랜치를 변경했을 때, 잊지 않고 의존성을 설치해주어야 했습니다. 경우에 따라서는 잘못된 의존성 버전이 사용됨으로써 웹 서비스가 알 수 없는 이유로 오동작하기도 했습니다. Zero-Install을 사용했을 때 이런 문제는 완전히 해결됩니다. 더해서 네트워크가 끊어진 곳에서는 오프라인 캐시 기능을 해주기도 합니다.</span></span></span></li><li id=\"1d991c77-6b07-444f-a06b-56107ba81b5d\"><span><span><span>CI에서 의존성 설치하는 시간을 크게 절약할 수 있습니다.</span><span> 토스에서는 일반적으로 캐시가 존재하지 않을 때 의존성을 설치하기 위해서 60초~90초의 시간이 필요했습니다. Zero-Install을 사용하면 Git Clone으로 저장소를 복제했을 때 의존성들이 바로 사용 가능한 상태가 되어, 의존성을 설치할 필요가 없습니다. 이로써 CI 시간을 크게 절약할 수 있었습니다.</span></span></span></li></ol><p id=\"5157cdd5-8230-45eb-a7b6-eb133d8e5e41\"><span><span><span>토스 프론트엔드 챕터에서는 Zero-install 기능을 적극적으로 레포지토리에 도입함으로써 빌드와 배포 시간을 크게 단축할 수 있었습니다.</span></span></span></p><h2 id=\"bf106533-0040-4a40-b1e7-f7f5d7971af3\"><span><span><span>그 외 Yarn Berry에서 좋았던 점</span></span></span></h2><p id=\"cf8cd2ef-862f-4b21-98a0-389b78c8e2a1\"><span><span><span>이 외에 Yarn Berry는 다양한 개발자 친화적인 기능을 제공합니다.</span></span></span></p><ol><li id=\"0c471860-5292-4d44-a273-1c4f45885443\"><span><span><span>플러그인 시스템</span><span>: Yarn Berry는 핵심 기능도 플러그인을 이용하여 개발되어 있을 만큼 플러그인 친화적인 환경을 자랑합니다. 필요한 만큼 Yarn의 기능을 확장하여 손쉽게 CLI로 사용할 수 있습니다.토스 프론트엔드 챕터에서는 이현섭님께서 </span><a href=\"https://github.com/toss/yarn-workspace-plugin-since\" rel=\"noreferrer noopener\" target=\"_blank\">변경된 워크스페이스를 계산하는 플러그인</a><span>을 며칠만에 만들어주시기도 하셨습니다. 이처럼 Yarn Berry의 기능이 부족하다면 손쉽게 플러그인을 만들 수 있습니다.</span></span></span></li><li id=\"92c05ef6-3963-4cd5-a3cb-6bbcda693e1b\"><span><span><span>워크스페이스</span><span>: Yarn Berry는 Yarn v1와 비교할 수 없을 정도로 높은 완성도의 워크스페이스 기능을 제공합니다. Yarn Berry의 </span><a href=\"https://github.com/yarnpkg/berry\" rel=\"noreferrer noopener\" target=\"_blank\">Git 레포지토리</a><span>에서 대표적으로 사용하는 모습을 확인할 수 있습니다. TypeScript를 사용함에도 한 패키지의 소스 코드의 변경사항이 즉시 다른 패키지에 반영되는 모습이 인상적입니다.토스 프론트엔드 챕터에서도 적극적으로 워크스페이스 기능을 사용하고 있습니다.</span></span></span></li><li id=\"82026ccf-10ef-44f3-a122-94787c320981\"><span><span><span>패치 명령어 기본 지원:</span><span> 경우에 따라서 NPM에 배포된 라이브러리의 일부분만 수정해서 사용하고 싶은 니즈가 있습니다. Yarn Berry는 </span><a href=\"https://yarnpkg.com/cli/patch\" rel=\"noreferrer noopener\" target=\"_blank\">yarn patch</a><span> 명령어를 제공함으로써 쉽게 라이브러리의 일부분을 수정해서 사용할 수 있도록 합니다. 이렇게 만든 패치 파일은 </span><a href=\"https://yarnpkg.com/features/protocols\" rel=\"noreferrer noopener\" target=\"_blank\">patch: 프로토콜</a><span>을 이용해서 쉽게 의존성 설치에 사용할 수 있습니다.</span></span></span></li></ol><p id=\"7962d6d8-cb84-4ec6-a27d-9cdfacf2b659\"><span><span><span>토스팀은 이렇게 Yarn Berry를 도입함으로써 JavaScript 의존성을 효율적이고 안전하게 다룰 수 있었습니다. 오래 걸리던 CI 속도를 60초 이상 단축하기도 했습니다.</span></span></span></p><p id=\"18f5b851-9702-44da-a48d-5914d25d7e88\"><span><span><span>다음 Yarn Berry 아티클에서는 실제로 거대한 서비스 모노레포를 Yarn Berry로 이전한 경험을 소개드리면서 실사용에서 주의할 점에 대해 보다 자세히 소개드리겠습니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "5": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"Template Literal Types로 타입 안전하게 코딩하기\" srcset=\"https://wp.toss.tech/wp-content/uploads/2021/05/techblog-05-template-literal.png\"/><h1>Template Literal Types로 타입 안전하게 코딩하기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/sojin.jpg\"/><div><div><h3>박서진</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2021. 5. 14</div></div></section></header><div><p id=\"bd29a305-e44f-42dd-bec0-f873a58987b9\"><span><span><span>2020년 11월 </span><a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-1/\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript 4.1</a><span>이 출시되면서 \"Template Literal Type\"을 사용할 수 있게 되었습니다. TypeScript로 JSON Parser를 만들거나, </span><code>document.querySelector</code><span> 의 결과 타입을 추론할 수 있게 되어 화제가 되었는데요. 이번 아티클에서는 Template Literal Type이란 무엇인지, 이를 바탕으로 어떻게 그런 결과물을 만들 수 있었는지 간단히 예시로 소개드리고자 합니다.</span></span></span></p><h2 id=\"a8e7dcdf-eb68-489a-8742-dfb87aff3a09\"><span><span><span>Template Literal Type이란?</span></span></span></h2><p id=\"7900a6bd-a003-4fcc-9ac8-516ad3185a4d\"><span><span><span>간단히 말해, Template Literal Type이란 기존 TypeScript의 String Literal Type을 기반으로 새로운 타입을 만드는 도구입니다. 구체적인 예시로 Template Literal Type에 대해 자세히 살펴보겠습니다.</span></span></span></p><h3 id=\"02f98fc0-edcc-4a33-9be6-62f7b16b271e\"><span><span><span>예시 1: 가장 간단한 형태</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>Toss</span> = <span>'toss'</span><span>;</span>\n\n<span>// type TossPayments = 'toss payments';</span>\n<span>type </span><span>TossPayments</span> = <span>`</span><span>${</span><span>Toss</span><span>}</span><span> payments`</span><span>;</span></code></pre></div></div></div></div><p id=\"f5e7a701-2ec6-4d71-a704-d911faabb605\"><span><span><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAKg9gZwVAvFA5MRD0G4BQ+A9EVKJLNgAoCGIAthAHbDJqbZRh2Ms4Hlo8JLQbNWqKAAMAJAG9hCAL5ce4hFNxA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a></span></span></p><p id=\"086e00ce-04be-4be5-8529-5a6d687e8841\"><span><span><span>가장 간단한 형태로, 원래 있던 </span><code>'toss'</code><span> 라고 하는 타입을 바탕으로 </span><code>'toss payments'</code><span> 라고 하는 타입을 만드는 경우를 생각할 수 있습니다.</span></span></span></p><p id=\"7bc69d50-fd5f-4319-9e67-51c2f8fe3621\"><span><span><span>TypeScript 4.1 이전에는 이런 문자열 작업이 불가능했지만, Template Literal Type을 이용함으로써 보다 넓은 타입 연산이 가능해졌습니다.</span></span></span></p><h3 id=\"502db2b6-3184-4db0-bbf8-aef9c116cbcc\"><span><span><span>예시 2: 하나의 Union Type</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>Toss</span> = <span>'toss'</span><span>;</span>\n<span>type </span><span>Companies</span> = <span>'core'</span> | <span>'bank'</span> | <span>'securities'</span> | <span>'payments'</span> | <span>'insurance'</span><span>;</span>\n\n<span>// type TossCompanies = 'toss core' | 'toss bank' | 'toss securities' | ...;</span>\n<span>type </span><span>TossCompanies</span> = <span>`</span><span>${</span><span>Toss</span><span>}</span><span> </span><span>${</span><span>Companies</span><span>}</span><span>`</span></code></pre></div></div></div></div><p id=\"f5ba9082-22c3-469c-8638-30e81557a6e8\"><span><span><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAKg9gZwVAvFA5MRD0G4BQokUAwnALZgCGAdgJYTJroDGcAThOlAD4YBGtANbc+6BBBYBXdnWAMcvDNRDkINYIrF0aCGbRZcC+APQmoRaPCRlKtBagxYkUNp1FPsUQTRFLMXhLSsvKMHgB0kQSWsNi21PSMjgAGACQA3tYIAL5QGfH2jNnJQA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a></span></span></p><p id=\"5fbf7fb8-3107-465f-8cd7-c5c82a85fa01\"><span><span><span>Template Literal Type을 Union type(합 타입)과 함께하면, 결과물도 Union Type이 됩니다.</span></span></span></p><p id=\"eedfddc1-0039-46c7-a24d-c3a65781bd4d\"><span><span><span>예를 들어, 위 예시에서 </span><code>'toss'</code><span> 타입과 </span><code>'core' | 'bank' | 'securities' | ...</code><span> 타입을 Template Literal Type으로 연결하면 </span><code>'toss core' | 'toss bank' | 'toss securities' | ...</code><span> 와 같이 확장되는 것을 확인할 수 있습니다.</span></span></span></p><h3 id=\"b6040a96-e795-4e7b-bf25-e7dc21a3f82f\"><span><span><span>예시 3: 여러 개의 Union Type</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>VerticalAlignment</span> = <span>\"top\"</span> | <span>\"middle\"</span> | <span>\"bottom\"</span><span>;</span>\n<span>type </span><span>HorizontalAlignment</span> = <span>\"left\"</span> | <span>\"center\"</span> | <span>\"right\"</span><span>;</span>\n\n<span>// type Alignment =</span>\n<span>//   | \"top-left\"    | \"top-center\"    | \"top-right\"</span>\n<span>//   | \"middle-left\" | \"middle-center\" | \"middle-right\"</span>\n<span>//   | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"</span>\n<span>type </span><span>Alignment</span> = <span>`</span><span>${</span><span>VerticalAlignment</span><span>}</span><span>-</span><span>${</span><span>HorizontalAlignment</span><span>}</span><span>`</span><span>;</span></code></pre></div></div></div></div><p id=\"9d4e010c-8734-41e7-961a-abb227a760f4\"><span><span><a href=\"https://www.typescriptlang.org/play?ts=4.1.0-dev.20200920#code/C4TwDgpgBAahBOwCWBjAhgGwIIaQcwDsBbCA4KAXigCJgB7MaqAHxqKQBMOMInXqARnWD0i1ANwAoUJCgAJOvCQAvOmUw58xUuSrUeAM2B8aKHQhPUleABbGpkgPSOoM6JsIkylJy6gsaejAAWkNjf39+IOCzMgsIgNoGYOs7al8I-nYuHlCII0ts7ggY83hCzmKU-DSMyJohEToiPILExtFSuPL24U7U42lwd1xPHUooAAMAEgBvOERUDVHtMgBfYLmFJVV1bBWvYDXJ8SA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a></span></span></p><p id=\"d1ba570d-f0d6-4c0f-a150-441d8b79e09c\"><span><span><span>여러 개의 Union Type을 연결할 수도 있습니다.</span></span></span></p><p id=\"950ea923-5e48-4cf3-88d4-f2c89287edbd\"><span><span><span>예를 들어, 위에서는 </span><code>VerticalAlignment</code><span> 타입과 </span><code>HorizontalAlignment</code><span> 타입을 연결하여, </span><code>${VerticalAlignment}-${HorizontalAlignment}</code><span> 타입을 만들었습니다.</span></span></span></p><p id=\"5d942fba-16e4-4244-8552-f52720092be9\"><span><span><span>원래라면 중복해서 Alignment 타입을 다시 정의해야 했겠지만, Template Literal Type을 사용함으로써 중복 없이 더욱 간결히 타입을 표현할 수 있게 되었습니다.</span></span></span></p><h3 id=\"ec6af3e6-8597-482b-a5f8-8b652284cae4\"><span><span><span>예시 4: 반복되는 타입 정의 없애기</span></span></span></h3><p id=\"b76f1602-408a-4386-93eb-736f5fa69bde\"><span><span><span>문제 상황</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 이벤트 이름이 하나 추가될 때마다....</span>\n<span>type </span><span>EventNames</span> = <span>'click'</span> | <span>'doubleClick'</span> | <span>'mouseDown'</span> | <span>'mouseUp'</span><span>;</span>\n\n<span>type </span><span>MyElement</span> = <span>{</span>\n    <span>addEventListener</span><span>(</span><span>eventName</span><span>:</span> EventNames<span>,</span> <span>handler</span><span>:</span> <span>(</span><span>e</span><span>:</span> Event<span>)</span> <span>=&gt;</span> <span>void</span><span>)</span><span>:</span> <span>void</span><span>;</span>\n\n    <span>// onEvent() 도 하나씩 추가해줘야 한다</span>\n    <span>onClick</span><span>(</span><span>e</span><span>:</span> Event<span>)</span><span>:</span> <span>void</span><span>;</span>\n    <span>onDoubleClick</span><span>(</span><span>e</span><span>:</span> Event<span>)</span><span>:</span> <span>void</span><span>;</span>\n    <span>onMouseDown</span><span>(</span><span>e</span><span>:</span> Event<span>)</span><span>:</span> <span>void</span><span>;</span>\n    <span>onMouseUp</span><span>(</span><span>e</span><span>:</span> Event<span>)</span><span>:</span> <span>void</span><span>;</span>\n<span>}</span><span>;</span></code></pre></div></div></div></div><p id=\"206f737f-0a7c-49c8-ad3b-134e32d7d633\"><span><span><span>이벤트에 대한 핸들러를 등록할 때, </span><code>addEventListener('event', handler)</code><span> 와 </span><code>onEvent = handler</code><span> 의 두 가지 형식을 모두 사용할 수 있는 </span><code>MyElement</code><span> 타입을 생각해봅시다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 두 가지 방법 모두 사용할 수 있는 경우</span>\n<span>element</span>.<span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>alert</span><span>(</span><span>'I am clicked!'</span><span>)</span><span>)</span><span>;</span>\n<span>element</span>.<span>onClick</span> = <span>(</span><span>)</span> <span>=&gt;</span> <span>alert</span><span>(</span><span>'I am clicked!'</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"0ee064bc-3a78-4b5e-b40e-1d41ed61d12f\"><span><span><span>예를 들어, </span><code>click</code><span> 이벤트를 구독할 때, 위의 두 가지 방법을 모두 사용할 수 있는 것입니다.</span></span></span></p><p id=\"1b10762b-168c-4f54-87b7-bed646cce28c\"><span><span><span>요소에 추가할 수 있는 이벤트의 종류는 자주 변경되고는 합니다. 예를 들어, 브라우저 API가 바뀌면서 </span><code>'pointerDown'</code><span> 과 같은 이벤트가 새로 추가될 수 있습니다.</span></span></span></p><p id=\"555c052c-9820-44f5-8f1a-7e472df35f77\"><span><span><span>이런 경우, TypeScript 4.1 이전에는 매번 수동으로 여러 곳의 타입을 수정해야 했습니다. 우선 </span><code>addEventListener</code><span>의 인자로 사용되는 이벤트 이름 </span><code>EventNames</code><span> 타입에 </span><code>'pointerDown'</code><span> 을 넣어야 했습니다. 또 </span><code>onPointerDown</code><span> 메서드를 명시해야 했습니다. 잊지 않고 두 곳을 수정해야 했기 때문에, 실수하기 쉬웠습니다.</span></span></span></p><p id=\"cea8fa4d-3782-4fff-958f-6e8b4c70e8c0\"><span><span><span>하지만 Template Literal Type을 이용하면 한 곳만 수정해도 모두에 반영되도록 할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>EventNames</span> = <span>'click'</span> | <span>'doubleClick'</span> | <span>'mouseDown'</span> | <span>'mouseUp'</span><span>;</span>\n\n<span>// CapitalizedEventNames = 'Click' | 'DoubleClick' | ...;</span>\n<span>type </span><span>CapitalizedEventNames</span> = <span>Capitalize</span>&lt;<span>EventNames</span>&gt;<span>;</span>\n\n<span>// type HandlerNames = 'onClick' | 'onDoubleClick' | 'onMouseDown' | 'onMouseUp';</span>\n<span>type </span><span>HandlerNames</span> = <span>`on</span><span>${</span><span>CapitalizedEventNames</span><span>}</span><span>`</span><span>;</span>\n\n<span>type </span><span>Handlers</span> = <span>{</span>\n  <span>[</span><span>H</span> <span>in</span> <span>HandlerNames</span><span>]</span><span>:</span> <span>(</span><span>event</span><span>:</span> Event<span>)</span> <span>=&gt;</span> <span>void</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>// 원래 MyElement 그대로 작동!</span>\n<span>type </span><span>MyElement</span> = <span>Handlers</span> &amp; <span>{</span>\n  <span>addEventListener</span><span>:</span> <span>(</span><span>eventName</span><span>:</span> EventNames<span>,</span> <span>handler</span><span>:</span> <span>(</span><span>event</span><span>:</span> Event<span>)</span> <span>=&gt;</span> <span>void</span><span>)</span> <span>=&gt;</span> <span>void</span><span>;</span>\n<span>}</span><span>;</span></code></pre></div></div></div></div><p id=\"090a3c25-3b77-4836-a95e-a0d5333bf5d4\"><span><span><span>위 코드를 한번 자세히 살펴봅시다.</span></span></span></p><ol><li id=\"0d30a516-39e1-4b55-933c-adace1fdc639\"><span><span><code>CapitalizedEventNames</code><span> 타입을 정의할 때, TypeScript 4.1에서 추가된 </span><code>Capitalize&lt;T&gt;</code><span> 타입을 이용하여 </span><code>EventNames</code><span>의 첫 글자를 대문자로 만들었습니다.</span></span></span></li><li id=\"76c5254e-c31e-460c-b20f-9c4741abaab0\"><span><span><code>HandlerNames</code><span> 타입을 만들 때, Template Literal Type으로 </span><code>onClick</code><span> 과 같이 </span><code>on</code><span> 접두사를 붙였습니다.</span></span></span></li><li id=\"2d24d50f-5ff0-4c11-ac83-a14aa3701f7d\"><span><span><code>Handlers</code><span> 타입에서는 기존의 </span><code>onClick</code><span>, </span><code>onMouseDown</code><span> 과 같은 이벤트 핸들러를 메서드로 가지도록 했고,</span></span></span></li><li id=\"2f5fbd81-920e-4da0-8031-48760638e41c\"><span><span><span>마지막으로 </span><code>MyElement</code><span> 에서는 </span><code>addEventListener</code><span> 메서드를 가지는 객체와 연결하여 원래와 동일한 동작을 하는 타입을 만들 수 있었습니다.</span></span></span></li></ol><p id=\"29ef0178-05d0-41e8-9ced-f21bbe8f0808\"><span><span><span>이제 </span><code>EventNames</code><span> 만 수정하면 </span><code>MyElement</code><span> 에서 이벤트를 구독하는 양쪽 모두 대응이 되므로, 코드가 깔끔해지고 실수의 여지가 적어졌습니다. ✨</span></span></span></p><h2 id=\"60c5e82a-72de-4bc9-962d-98cbaebb087a\"><span><span><span>Conditional Type과 더 강력한 추론하기</span></span></span></h2><p id=\"fdfb9d91-2b48-4f07-a870-0452456567eb\"><span><span><span>Template Literal Type은 Conditional Type과 함께 더욱 강력하게 사용할 수 있습니다.</span></span></span></p><h3 id=\"9bf34079-a93e-49b5-8cd3-abe57248e0de\"><span><span><span>Conditional Type 되짚어보기</span></span></span></h3><p id=\"0dc531ec-c516-4381-a8bc-3cd61dd228d3\"><span><span><span>Conditional Type은 JavaScript의 삼항 연산자와 비슷하게 분기를 수행하면서, 타입을 추론하는 방법인데요. 고급 TypeScript 사용에서 강력한 타입 연산을 하기 위해서 빠지지 않습니다.</span></span></span></p><p id=\"88a711c3-c2cc-408f-9826-1752ce56ba0b\"><span><span><span>Template Literal Type을 더 잘 다루기 위해 반드시 필요한 개념이므로, 간단한 예시로 Conditional Type을 사용하는 방법에 대해 살펴보겠습니다.</span></span></span></p><p id=\"9109fdf0-28f5-4f85-92e8-85dac6137e6a\"><span><span><span>예시 1: 제네릭 타입 인자 꺼내오기</span></span></span></p><p id=\"39a4ddc8-7111-418b-9f86-33fce294995b\"><span><span><span>Conditional Type을 가장 자주 사용하는 경우로,  </span><code>Promise&lt;number&gt;</code><span>와 같은 타입에서 </span><code>number</code><span> 를 꺼내오고 싶은 상황을 생각해봅시다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>PromiseType</span>&lt;<span>T</span>&gt; = <span>T </span><span>extends</span><span> </span><span>Promise</span>&lt;<span>infer </span><span>U</span>&gt; ? <span>U</span> : <span>never</span><span>;</span>\n\n<span>// type A = number</span>\n<span>type </span><span>A</span> = <span>PromiseType</span>&lt;<span>Promise</span>&lt;<span>number</span>&gt;&gt;<span>;</span>\n\n<span>// type B = string | boolean</span>\n<span>type </span><span>B</span> = <span>PromiseType</span>&lt;<span>Promise</span>&lt;<span>string</span> | <span>boolean</span>&gt;&gt;<span>;</span>\n\n<span>// type C = never</span>\n<span>type </span><span>C</span> = <span>PromiseType</span>&lt;<span>number</span>&gt;<span>;</span></code></pre></div></div></div></div><p id=\"9780f209-7254-4b72-a3aa-1baa6b35099d\"><span><span><a href=\"https://www.typescriptlang.org/play?ts=4.1.5#code/C4TwDgpgBACgTgewLYEsDOEAq4IB5MB8UAvFJlBAB7AQB2AJmrIqhrirQGYRxQCqRAPz8oALii0IANx4BuAFDyA9EqihIUAIIkJAVyQAjHvPXRtpeMnRYcuS6zy19RuAQKKVanFABCOtMBwHADmUAA+UAYICAA2EACGtCbefhYs1tiQdulsAUG0oRFRsQm0bh6qplAAwjqSMnDJGrVpVhiZjs48BEA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a></span></span></p><p id=\"a5bcfc44-d947-401b-b98f-848cc5dcbe8f\"><span><span><span>위 코드를 살펴보면, </span><code>PromiseType&lt;T&gt;</code><span> 타입에 </span><code>Promise&lt;number&gt;</code><span> 타입을 인자로 넘기면 </span><code>number</code><span> 타입을 얻고 있습니다.</span></span></span></p><p id=\"f0898f5d-5abc-437e-a16f-49ef71dd36bc\"><span><span><span>Conditional Type이 동작하는 방식을 간단히 알아봅시다.</span></span></span></p><p id=\"9ec3f6f3-8f24-4e99-b141-a1ad1b8bfbd9\"><span><span><span>삼항 연산자처럼 생긴 부분 가운데 </span><code>X extends Y</code><span> 와 같이 생긴 조건 부분은 </span><code>X</code><span> 타입의 변수가 </span><code>Y</code><span> 타입에 할당될 수 있는지에 따라 참값이 평가됩니다.</span></span></span></p><p id=\"889471cb-a7dc-4a42-a69e-1cbb7f43860c\"><span><span><span>예시:</span></span></span></p><ul><li id=\"9296d88a-5037-470e-acca-30fbe6b44b06\"><span><span><code>true extends boolean</code><span>: </span><code>true</code><span> 는 </span><code>boolean</code><span> 에 할당될 수 있으므로 참으로 평가됩니다.</span></span></span></li><li id=\"ae6c10ac-c1e0-48a7-94ac-aaff6e0b1f79\"><span><span><code>'toss' extends string</code><span>: </span><code>'toss'</code><span> 는 </span><code>string</code><span> 에 할당될 수 있으므로 참으로 평가됩니다.</span></span></span></li><li id=\"2f82ecf8-66e0-40ae-b951-8a8069572752\"><span><span><code>Array&lt;{ foo: string }&gt; extends Array&lt;unknown&gt;</code><span>: 마찬가지로 참으로 평가됩니다.</span></span></span></li><li id=\"690a89d7-739d-43d0-82c6-01038419d09c\"><span><span><code>string extends number</code><span>: 문자열은 숫자 타입에 할당될 수 없으므로 거짓입니다.</span></span></span></li><li id=\"6662d7ff-fb50-4327-936b-17f6c173a12f\"><span><span><code>boolean extends true</code><span>: </span><code>boolean</code><span> 타입 가운데 </span><code>false</code><span> 는 </span><code>true</code><span> 에 할당될 수 없으므로 거짓입니다.</span></span></span></li></ul><p id=\"caa2c9c3-ffe8-4404-a0fa-88e900c08cea\"><span><span><span>조건식이 참으로 평가될 때에는 </span><code>infer</code><span> 키워드를 사용할 수 있습니다. 예를 들어, </span><code>Promise&lt;number&gt; extends Promise&lt;infer U&gt;</code><span> 와 같은 타입을 작성하면, </span><code>U</code><span> 타입은 </span><code>number</code><span> 타입으로 추론됩니다. 이후 참인 경우에 대응되는 식에서 추론된 </span><code>U</code><span> 타입을 사용할 수 있습니다.</span></span></span></p><p id=\"c5f4c473-217e-4b80-983a-cb2043b7b9fc\"><span><span><span>예를 들어, </span><code>Promise&lt;number&gt; extends Promise&lt;infer U&gt; ? U : never</code><span> 에서는 조건식이 참이고 </span><code>U</code><span> 타입이 </span><code>number</code><span>로 추론되므로, 이를 평가한 타입의 결과는 </span><code>number</code><span> 가 됩니다.</span></span></span></p><p id=\"dab2a319-1481-42b4-bc98-613c21cf0b01\"><span><span><span>반대로 </span><code>number extends Promise&lt;infer U&gt; ? U : never</code><span> 에서는 조건식이 거짓이므로 이를 평가한 결과는 </span><code>never</code><span>가 됩니다.</span></span></span></p><p id=\"1a2e8450-326a-4c53-8b7c-d4e99628bc5c\"><span><span><span>예시 2: Tuple 다루기</span></span></span></p><p id=\"4949c786-67c4-4d87-8b5f-ef3300a61cef\"><span><span><code>[string, number, boolean]</code><span> 과 같은 TypeScript의 </span><a href=\"https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types\" rel=\"noreferrer noopener\" target=\"_blank\">Tuple Type</a><span>에서 그 꼬리 부분인 </span><code>[number, boolean]</code><span> 과 같은 부분만 가져오고 싶은 상황을 생각해봅시다.</span></span></span></p><p id=\"338d90af-1316-4351-b289-b82ff69818af\"><span><span><span>Conditional Type과 </span><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#variadic-tuple-types\" rel=\"noreferrer noopener\" target=\"_blank\">Variadic Tuple Type</a><span>을 활용함으로써 이를 간단히 구현할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>TailOf</span>&lt;<span>T</span>&gt; = <span>T </span><span>extends</span> <span>[</span><span>unknown</span><span>,</span> <span>...</span><span>infer </span>U<span>]</span> ? <span>U</span> : <span>[</span><span>]</span><span>;</span>\n\n<span>// type A = [boolean, number];</span>\n<span>type </span><span>A</span> = <span>TailOf</span>&lt;<span>[</span><span>string</span><span>,</span> <span>boolean</span><span>,</span> <span>number</span><span>]</span>&gt;<span>;</span></code></pre></div></div></div></div><p id=\"74bf89a3-92af-42b9-b38a-5a788130dd1f\"><span><span><a href=\"https://www.typescriptlang.org/play?ts=4.1.5#code/C4TwDgpgBAKghgSwDYHkBmAeGA+KBeWKCAD2AgDsATAZygG0BXcga3IHsB3cgGigDoBCcmggAnKAFUAulAD8kqAC56UgNwAodQHotUUJCgBBfPQBGbNkghweUcgwC2psWvX7oxgvGToMdasCiQgDmvOaW1rb2Ti7YQA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a></span></span></p><p id=\"a4b5f15d-d555-4636-ac52-5d6cbade6170\"><span><span><span>첫 요소를 제외하고 </span><code>...infer U</code><span> 구문을 이용하여 뒤의 요소들을 모두 선택한 것을 확인할 수 있습니다.</span></span></span></p><p id=\"e88d92a8-6348-4917-8819-bea89978fb74\"><span><span><span>이 외에 간단한 형태로 특정한 튜플이 비어 있는지 검사하기 위해서, 아래와 같은 </span><code>IsEmpty&lt;T&gt;</code><span> 타입을 정의할 수도 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>IsEmpty</span>&lt;<span>T </span><span>extends</span><span> </span><span>any</span><span>[</span><span>]</span>&gt; = <span>T </span><span>extends</span> <span>[</span><span>]</span> ? <span>true</span> : <span>false</span><span>;</span>\n\n<span>// type B = true</span>\n<span>type </span><span>B</span> = <span>IsEmpty</span>&lt;<span>[</span><span>]</span>&gt;<span>;</span>\n\n<span>// type C = false</span>\n<span>type </span><span>C</span> = <span>IsEmpty</span>&lt;<span>[</span><span>number</span><span>,</span> <span>string</span><span>]</span>&gt;<span>;</span></code></pre></div></div></div></div><p id=\"50104fe9-024b-49bc-bf22-6f844a4e14a9\"><span><span><a href=\"https://www.typescriptlang.org/play?ts=4.1.5#code/C4TwDgpgBAkgzgUQLZlAHgCpQgD2BAOwBM4oBDAkAbQF0A+KAXii132NNqgH4pgAnAK7QAXFABmZADZwIAbgBQCgPTK+4aACEmfIRAWhIUbc3jJUINLTpLV6owGEdkmfsPQnpxCnRUCgpAAjCH4AGig4AQBLAgBzeiA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a></span></span></p><p id=\"1e3c2bf1-85bf-4989-8daa-2f57e66cf4c8\"><span><span><span>Conditional Type에 대해 더 궁금하신 분은 </span><a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript 공식 문서</a><span>를 참고하시기 바랍니다.</span></span></span></p><p id=\"9c587180-271d-4a25-a8b1-d78e8d73bc9f\"><span><span><span>이제 Conditional Type과 Template Literal Type을 함께 사용했을 때 어떤 결과를 얻을 수 있는지 살펴봅시다.</span></span></span></p><h3 id=\"775bd3ba-4132-4655-ab7a-22aa1961a03c\"><span><span><span>초급 예시 1: 간단한 추론</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>InOrOut</span>&lt;<span>T</span>&gt; = <span>T </span><span>extends</span> <span>`fade</span><span>${</span><span>infer </span><span>R}`</span> ? <span>R</span> : <span>never</span><span>;</span>\n\n<span>// type I = \"In\"</span>\n<span>type </span><span>I</span> = <span>InOrOut</span>&lt;<span>\"fadeIn\"</span>&gt;<span>;</span>\n<span>// type O = \"Out\"</span>\n<span>type </span><span>O</span> = <span>InOrOut</span>&lt;<span>\"fadeOut\"</span>&gt;<span>;</span></code></pre></div></div></div></div><p id=\"52333509-aaba-4656-bac6-5b951354873f\"><span><span><span>가장 간단한 예시로, </span><code>'fadeIn' | 'fadeOut'</code><span> 과 같은 타입에서 앞의 </span><code>fade</code><span> 접두사를 버리고 </span><code>'In' | 'Out'</code><span> 만 가져오고 싶은 상황을 생각해봅시다.</span></span></span></p><p id=\"afc5c4a6-1149-4398-a4a3-f3011f32c3f7\"><span><span><code>Promise&lt;number&gt;</code><span> 에서 </span><code>number</code><span> 를 가져오는 것과 유사하게, Conditional Type을 이용하여 접두사를 제외할 수 있습니다.</span></span></span></p><h3 id=\"17c80a17-98dd-484b-898e-c0b6aade3a2b\"><span><span><span>중급 예시 1: 문자열에서 공백 없애기</span></span></span></h3><p id=\"44f2fd13-25a6-4dca-83ca-b42244851943\"><span><span><span>위의 예시를 응용하면 문자열의 공백을 없애는 타입을 정의할 수 있습니다. 예를 들어, 아래와 같이 오른쪽의 공백을 모두 제거한 타입을 만들 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// type T = \"Toss\"</span>\n<span>type </span><span>T</span> = <span>TrimRight</span>&lt;<span>\"Toss      \"</span>&gt;<span>;</span></code></pre></div></div></div></div><p id=\"9fc44f6e-b8ab-4d1d-8bb6-7146c73a9985\"><span><span><code>TrimRight&lt;T&gt;</code><span> 타입은 재귀적 타입 선언을 활용합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>TrimRight</span>&lt;<span>T </span><span>extends</span><span> </span><span>string</span>&gt; =\n  <span>T </span><span>extends</span> <span>`</span><span>${</span><span>infer </span><span>R} `</span>\n    ? <span>TrimRight</span>&lt;<span>R</span>&gt;\n    : <span>T</span><span>;</span></code></pre></div></div></div></div><p id=\"287cccff-4d47-4163-b1f7-13b3abfa4f49\"><span><span><a href=\"https://www.typescriptlang.org/play?ts=4.1.5#code/C4TwDgpgBAKgTgSwLYCUEHMAWwA8MoQAewEAdgCYDOUlwip6AfFALxQBQUsBxZVUAAwAkAbwSkAZhDhQUAX0EcuXAPyxEqDNhwpmnZQC5YAbnbsA9OaihI3NgCIYAe0qV77G9Hxt4yNFlxHF2plLntGIA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a></span></span></p><p id=\"69f69078-6b4c-4af2-b93a-c987615e1590\"><span><span><span>위 코드를 살펴보시면, </span><code>infer R</code><span> 문 뒤에 하나의 공백이 있는 것을 확인하실 수 있습니다.</span></span></span></p><p id=\"f7c1ee14-094b-45d4-a599-d462a165b9b3\"><span><span><span>즉, </span><code>T</code><span> 타입의 오른쪽에 공백이 하나 있다면, 공백을 하나 빠뜨린 것을 </span><code>R</code><span> 타입으로 추론하고, 다시 </span><code>TrimRight&lt;R&gt;</code><span> 을 호출합니다.</span></span></span></p><p id=\"34e2fab4-9101-4964-b9ad-9d8c13e72e5e\"><span><span><span>만약 공백이 더 이상 존재하지 않는다면, 원래 주어진 타입 그대로를 반환합니다.</span></span></span></p><p id=\"65d1cbcc-dffc-41e2-aa29-201de1f282cf\"><span><span><span>TypeScript에는 </span><code>if</code><span> 문이 존재하지 않지만, 만약 존재한다고 가정했을 때 아래와 같이 작성해볼 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>TrimRight</span>&lt;<span>T </span><span>extends</span><span> </span><span>string</span>&gt; =\n  <span>if</span> <span>(</span><span>T </span><span>extends</span> <span>`</span><span>${</span><span>infer </span><span>R} `</span><span>)</span> <span>{</span>\n    <span>return</span> <span>TrimRight</span>&lt;<span>R</span>&gt;<span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>return</span> <span>T</span><span>;</span>\n  <span>}</span></code></pre></div></div></div></div><p id=\"36c7ac98-98f8-41d3-b939-931e0b137848\"><span><span><span>보다 재귀적인 구조를 잘 확인할 수 있습니다.</span></span></span></p><h3 id=\"7a683076-4bb7-4e2d-8394-fee6c9add871\"><span><span><span>중급 예시 2: 점으로 연결된 문자열 Split하기</span></span></span></h3><p id=\"4842db90-461d-413c-871e-698cab4a5eb9\"><span><span><span>재귀적 타입 정의를 활용하면 </span><code>'foo.bar.baz'</code><span> 와 같은 타입을 </span><code>['foo', 'bar', 'baz']</code><span> 로 나누는 타입을 정의할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>Split</span>&lt;<span>S </span><span>extends</span><span> </span><span>string</span>&gt; =\n  <span>S </span><span>extends</span> <span>`</span><span>${</span><span>infer </span><span>T}.</span><span>${</span><span>infer </span><span>U}`</span>\n    ? <span>[</span><span>T</span><span>,</span> <span>...</span><span>Split</span>&lt;<span>U</span>&gt;<span>]</span>\n    : <span>[</span><span>S</span><span>]</span><span>;</span>\n\n<span>// type S = [\"foo\", \"bar\", \"baz\"];</span>\n<span>type </span><span>S</span> = <span>Split</span>&lt;<span>\"foo.bar.baz\"</span>&gt;<span>;</span></code></pre></div></div></div></div><p id=\"5173eb3d-478f-4bf7-bbf3-3cb48227fd19\"><span><span><a href=\"https://www.typescriptlang.org/play?ts=4.1.5&amp;ssl=1&amp;ssc=1&amp;pln=7&amp;pc=30#code/C4TwDgpgBAymA2BLYAeGUIA9gQHYBMBnKQ4AJ0VwHMA+KAXigCgpYNs8ioADAEgG9KAMwhkoAFQC+AOgHDRUAKqTuzVqwD8UANriANFGlG4SVIpoBdNeoBcOmBYDcTJgHpXUUJDaNtAIiEAe0C-Az8AIwBDMlCoCMiALz8nJi9odEYTZBQA4OkosnzEvxogA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a></span></span></p><p id=\"f93a4fa0-e65d-425e-abcf-6c3e88510755\"><span><span><span>주어진 </span><code>S</code><span> 타입에서 첫번째 점(</span><code>.</code><span>) 을 찾고, 그 앞 부분을 </span><code>T</code><span>, 뒷 부분을 </span><code>U</code><span> 로 추론합니다. 이후 이를 </span><code>[T, ...Split&lt;U&gt;]</code><span>와 같이 재귀적으로 하나씩 값을 이어 나가면서 원하는 결과 타입을 만들어 나갑니다.</span></span></span></p><p id=\"da41e03f-c24b-4e19-8793-88b7ff02d9e3\"><span><span><span>이 경우에도 </span><code>if</code><span> 문이 있다는 가정 하에 pseudo-code로 정리해볼 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>Split</span>&lt;<span>S </span><span>extends</span><span> </span><span>string</span>&gt; =\n  <span>if</span> <span>(</span><span>S </span><span>extends</span> <span>`</span><span>${</span><span>infer </span><span>T}.</span><span>${</span><span>infer </span><span>U}`</span><span>)</span> <span>{</span>\n    <span>return</span> <span>[</span><span>T</span><span>,</span> <span>...</span><span>Split</span>&lt;<span>infer </span>U&gt;<span>]</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>return</span> <span>[</span><span>S</span><span>]</span><span>;</span>\n  <span>}</span></code></pre></div></div></div></div><h3 id=\"e18b5233-bfe0-428c-acc6-84a9d85f7845\"><span><span><span>고급 예시: lodash.set() 함수 타입 추론하기</span></span></span></h3><p id=\"84ab369f-736a-47ad-8435-a18e237521e3\"><span><span><code>lodash.set()</code><span>는 아래와 같이 문자열로 된 접근자를 이용하여 객체의 깊은 프로퍼티까지 수정할 수 있는 함수입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>someObject</span> = <span>{</span>\n  <span>toss</span><span>:</span> <span>{</span>\n    <span>core</span><span>:</span> <span>{</span>\n      <span>client</span><span>:</span> <span>{</span>\n        <span>platform</span><span>:</span> <span>\"foo\"</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n\n<span>// OK!</span>\n<span>lodashSet</span><span>(</span><span>someObject</span><span>,</span> <span>\"toss.core.client\"</span><span>,</span> <span>{</span> <span>platform</span><span>:</span> <span>'bar'</span> <span>}</span><span>)</span><span>;</span>\n\n<span>// Error: 'bar' is not assignable to type '{ platform: string }';</span>\n<span>lodashSet</span><span>(</span><span>someObject</span><span>,</span> <span>'toss.core.client'</span><span>,</span> <span>'bar'</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"8a0af2ef-7620-4a34-8c63-7df22ba6f869\"><span><span><span>Template Literal Type이 있기 전, 이런 함수는 타입 안전하게 사용할 수 없어 세 번째 인자를 </span><code>any</code><span> 로 규정해야 했습니다. 그러나 위에서 살펴본 타입 정의를 조합하면 </span><code>lodash.set()</code><span> 를 더욱 안전하게 타이핑할 수 있습니다. 💯</span></span></span></p><p id=\"c60fc72b-815e-413e-b04e-3435e5e28abe\"><span><span><code>lodash.set()</code><span> 함수를 정확하게 타이핑하기 위해서는 아래의 </span><code>ValueOf&lt;T, P&gt;</code><span> 타입이 필요합니다. </span><code>ValueOf&lt;T, P&gt;</code><span> 타입은 객체 </span><code>T</code><span> 와 접근 경로 </span><code>P</code><span>가 주어졌을 때, </span><code>T</code><span> 를 </span><code>P</code><span> 경로로 순서대로 접근했을 때 결과로 나오는 타입을 나타냅니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>interface </span><span>Foo </span><span>{</span>\n  foo<span>:</span> <span>{</span>\n    bar<span>:</span> <span>{</span>\n      baz<span>:</span> <span>string</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// type A = { bar: { baz: string } };</span>\n<span>type </span><span>A</span> = <span>ValueOf</span>&lt;<span>Foo</span><span>,</span> <span>[</span><span>'foo'</span><span>]</span>&gt;<span>;</span>\n\n<span>// type B = { baz: string };</span>\n<span>type </span><span>B</span> = <span>ValueOf</span>&lt;<span>Foo</span><span>,</span> <span>[</span><span>'foo'</span><span>,</span> <span>'bar'</span><span>]</span>&gt;<span>;</span>\n\n<span>// type C = string;</span>\n<span>type </span><span>C</span> = <span>ValueOf</span>&lt;<span>Foo</span><span>,</span> <span>[</span><span>'foo'</span><span>,</span> <span>'bar'</span><span>,</span> <span>'baz'</span><span>]</span>&gt;<span>;</span></code></pre></div></div></div></div><p id=\"e39414f7-a112-441a-80b2-ff94d0e43e0b\"><span><span><span>만약에 위와 같은 </span><code>ValueOf&lt;T, P&gt;</code><span> 이 있다면, 위에서 만들었던 </span><code>Split&lt;S&gt;</code><span> 과 조합하여 쉽게 lodash.set() 함수에 타입을 부여할 수 있을 것입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>function</span> <span>lodashSet</span>&lt;Type<span>,</span> Path&gt;<span>(</span>\n  <span>obj</span><span>:</span> Type<span>,</span>\n  <span>path</span><span>:</span> Path<span>,</span>\n  <span>value</span><span>:</span> ValueOf<span>&lt;</span><span>Type</span><span>,</span> <span>Split</span>&lt;<span>Path</span>&gt;&gt;\n<span>)</span><span>:</span> <span>void</span><span>;</span></code></pre></div></div></div></div><p id=\"755c0675-64ab-460e-ad26-62f4f4a9482e\"><span><span><span>이제 </span><code>ValueOf&lt;T, P&gt;</code><span> 타입을 만들어봅시다. </span><code>if</code><span> 문과 내부 타입 선언이 있는 pseudo-code로 나타낸다면, 아래와 같이 코드를 작성할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>ValueOf</span>&lt;<span>Type</span><span>,</span> <span>Paths</span>&gt; =\n  <span>type </span><span>Head</span> = <span>Paths</span><span>[</span><span>0</span><span>]</span><span>;</span>\n  <span>type </span><span>Tail</span> = <span>TailOf</span>&lt;<span>Paths</span>&gt;<span>;</span>\n\n  <span>if</span> <span>(</span><span>/* Tail의 길이가 0이다 */</span><span>)</span> <span>{</span>\n    <span>return </span><span>Type</span><span>[</span><span>Head</span><span>]</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>return</span> <span>ValueOf</span>&lt;<span>Type</span><span>[</span><span>Head</span><span>]</span><span>,</span> <span>Tail</span>&gt;<span>;</span>\n  <span>}</span></code></pre></div></div></div></div><p id=\"cc496f9e-64be-481a-ae89-547e05188d48\"><span><span><code>ValueOf&lt;T, P&gt;</code><span> 타입이 그렇게 동작한다면, 위의 </span><code>Foo</code><span> 예시에서는 아래와 같이 차례대로 값이 계산될 것입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>ValueOf</span>&lt;<span>Foo</span><span>,</span> <span>[</span><span>'foo'</span><span>,</span> <span>'bar'</span><span>]</span>&gt;\n== <span>ValueOf</span>&lt;<span>Foo</span><span>[</span><span>'foo'</span><span>]</span><span>,</span> <span>[</span><span>'bar'</span><span>]</span>&gt;\n== <span>ValueOf</span>&lt;<span>Foo</span><span>[</span><span>'foo'</span><span>]</span><span>[</span><span>'bar'</span><span>]</span><span>,</span> <span>[</span><span>]</span>&gt;\n== <span>Foo</span><span>[</span><span>'foo'</span><span>]</span><span>[</span><span>'bar'</span><span>]</span></code></pre></div></div></div></div><p id=\"c0db1215-29e7-4b34-a7a6-4341afcbc0e7\"><span><span><span>작성했던 의사 코드를 유효한 TypeScript 코드로 나타내면 다음과 같습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>ValueOf</span>&lt;<span>Type</span><span>,</span> <span>Paths </span><span>extends</span><span> </span><span>any</span><span>[</span><span>]</span>&gt; =\n  <span>/*\n   * IsEmpty&lt;TailOf&lt;Paths&gt;&gt;가 참이면\n   * == TailOf&lt;Paths&gt;가 빈 Tuple이면\n   */</span>\n  <span>IsEmpty</span>&lt;<span>TailOf</span>&lt;<span>Paths</span>&gt;&gt; <span>extends</span> <span>true</span>\n    ? <span>Type</span><span>[</span><span>HeadOf</span>&lt;<span>Paths</span>&gt;<span>]</span>\n    : <span>ValueOf</span>&lt;<span>Type</span><span>[</span><span>HeadOf</span>&lt;<span>Paths</span>&gt;<span>]</span><span>,</span> <span>TailOf</span>&lt;<span>Paths</span>&gt;&gt;<span>;</span></code></pre></div></div></div></div><p id=\"02b86fca-910a-4dab-9c9b-cf1a42f0e126\"><span><span><span>위 내용을 모두 조합하면 lodash.set()을 안전하게 다룰 수 있는데요. 실제로 동작하는 방식을 </span><a href=\"https://www.typescriptlang.org/play?ts=4.1.5#code/C4TwDgpgBAEhCGATA8gMwDwBUB8UC8UmUEAHsBAHaIDOU8FIA2gLpQD8hjADKwFxQUIANwgAnANwAoUJELwAlgBs0WXASKlyVWo3ogANFAB0J+RVRioAVVYcrUfiymSA9C6gzoAQXxRGAIwB7QMUECkMKAFcAW38xZilPKB91BWUMRmpgUTMAc0MgkLCImLjRZmxJaXBoAElqAFFosFAsYjJKGjoGFjVCdq0ulnYPUUjoflR4RWoIZySAZTBFeWB0BYHO2iycily+ySgoDc0tqAADABIAbzMLUUIAXyMbu8srR-OoQ6ORxkxDCYjEsVmsrNhWD8jo4FgkqkkAGrTcYqTA1QwABXgwAAFrRTtpukwKr4fvUmi0QFg0iosbjqNhcASutlxlCRmjIIw4Ehadi8RD2fwkYoURhORBuQgUBg6QLmIZMDTZfyGdhnGZyKIpgBjaAAMWCUGuP1QwX4Jt+UH88FEFvZRxtAC9+Ds8lIrY8fl6vZJEBAdYpbdBUJEKDrgPJAhQoIpAoh4NQcQsIGsJZj+ZtCW69tgABQ-QL+ABW-HT3yOYH5-Dlhh+QmREGFjdR6OOy1W6DljMkAEp+EJAvJEM4ddGslBqIFohBkCWA8BfJaPIFqNR7Vax6Im8aHVBA-JKMAN1bfstsWbRNF+AAiM2BG97r2e72SR7ONxQZAAaQAhJI4wTJMU2APMpxnOdiwXQwb2AVdqCMLcIEQlYjxvQxrigc9gEva8oAAchtUR8KgR5ew-dwGlEURAjtAiiJI+RaAoQJF0Tah5FyCh4H8UIVw8GoCMw7DcNdbI8lI-CpEAxNk1TMDp1necI0MfC4LXRDaOQg8j3w1SGPIqogA\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Playground</a><span>에서 확인해보실 수 있습니다. 😉</span></span></span></p><h2 id=\"c1dc13c3-e036-4670-90cc-d7482175499c\"><span><span><span>Template Literal Type의 응용</span></span></span></h2><p id=\"fc5191f1-02bc-479d-9ae2-c6af1508b3b6\"><span><span><span>위에서 살펴본 바와 같이, Template Literal Type을 Conditional Type과 사용하면 더욱 많은 코드를 안전하게 사용할 수 있습니다. </span><a href=\"https://github.com/ghoullier/awesome-template-literal-types\" rel=\"noreferrer noopener\" target=\"_blank\">awesome-template-literal-types</a><span> 레포지토리에는 상상력을 자극하는 Template Literal Type의 사용 예시들이 모여 있습니다.</span></span></span></p><p id=\"dc286e7f-1f85-43c2-932b-8e8f3dab3157\"><span><span><span>대표적으로 화제가 되었던 예시들에 대한 링크를 남기고 글을 맺습니다.</span></span></span></p><p id=\"4db62160-430a-4180-bc78-6bd4d4821a1d\"><span><span><span>1. </span><a href=\"https://twitter.com/buildsghost/status/1301976526603206657\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript로 JSON 파서 만들기</a></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// type Json = { key1: ['value1', null]; key2: 'value2' };</span>\n<span>type </span><span>Json</span> = <span>ParseJson</span>&lt;<span>'{ \"key1\": [\"value1\", null], \"key2\": \"value2\" }'</span>&gt;<span>;</span></code></pre></div></div></div></div><p id=\"b199b29b-2f54-4571-9217-b21f76889504\"><span><span><span>코드와 같이 JSON 문자열을 바로 TypeScript 타입으로 옮길 수 있다는 Proof-of-concept로 화제가 되었습니다.</span></span></span></p><p id=\"35dd363b-92d7-4396-8d34-4b211080dd82\"><span><span><span>2. </span><a href=\"https://twitter.com/MikeRyanDev/status/1308472279010025477\" rel=\"noreferrer noopener\" target=\"_blank\">document.querySelector를 타입 안전하게 사용하기</a></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>a</span> = <span>querySelector</span><span>(</span><span>'div.banner &gt; a.call-to-action'</span><span>)</span><span>;</span> <span>//-&gt; HTMLAnchorElement</span>\n<span>const</span> <span>b</span> = <span>querySelector</span><span>(</span><span>'input, div'</span><span>)</span><span>;</span> <span>//-&gt; HTMLInputElement | HTMLDivElement</span>\n<span>const</span> <span>c</span> = <span>querySelector</span><span>(</span><span>'circle[cx=\"150\"]'</span><span>)</span> <span>//-&gt; SVGCircleElement</span>\n<span>const</span> <span>d</span> = <span>querySelector</span><span>(</span><span>'button#buy-now'</span><span>)</span><span>;</span> <span>//-&gt; HTMLButtonElement</span>\n<span>const</span> <span>e</span> = <span>querySelector</span><span>(</span><span>'section p:first-of-type'</span><span>)</span><span>;</span> <span>//-&gt; HTMLParagraphElement</span></code></pre></div></div></div></div><p id=\"c297dda4-1327-4744-8965-ca344abb71fb\"><span><span><span>a 태그를 선택했을 때 결괏값이 </span><code>HTMLAnchorElement</code><span>가 되는 것을 확인하실 수 있습니다.</span></span></span></p><p id=\"267f3ba2-88dd-47d1-869a-ec71bccfaedd\"><span><span><span>3. </span><a href=\"https://twitter.com/danvdk/status/1301707026507198464\" rel=\"noreferrer noopener\" target=\"_blank\">Express의 Route Parameter로부터 타입 추론하기</a></span></span></p><figure id=\"81ba1393-2d01-43a9-b3c6-6f289ad02a8c\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/7598a5fa-985e-4019-9397-dda135b3fb25\"/></figure><p id=\"f749f0b1-88e8-4c44-b87e-7404300564b2\"><span><span><span>Express에서 사용하는 경로 문자열에서 Route Parameter의 타입을 추론할 수 있습니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "6": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"개발자의 애질리티\" srcset=\"https://wp.toss.tech/wp-content/uploads/2021/10/techblog-06-agility.png\"/><h1>개발자의 애질리티</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/byeonghun-kang.png\"/><div><div><h3>강병훈</h3><h3>ㆍ<!-- -->Head of Technology</h3></div><div>2021. 10. 14</div></div></section></header><div><p id=\"96e0e850-d726-4fab-ac75-b772d45af149\"><span><span><span>이 글은 토스페이먼츠에 입사하신, 혹은 입사를 고려 중인 개발자분들을 위해 작성된 글입니다.</span></span></span></p><h2 id=\"c7ed9684-1be9-4141-b726-c77882f67311\"><span><span><span>애자일하게 일하기</span></span></span></h2><p id=\"6287105c-7a51-440b-a3e4-609aeb95a323\"><span><span><span>애자일하게 일한다는 것은 어떠한 의미일까요? 한 시간을 일하면 한 시간 만큼의 가치를 만들어 내는 방식이 아닐까 합니다. 예를 들어, 동작하는 함수를 구현하거나 난해한 개념을 이해하는 식으로요. </span></span></span></p><h2 id=\"779bd0a5-31fa-4ba7-a83a-c02d5f8a04b8\"><span><span><span>Big up-front 설계</span></span></span></h2><p id=\"e1f04a48-11a5-4b08-bd70-62d8f79119d5\"><span><span><span>과거에는 프로젝트 진행 초기부터 분석과 설계에 많은 시간을 투자했습니다. 전체 프로젝트의 ⅓ 이상이 분석과 설계일 정도로요. 문제는 프로젝트 기간의 ½ 시점에 요구사항이 크게 변한다면 결과물 하나 없이 다시 새로 시작해야 한다는 점이었습니다. 세상의 변화속도가 엄청나게 빨라진 지금, 초기 설계 비용이 큰 big up-front 설계가 항상 잘 들어맞지 않는다는 사실을 이제는 대부분의 사람이 알게 되었습니다.</span></span></span></p><h2 id=\"52e9d111-8216-4529-8c28-748ccef30914\"><span><span><span>애자일 개발 방법론</span></span></span></h2><p id=\"729c1433-2898-4006-999e-e08fec72683a\"><span><span><span>애자일 개발 방법론에서는 애초에 크게 설계하지 않습니다. 간단한 사용 시나리오를 작성하고 그것의 구현을 목표로 하는 짧은 주기를 가집니다. 거대한 아키텍처를 설계하지 않고 이번 주기(이터레이션(Iteration) 혹은 스프린트(Sprint))에서 달성할 수 있는 만큼의 설계를 추구합니다. (앞으로는 주기가 아닌 스프린트라고 표현하겠습니다.)</span></span></span></p><p id=\"030de5e6-644e-462c-ae16-a443047c439b\"><span><span><span>예를 들어 카드 승인이 100가지의 하위 기능으로 구분할 수 있다면, 이번 스프린트의 목표를 그중에 3가지로 결정할 수 있습니다. 나머지 기능을 함께 확인하고 싶으면 어떻게 하냐구요? 애초에 3가지 기능 외에는 개발하지 않는다는 목표로 일을 진행하기 때문에 스프린트 목표 달성 여부를 확인할 때에도 오직 이 3가지 기능만 확인합니다. 이번 스프린트를 성공적으로 달성했다면 팀은 최소한 3개의 작은 기능을 획득할 수 있게 됩니다. </span></span></span></p><p id=\"a4af4299-7ca6-4b4c-b949-6e85269bc943\"><span><span><span>개발자들은 요구사항 전체가 아닌 이번 스프린트에 필요한 요구사항에 더 집중할 수 있게 되고, 만약 스프린트가 성공적으로 진행되었다면 3개의 기능을 제공하는 소프트웨어를 가지게 됩니다. 팀은 점진적으로 비즈니스에 대한 학습을 진행하면서 작지만 동작하는 일부 기능을 확실히 정복해 갈 수 있게 되는 것이죠. 이런 방식으로 팀은 매 스프린트 목표에 맞추어 성장하고, 그에 맞추어 제품도 계속 성장해 나가게 됩니다. 나아가 다음 스프린트에 전혀 다른 기능을 개발하더라도 충분히 다시 쓸 수 있는 동작하는 코드를 확보하게 됩니다. 이러한 점에서 애자일 개발 방법론은 투자한 만큼의 가치를 만드는 방식이라고 볼 수 있습니다.</span></span></span></p><figure id=\"4e8621cf-b0c2-47ec-b790-4f0633555854\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/cf7f1ada-dc6b-4f5d-bf34-a528795fd8e8\"/></figure><p id=\"7a29eda8-ab8a-4436-93bd-ce6332b8605e\"><span><span><span>그림: 애자일 프로젝트에서의 기능과 시간의 관계</span></span></span></p><figure id=\"595fafaf-d654-413f-b166-6f68c20b66b4\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/409b393f-8bf2-4ce0-b0a5-ada13f782283\"/></figure><p id=\"a494db61-5aba-4879-8730-ac783a45a0b6\"><span><span><span>그림: big up-front 설계가 적용된 프로젝트에서의 기능과 시간의 관계</span></span></span></p><p id=\"799e3a87-f3c2-4ded-bc19-41335f34cd30\"><span><span><span>애자일 프로젝트는 시간에 비례하여 기능의 수가 증가하고, 비-애자일 프로젝트에서는 상대적으로 후반부에 기능이 집중적으로 증가함을 표현해 봤습니다.</span></span></span></p><h2 id=\"00f64dd9-4c70-48c6-84aa-a34d4025be00\"><span><span><span>품질과 생산성</span></span></span></h2><p id=\"b7b8c131-cd89-4f9c-afe3-65284048e23e\"><span><span><span>어떤 코드를 보고 최고의 품질인지 판단하는 것은 매우 어려운 일입니다. 피카소조차도 더 탁월한 화가를 만난다면 자신의 작품에 몇 점을 매겨야 할지 애매할 수 있습니다.</span></span></span></p><p id=\"456db89f-ccf9-4819-9f5d-8dd9360d22a2\"><span><span><span>평범한 화가가 심혈을 기울인다고 하여 피카소 만큼 훌륭한 그림을 그릴 확률 역시 극히 낮을 것입니다. 이러한 논리는 개발자에게도 그대로 적용 가능합니다. 개인의 품질 역량을 10이라고 가정했을 때 평균적으로 8정도의 품질을 보여줄 확률이 높으며, 상당한 노력을 투입해야 10의 품질을 만들어 낸다고 생각할 수 있습니다. 따라서 11의 품질을 추구하게 된다면 생산성이 극적으로 저하될 수 있습니다. </span></span></span></p><p id=\"3056b8a5-6213-47a7-b2bb-14195a6b396e\"><span><span><span>기존의 코드를 개선하여 품질을 높이고자 한다면 어느 정도의 품질 개선을 목표로 해야 할까요? 만약 전체 코드를 복제한다면 품질 개선율 0%, 공정률 100%를 즉시 달성할 수 있습니다. 만약 품질 개선율 1%, 생산 공정률 100%를 달성하고자 한다면 전체 코드의 1%를 개선하는 만큼의 시간을 더 사용해야 합니다.</span></span></span></p><p id=\"934f8e77-2f38-4a87-ab45-346da9f0d322\"><span><span><span>품질을 더 개선하고 싶은데 스스로 해내기가 쉽지 않다고 판단된다면 다양한 주변 환경(동료, 메이트, 멘토, 팀, 단위 테스트 등)을 활용하여 성장 환경을 만들어 가는 것이 중요한 것 같습니다. 특히 토스페이먼츠에는 기술 논의를 즐기는 기술 덕후들이 꽤 많습니다. 내 주변이 나 때문에 활기 넘치게 만들어 보세요.</span></span></span></p><h2 id=\"624179fb-782a-49f4-983a-fa7e04b9dba2\"><span><span><span>핵심은 코드 리딩의 생산성</span></span></span></h2><p id=\"9a57f462-cc87-49fc-aed8-18a293e485c0\"><span><span><span>대부분의 회사에는 다른 개발자들이 생산한 코드가 항상 산적해 있습니다. 어떤 기능을 개선하고 싶다면 다른 사람이 작성한 코드를 읽어야 하죠. 그래서 보통은 코드를 읽는 시간이 작성하는 시간보다 훨씬 깁니다. 따라서 읽기 좋은 코드를 만드는 것은 개발자의 삶에 굉장히 중요합니다.</span></span></span></p><p id=\"55d6125f-acea-44f5-9b04-5645b9189dc8\"><span><span><span>기존 코드를 읽는 것에 과도한 시간을 써야 한다면 기능 개선을 위한 준비 작업에만 상당한 시간을 소비하게 되어 생산성이 떨어지게 됩니다.읽기 좋은 코드를 만들어서 코드 리딩의 생산성을 향상시키는 것이 중요한 이유입니다.</span></span></span></p><p id=\"7dadec2c-119b-4193-aea7-a98bb1639ddf\"><span><span><span>가능하다면 코드를 읽을 때 리팩토링 기술(Rename Method, Extract Method 등)을 활용하는 것이 좋습니다. 이러한 리팩토링을 </span><a href=\"https://twitter.com/mfeathers\" rel=\"noreferrer noopener\" target=\"_blank\">Michael Feathers</a><span>는 ‘탐색적 리팩토링(Exploratory Refactoring)’ 이라고 부르며, 이 과정에서 수정된 코드가 최종적으로 코드 저장소에 반영되지 않는다고 하더라도 충분히 가치있는 일입니다. 제가 느끼기에 Exploratory Refactoring은 정말로 효과적인 학습 프로세스이기 때문입니다.Exploratory Refactoring을 수행하게 되면 코드를 읽은 즉시 나의 해설을 표시하기 때문에 굉장히 적극적으로 코드 리딩이 되며, 코드 리딩의 주도권을 자연스럽게 리더(reader)가 가져가게 됩니다. 책을 읽었는데도 이해가 안되서 다시 읽어야 하는 것과 같은 수동적인 상태에서 벗어날 수 있게 됩니다. 따라서 Exploratory Refactoring은 탁월한 개발자가 탁월해지게 만들어주는 진정한 </span><a href=\"https://terms.naver.com/entry.nhn?docId=2028637&amp;cid=42914&amp;categoryId=42915\" rel=\"noreferrer noopener\" target=\"_blank\">OP</a><span> 기술입니다.</span></span></span></p><h2 id=\"b1bfc1d5-372a-4a79-bd1c-bd01769b23d4\"><span><span><span>리팩토링의 가치</span></span></span></h2><p id=\"cbec8d22-ce93-4506-8bf0-9f60fd3020ce\"><span><span><span>개발자들이 리팩토링의 욕구를 강하게 느낄 때는 보통 유지보수 비용이 과도한 경우입니다. 유지보수 비용이 높은 이유는 기능을 수정해야 하는데 어느 코드를 수정해야 할지, 몇 줄의 코드를 바꿔야 할지, 변경을 했다면 올바르게 변경했는지 등을 파악하기 어렵기 때문입니다.</span></span></span></p><p id=\"b22ed59c-851a-4b6a-a584-e1dea017624a\"><span><span><span>따라서 요구사항에 대응하는 코드가 어디인지 명확하게 찾아낼 수 있고, 수정한 부분의 동작이 정확한지 파악하기 쉽다면 유지보수 비용을 낮출 수 있습니다. 리팩토링의 목적은 이러한 부분을 달성하는 데 있습니다.</span></span></span></p><p id=\"887f3dee-84de-443b-ac51-3429818dcb4c\"><span><span><span>따라서 리팩토링이 잘 수행되었다면 새로운 개발자(혹은 미래의 자신)가 기능 변경 요청을 받았을 때 아래의 3가지를 쉽게 해낼 수 있습니다.</span></span></span></p><ol><li id=\"9fcc80fe-326d-4a59-89e1-3efe19b35481\"><span><span><span>코드 위치 파악</span></span></span></li><li id=\"a3df4831-117e-43ef-93e5-3c7681aadb17\"><span><span><span>코드 수정 </span></span></span></li><li id=\"f404affd-df6f-4202-9ae3-d8efe1159d7c\"><span><span><span>기능 테스트</span></span></span></li></ol><p id=\"3cae6aa2-2784-4721-bfb6-6dcc7464d975\"><span><span><span>리팩토링으로 잘 설계된 코드는 이러한 핵심 과업을 쉽게 이행하는데 큰 도움이 됩니다.</span></span></span></p><h2 id=\"5662b1d2-7e06-4253-826f-03b439a6d9c9\"><span><span><span>결론</span></span></span></h2><p id=\"57ca9ea7-9a7e-46c0-bf1c-cae6cc002c3a\"><span><span><span>애자일 기법은 요구사항이라는 큰 덩어리를 작지만 동작하는 작은 기능으로 나누고 매 스프린트 마다 목표한 바를 착실히 정복해가는 방식이라고 할 수 있습니다.</span></span></span></p><p id=\"5c57d6d8-4cc8-4aa4-903a-1bc13cff8a19\"><span><span><span>이 때 안전하게 기능을 수정 혹은 추가하기 위해서는 3개의 핵심 과업을 잘 수행해야 하는데요,</span></span></span></p><ol><li id=\"f337ecac-ca71-4be3-98c5-b2c538765b63\"><span><span><span>코드로부터 도메인 파악하기(a.k.a. 코드 고고학)</span></span></span></li><li id=\"d3229a95-e8d3-4586-9b4e-ae700e753edc\"><span><span><span>수정에 필요한 코드 파악하기</span></span></span></li><li id=\"f64be047-9f73-4d22-8a89-6933abec9f24\"><span><span><span>수정된 코드 쉽게 검증하기</span></span></span></li></ol><p id=\"6b7e3cee-8e25-44ce-926f-cabdce236cb7\"><span><span><span>토스페이먼츠에서는 애자일하게 일하는 방법을 동료들과 함께 일 하면서 쉽게 터득할 수 있는 좋은 문화와 프로세스를 만들기 위해 서툰 실험을 계속하고 있습니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "7": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"조금만 신경써서 초기 렌더링 빠르게 하기 (feat. JAM Stack)\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/02/techblog-07-jam-stack.png\"/><h1>조금만 신경써서 초기 렌더링 빠르게 하기 (feat. JAM Stack)</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/jaeyeop-han.jpg\"/><div><div><h3>한재엽</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2022. 2. 9</div></div></section></header><div><h2 id=\"31c94a74-7372-4280-a105-29816a5dcab1\"><span><span><span>들어가면서</span></span></span></h2><p id=\"7c26a371-0412-4a70-8638-baf92fc4a650\"><span><span><span>SPA(Single Page Application) 구조로 웹 프론트엔드 애플리케이션이 개발되면서 초기 렌더링 속도는 프런트엔드 개발자에게 중요한 과제 중 하나가 되었습니다. 사용자 경험에 영향을 줄 수 있는 가장 큰 요소 중 하나가 바로 속도이기 때문입니다. 이번 개선은 </span><a href=\"https://web.dev/vitals/\" rel=\"noreferrer noopener\" target=\"_blank\">Web Vitals</a><span> 지표를 중심으로 측정했습니다.</span></span></span></p><h2 id=\"38cc83cc-41ed-440d-93d2-03a1260dfc89\"><span><span><span>주어진 과제들</span></span></span></h2><h3 id=\"7b9251a0-d758-4c66-a805-1a5e53865131\"><span><span><span>과제 1. 번들 사이즈</span></span></span></h3><p id=\"ffb82f2b-3856-43ab-8d93-a39cf1cc16d6\"><span><span><span>애플리케이션에 기능이 추가되면서 번들 사이즈가 커졌고 이로 인해 초기 렌더링이 늦어지는 문제가 발생하게 됩니다. 네트워크 비용을 줄이기 위해 Webpack으로 번들링했던 소스코드를 다시 적절한 단위로 코드 스플리팅(Code Splitting)을 하기도 하고 사용되지 않는 코드, 불필요한 코드들을 덜어내기 위한 트리 세이킹(Tree Shaking)을 위한 작업을 하기도 합니다.</span></span></span></p><p id=\"05f314d2-76e9-4038-bf68-5fa199d1d6c1\"><span><span><span>→ </span><a href=\"https://www.youtube.com/watch?v=EP7g5R-7zwM\" rel=\"noreferrer noopener\" target=\"_blank\">[SLASH 21] 이한 – JavaScript Bundle Diet</a></span></span></p><p id=\"50675467-d109-4afd-868c-e8ab8891266c\"><span><span><span>이러한 노력을 하더라도 개선할 수 있는 부분엔 한계가 존재했습니다. 초기에 렌더링되는 index.html 자체가 비어있는 문서(Document)이기 때문에 스크립트가 실행되어 실제로 렌더링이 되기까지의 시간이 존재하기 때문입니다.</span></span></span></p><h3 id=\"c63d62c4-ed8f-43be-854e-e4ee9c08312c\"><span><span><span>과제 2. 렌더링 시점</span></span></span></h3><p id=\"f2b0cc8b-7c51-472c-bdac-8be4969b5331\"><span><span><span>그렇다면 이제 렌더링 시점을 어떻게 앞당길 것인가에 대한 문제를 해결해야 됩니다. 사용자가 </span><a href=\"http://tosspayments.com\" rel=\"noreferrer noopener\" target=\"_blank\">tosspayments.com</a><span> 에 접근했을 때, 사용자가 최종적으로 볼 수 있는 화면을 서버에서 미리 그리고 그 화면을 브라우저에 전달해주면 초기 렌더링 시점이 앞당겨지지 않을까요?</span></span></span></p><p id=\"b1b74f04-9469-48d5-8f78-3106dbd13ce1\"><span><span><span>물론 인터랙션이 가능해지기 까지는 하이드레이트(Hydrate) 시간이 필요하지만, 사용자 입장에서는 우선 화면이 보여지는 것이 중요합니다. 초기에 렌더링 되는 index.html이 비어있는 문서가 아니라 무언가 렌더링되어 있는 문서라면 </span><a href=\"https://web.dev/i18n/ko/lcp/\" rel=\"noreferrer noopener\" target=\"_blank\">LCP(Largest Contentful Paint)</a><span> 시점을 크게 앞당길 수 있을 것입니다.</span></span></span></p><h2 id=\"3dfb2ca5-7089-425b-8181-f42724a8ba0b\"><span><span><span>JAM Stack</span></span></span></h2><p id=\"8f34db49-1faf-42d6-9c71-c2b67f5707da\"><span><span><span>서론이 길었는데요, 토스페이먼츠에서 만들고 있는 일부 제품에서 SSR(Server Side Rendering)없이 초기 렌더링 속도를 개선해 보았습니다. 어떤 결과를 낳았으며 어떻게 개선했는지 이야기하고자 합니다.</span></span></span></p><p id=\"4125b060-95e7-4a61-8f2c-884c451de94a\"><span><span><span>JAM Stack이란 JavaScript와 Markup에 해당하는 HTML, CSS 정적 리소스들을 활용하여 웹 애플리케이션을 구성하는 스택을 말합니다. 그리고 이 정적 리소스들을 CDN(Content Delivery Network)에 배포하여 서버 관리를 최소화 할 수 있습니다.</span></span></span></p><p id=\"b25b7dfc-e142-486a-9716-eae1fdc98b45\"><span><span><span>토스페이먼츠에서는 AWS S3, CloundFront, Lambda@edge 를 사용하여 인프라를 운영하고 있습니다.</span></span></span></p><p id=\"c4fa5fd9-cf67-4fcd-9bcd-026bed7018c6\"><span><span><span>→ </span><a href=\"https://jbee.io/web/jam-stack/\" rel=\"noreferrer noopener\" target=\"_blank\">JAM Stack에 대해 더 알아보기</a></span></span></p><h3 id=\"d34eeaee-6e92-49be-9574-6ba81548151e\"><span><span><span>SSG</span></span></span></h3><p id=\"f82313a2-1f80-476b-adb9-7c034f068c28\"><span><span><span>Static Site Generation이라는 개념인데요, 앱을 빌드하는 시점에 미리 그려두고 이를 서빙(serving)하는 방식을 말합니다. JAM Stack에서 정적 리소스를 생성하는 용도로 사용합니다.</span></span></span></p><p id=\"81c41c85-eb53-4089-a15a-258c4eea4d2a\"><span><span><span>컴파일 단계에서 </span><span>미리 그릴 수 있는</span><span> 부분을 최대한 그려서 사용자에게 도달하는 최초 index.html 파일이 비어있지 않도록 합니다.</span></span></span></p><p id=\"cc73db11-6ad1-4e0c-9330-ddcc49e24723\"><span><span><span>미리 그릴 수 있다는 것은 말 그대로 컴파일 단계에서 리액트 코드를 읽어 HTML로 렌더링 할 수 있는 부분을 말합니다. 정적인 부분을 포함하여 인증이 필요하지 않은 데이터 또한 서버로부터 가져와 미리 그릴 수 있습니다.</span></span></span></p><h3 id=\"e66cf994-aef0-4ccb-a538-1e18269f3f8c\"><span><span><span>결과 (지표)</span></span></span></h3><p id=\"293cfe2f-040d-44d0-a406-21143a8456a4\"><span><span><span>구체적인 내용을 다루기에 앞서 어느 정도의 개선이 있었는지 먼저 소개하고자 합니다. 기대한 것 이상의 결과가 나와서 매우 즐거웠던 경험이었습니다.</span></span></span></p><figure id=\"294fa175-7c59-4d9e-9c47-8a5c2b3c1ab6\"><video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\"><source src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/192dda32-64ce-4472-a7da-54a68e66fe70\"/></video></figure><p id=\"40d68f35-6d4a-40c3-b489-64dbb38ed7ce\"><span><span><span>토스페이먼츠 상점관리자 초기 로딩 화면</span></span></span></p><h3 id=\"50251a14-88cd-4b4e-9ebb-8b26c7457d38\"><span><span><span>Lighthouse 지표</span></span></span></h3><p id=\"cb039827-a4e3-42ff-acf9-afb2bfc55c61\"><span><span><span>before</span></span></span></p><figure id=\"56dd4f2a-cfe4-48b6-b8dd-c99e9e9aff88\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/de912108-3683-4f37-9c7d-459f8e2d7bee\"/></figure><p id=\"e0fedd39-6c3b-4f37-95ee-67337997f1f0\"><span><span><span>개선 하기 전 지표</span></span></span></p><p id=\"5a884bc6-d584-4310-8a92-c32eb52a722f\"><span><span><span>After</span></span></span></p><figure id=\"948a8017-26a7-4c2b-943a-84d0417e4989\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/0419ad65-ca39-49ae-938d-c230af0267e8\"/></figure><p id=\"e9abc30a-1441-4200-b7cb-eec34ce50d9b\"><span><span><span>개선 후 지표</span></span></span></p><h3 id=\"a5387e95-d319-4a53-959d-6c88ba880303\"><span><span><span>구체적인 지표 측정</span></span></span></h3><p id=\"c833a450-07f2-4e10-a5ae-911a5a42e0f1\"><span><span><span>Chrome Browser에서 FP(First Paint)부터 LCP(Largest Contentful Paint)까지 걸린 시간을 측정해봤습니다.</span></span></span></p><p id=\"7680eed6-9f50-4c2b-b640-3c5dd63432b5\"><span><span><span>before(FP → LCP: 484ms)</span></span></span></p><figure id=\"fd34e9e9-5426-48fd-96cd-88afe52347f0\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/8b399287-7af5-448c-86ee-a275280271dd\"/></figure><p id=\"407e5733-1a9e-4a77-b073-942229557632\"><span><span><span>after(FP → LCP: 0ms)</span></span></span></p><figure id=\"30904752-e3b4-4a3b-8395-1e0ac693068f\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/73e390b3-b8aa-406c-8bae-65879e0b33b7\"/></figure><blockquote id=\"36cf2ec2-0646-477b-bf47-cca4c2b38ca3\"><span><span><span>Large Contents에 해당하는 것을 일단 그려버리고 시작하니 0ms입니다.</span></span></span></blockquote><p id=\"4b2a5be0-7f22-4842-ad2e-e31b7ef42e1c\"><span><span><span>최대한 그릴 수 있는 영역을 미리 그림으로써 사용자는 흰 화면을 마주하지 않고 바로 제품을 만나는 것과 같은 느낌을 받을 수 있습니다.</span></span></span></p><h2 id=\"b4768dde-935f-44cf-94f7-43bfb3b46039\"><span><span><span>How?</span></span></span></h2><h3 id=\"54669b47-b04d-453e-a4b0-756ddf2a0319\"><span><span><a href=\"https://github.com/vercel/next.js/\" rel=\"noreferrer noopener\" target=\"_blank\">Next.js</a></span></span></h3><p id=\"11eef81b-0725-48a9-a9da-868ab7d66a88\"><span><span><span>토스페이먼츠의 프런트엔드 애플리케이션은 Next.js 라는 프레임워크를 사용하고 있습니다. Next.js는 서버 사이드 렌더링은 물론이고 앞서 설명드린 Static Site Generate 또한 지원합니다. (</span><a href=\"https://nextjs.org/docs/advanced-features/automatic-static-optimization\" rel=\"noreferrer noopener\" target=\"_blank\">Next.js Automiatic Static Optimization</a><span>)</span></span></span></p><h3 id=\"349ab9df-6c98-45b8-87f6-dc8ce9276fd0\"><span><span><a href=\"https://ko.reactjs.org/docs/concurrent-mode-suspense.html\" rel=\"noreferrer noopener\" target=\"_blank\">Suspense</a></span></span></h3><p id=\"4afae68d-0484-466d-87b9-6c7035bae508\"><span><span><span>우선 토스 대부분의 프런트엔드 애플리케이션 제품은 React의 Suspense를 통해 비동기를 제어하고 있으며 토스페이먼츠 제품 또한 예외가 아니었습니다. 이와 동시에 에러 핸들링 또한 </span><a href=\"https://ko.reactjs.org/docs/error-boundaries.html#gatsby-focus-wrapper\" rel=\"noreferrer noopener\" target=\"_blank\">ErrorBoundary</a><span>를 통해 제어하면서 비동기 상황을 제어하고 있습니다.</span></span></span></p><p id=\"08f2e24f-f042-433f-ab6f-4a222fc88241\"><span><span><span>→ </span><a href=\"https://www.youtube.com/watch?v=FvRtoViujGg\" rel=\"noreferrer noopener\" target=\"_blank\">[SLASH 21] 박서진 – 프론트엔드 웹 서비스에서 우아하게 비동기 처리하기</a></span></span></p><p id=\"2cbef7ab-862f-4206-a3c0-78f7e05e41e0\"><span><span><span>→ </span><a href=\"https://jbee.io/react/error-declarative-handling-3/\" rel=\"noreferrer noopener\" target=\"_blank\">선언적으로 에러 상황 제어하기</a></span></span></p><p id=\"5d69ee5f-ac77-4326-9787-cdb2b5a31a24\"><span><span><span>이 Suspense를 Next.js와 함께 사용하기 위해선 약간의 추가 작업이 필요한데요, 앞서 설명드렸다시피 Next.js는 서버사이드 렌더링 또한 지원하는 프레임워크이기 때문에 Isomophic한 코드를 작성해야 합니다. 아쉽게도 Suspense는 서버사이드 렌더링이 지원되지 않습니다. (글을 작성하는 시점에 </span><a href=\"https://github.com/reactwg/react-18\" rel=\"noreferrer noopener\" target=\"_blank\">알파로 공개되어 있는 React 18</a><span>에서 </span><a href=\"https://github.com/reactwg/react-18/discussions/22\" rel=\"noreferrer noopener\" target=\"_blank\">개선</a><span>될 예정)</span></span></span></p><p id=\"e5178c75-4fbe-41c2-9b01-10ec6ebd41a5\"><span><span><span>그래서 다음과 같이 Suspense를 한번 감싸서 사용해줄 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>{</span> <span>useState</span><span>,</span> <span>useEffect</span><span>,</span> <span>Suspense</span> <span>as</span> <span>ReactSuspense</span> <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>export</span> <span>function</span> <span>Suspense</span><span>(</span><span>{</span> <span>fallback</span><span>,</span> <span>children</span> <span>}</span><span>:</span> ComponentProps<span>&lt;</span><span>typeof</span> <span>ReactSuspense</span><span>&gt;</span>) <span>{</span>\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() =&gt; <span>{</span>\n    <span>setMounted</span><span>(</span><span>true</span><span>)</span>;\n  }, []);\n\n  if (mounted) <span>{</span>\n    return <span>&lt;</span><span>ReactSuspense</span> <span>fallback</span>=<span>{</span><span>fallback</span><span>}</span><span>&gt;</span><span>{</span><span>children</span><span>}</span><span>&lt;/</span><span>ReactSuspense</span><span>&gt;</span>;\n  }\n  return <span>&lt;</span><span>&gt;</span><span>{</span><span>fallback</span><span>}</span><span>&lt;/</span><span>&gt;</span>\n\n</code></pre></div></div></div></div><p id=\"8ee82c99-c308-4fbc-9389-18a56dde32b3\"><span><span><span>이렇게 수정된 Suspense로 제어하고 있는 컴포넌트를 SSG로 빌드하게 되면 </span><code>fallback</code><span>이 렌더링됩니다.</span></span></span></p><p id=\"236dcf5a-c9ba-474f-912b-0c6c9c6d4885\"><span><span><span>다음과 같은 코드일 경우, SSG 시점엔 </span><code>&lt;Loading /&gt;</code><span> 컴포넌트만 그려지게 됩니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>function</span> <span>UserPage</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>(</span>\n    <span>&lt;</span><span>Suspense</span> <span>fallback</span>=<span>{</span><span>&lt;</span><span>Loading</span> <span>/&gt;</span><span>}</span><span>&gt;</span> // <span>&lt;</span>- Render!\n      <span>&lt;</span><span>UserProfile</span> <span>/&gt;</span>\n      <span>&lt;</span><span>UserDetailInfo</span> <span>/&gt;</span>\n    <span>&lt;/</span><span>Suspense</span><span>&gt;</span>\n\n</code></pre></div></div></div></div><p id=\"ad096f06-7713-4cd0-8cdf-91b87c0da8ba\"><span><span><span>즉, 빌드 단계에서 SSG로 미리 그려주고자 했던 UserPage에는 Loading 컴포넌트만 렌더링 될 뿐, </span><code>UserProfile</code><span> , </span><code>UserDetailInfo</code><span> 컴포넌트는 전혀 렌더링 되지 않습니다. 미리 렌더링하는 것에 대한 이점을 전혀 얻지 못하게 되는 것입니다.</span></span></span></p><p id=\"f1105481-cda8-4363-a11c-93f9feda58c6\"><span><span><span>번들 사이즈를 아무리 줄여도 사용자는 일단 로딩만 돌고 있는 흰 화면을 마주하게 되는 것입니다.</span></span></span></p><h3 id=\"fb4c71fc-9c44-4171-a46f-31422d8845b4\"><span><span><span>컴포넌트 배치 되돌아보기</span></span></span></h3><p id=\"99f7e373-0233-4b11-a107-2eb7372412ab\"><span><span><span>우선 Suspense가 정말 필요한 컴포넌트인지, 레이아웃 영역인지 되돌아 볼 필요가 있습니다.</span></span></span></p><p id=\"700f0748-da67-4ca9-93fc-4b92025a0f96\"><span><span><span>정말 Suspense가 필요한 영역이라면 </span><code>fallback</code><span> 컴포넌트를 정의해줄 때 로딩 컴포넌트만 정의해주지 않는다면 어떨까요? API 응답이 돌아오고 결국 그려질 컴포넌트와 응답이 오지 않았을 경우 보여줄 이 </span><code>fallback</code><span> 컴포넌트를 최대한 비슷하게 구성해주는 겁니다. 그렇다면 컴파일 시점에 그릴 수 있는 영역이 늘어나지 않을까요?</span></span></span></p><p id=\"91c68dd6-c019-4db8-828d-975cc964033d\"><span><span><span>즉, 위와 같이 Loading 컴포넌트만 렌더링하지 않으려면 API 응답이 돌아왔을 때 그려져야 할 컴포넌트와 응답이 아직 돌아오지 않았을 때 보여줄 컴포넌트 두 벌이 최대한 비슷하게 구성되어 있어야 합니다.</span></span></span></p><h3 id=\"59f44742-960a-44b1-a31a-053016212ffb\"><span><span><span>컴포넌트와 API를 가깝게</span></span></span></h3><p id=\"a7e693e9-1348-44a2-9150-cb2927f1306e\"><span><span><span>처음 보셨던 화면에서는 총 16개의 API call이 존재합니다. 너무나 당연하게도 이 모든 API 응답은 제각각으로 올 것이고 모든 응답이 돌아오기를 기다렸다가 그려주는 것은 정말 낭비입니다.</span></span></span></p><ul><li id=\"4e451c83-62a5-4960-bd91-616c7a88df3e\"><span><span><span>각각의 API들을 따로 격리시켜 서로의 렌더링을 block하지 않도록 합니다.</span></span></span></li><li id=\"738adde7-c26d-4ce2-bf50-e4ea2bc5cd63\"><span><span><span>데이터가 필요한 곳에서 가장 </span><span>가까운 곳</span><span>에서 API를 호출합니다. client caching이 이젠 너무나도 자연스럽기 때문에 이를 최대한 활용해줍니다.</span></span></span></li></ul><p id=\"c5659596-0fd0-4d83-b414-10a0499bf2c3\"><span><span><code>UserPage</code><span> 컴포넌트의 구조를 다음과 같이 변경해 볼 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>function</span> <span>UserPage</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>(</span>\n    <span>&lt;</span><span>Layout</span><span>&gt;</span>\n      <span>&lt;</span><span>h1</span><span>&gt;</span>사용자 정보<span>&lt;/</span><span>h1</span><span>&gt;</span>\n      <span>&lt;</span><span>dl</span><span>&gt;</span>\n        <span>&lt;</span><span>dt</span><span>&gt;</span>이름<span>&lt;/</span><span>dt</span><span>&gt;</span>\n        <span>&lt;</span><span>Suspense</span> <span>fallback</span>=<span>{</span><span>&lt;</span><span>dd</span><span>&gt;</span>Loading<span>&lt;/</span><span>dd</span><span>&gt;</span><span>}</span><span>&gt;</span>\n          <span>&lt;</span><span>UserName</span> <span>/&gt;</span>\n        <span>&lt;/</span><span>Suspense</span><span>&gt;</span>\n      <span>&lt;/</span><span>dl</span><span>&gt;</span>\n      <span>&lt;</span><span>h2</span><span>&gt;</span>사용자 상세 정보<span>&lt;/</span><span>h2</span><span>&gt;</span>\n      <span>&lt;</span><span>Suspense</span> <span>fallback</span>=<span>{</span><span>&lt;</span><span>div</span><span>&gt;</span>Loading<span>&lt;/</span><span>div</span><span>&gt;</span><span>}</span><span>&gt;</span>\n        <span>&lt;</span><span>UserDetailInfo</span> <span>/&gt;</span>\n      <span>&lt;/</span><span>Suspense</span><span>&gt;</span>\n    <span>&lt;/</span><span>Layout</span><span>&gt;</span>\n  <span>)</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"bad52b84-c6b2-4a24-8fd1-71d34eed9f13\"><span><span><span>페이지 컴포넌트(</span><code>UserPage</code><span>) 전체를 감싸고 있던 </span><code>Suspense</code><span> 컴포넌트가 사라지고 비동기로 처리되는 영역이 좁게 정의가 되었습니다. 또한 비동기 처리 과정 중 노출되는 컴포넌트의 모습도 원래 보여질 컴포넌트와 비슷하게 정의해줬습니다.</span></span></span></p><p id=\"154f18fe-ca53-49be-b245-c7ca1b60b73e\"><span><span><span>디자인이 필요한 영역이 늘었어요. API를 호출하고 기다리는 순간에 대해서도 디자인이 필요해요. 그대로 컴포넌트도 만들어줘야 하고 그만큼 손도 많이 갑니다. 하지만 서버 관리하는 비용보다 더 신경써줄 필요는 없다고 생각합니다.</span></span></span></p><p id=\"cb4a6a9e-8dce-4799-8b0d-e10ceb080e61\"><span><span><span>조금만 신경쓰더라도 많은 개선을 볼 수 있는 방법입니다.</span></span></span></p><h3 id=\"87fead76-85b9-4170-83a3-dbf0e23c246f\"><span><span><span>더 나아가기</span></span></span></h3><p id=\"97075fbf-78da-4476-a49e-35bdb1ba0224\"><span><span><span>지난 Next.js Conf에서 공식적으로 </span><a href=\"https://ko.reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html\" rel=\"noreferrer noopener\" target=\"_blank\">React의 Server Component</a><span>를 사용한 렌더링 방식이 공개되었습니다. React 18도 알파 단계이니 프런트엔드 애플리케이션을 개발하면서 성능 상 이점을 많이 챙길 수 있는 환경으로 뒤바꿈 될 것 같습니다. </span><a href=\"https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration\" rel=\"noreferrer noopener\" target=\"_blank\">ISR 방식</a><span>과 컴포넌트 단위의 캐싱이 적용되어 웹이 더 빨라질 수 있을 것이라 기대합니다.</span></span></span></p><h3 id=\"442e9093-8d44-44c1-8532-bb891cf7361a\"><span><span><span>마무리</span></span></span></h3><p id=\"ad1b8979-2a41-4cdc-bc2b-bc4ac8ddc5b3\"><span><span><span>초기 로딩 속도가 중요한 것은 비즈니스에도 영향을 미치기 때문입니다. web.dev에서 초기 로딩 속도를 개선하여 성과가 개선된 사례가 소개된 바 있습니다.(</span><a href=\"https://web.dev/vitals-business-impact/\" rel=\"noreferrer noopener\" target=\"_blank\">https://web.dev/vitals-business-impact/</a><span>)</span></span></span></p><p id=\"01af16ae-0e7f-4e20-bdbb-4e1b72e662af\"><span><span><span>당장에 SSR 도입이 쉽지 않은 상황이라면 SSG를 통한 초기 렌더링을 최적화 할 수 있습니다.</span></span></span></p><p id=\"8a3f311d-ce68-45a0-b623-9613db895619\"><span><span><span>토스 팀은 계속해서 초기 로딩 속도를 계속해서 개선 중입니다. 곧 있을 SLASH22에서는 ‘매달, 유저가 기다리는 시간을 2.3년씩 아낄 수 있는 초기 렌더링 개선기 (feat. SSR)’라는 제목으로 초기 렌더링 개선 경험을 공유할 예정이니 많은 관심 부탁드립니다.</span></span></span></p><p id=\"28d09bfb-dcb6-4750-ad71-9a44de83bf8d\"><span><span><span>👉 </span><a href=\"https://tosspayments-dev.oopy.io/chapters/frontend/about\" rel=\"noreferrer noopener\" target=\"_blank\">토스페이먼츠 프런트엔드 챕터에 대해 더 알아보기</a></span></span></p><p id=\"f0104799-2cff-4573-a9e6-49a2b0079408\"><span><span><span>감사합니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "8": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs.png\"/><h1>Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/gyuju-han.png\"/><div><div><h3>한규주</h3><h3>ㆍ<!-- -->Server Developer</h3></div><div>2022. 4. 11</div></div></section></header><div><p id=\"ed4fb944-ecff-4622-8165-013b3e258c4d\"><span><span><span>REST Docs 테스트 코드량을 70% 줄여주는 DSL 개발기</span></span></span></p><p id=\"921c2581-ca6b-4729-8b09-128e2ed0224f\"><span><span><span>읽는 데 걸리는 시간: 6분</span></span></span></p><h2 id=\"886da8cb-7217-4194-8fe8-98bf7927f32a\"><span><span><span>DSL</span></span></span></h2><p id=\"f7ee816b-b3e8-42a6-a2f6-8d92f8d44e02\"><span><span><span>Domain Specific Languages(DSL)은 코드의 내부 로직을 숨기고 재사용성을 올려줍니다. 어떤 경우는 비 개발자가 사용하도록 고안되는 경우도 있어서, 일반적인 프로그래밍 언어보다 훨씬 쉬운 사용성을 가집니다. 핵심은 해당 도메인을 아는 사람이면 누구나 쉽게 해당 도메인을 제어할 수 있도록 DSL을 제공하는것이 목적이며, 그렇기 때문에 프로그래밍 언어가 아닌 일반적인 언어에 가깝도록 호출 방식을 설계합니다. 때문에 DSL 호출 내부에서 어떤 로직이 작동하는지는 사용자가 알도록 할 필요가 없으며 훨씬 더 간결하고 빠르게 코드를 작성할 수 있습니다.</span></span></span></p><h3 id=\"60008a13-8088-4a45-89da-255bae5875c5\"><span><span><span>Spring REST Docs, 더 쉽고 간결하게 쓸 수 없을까</span></span></span></h3><p id=\"1035363f-e784-4c32-8948-949fd0486163\"><span><span><span>토스페이먼츠에서는 API docs를 REST Docs를 사용해서 작성할 수 있도록 권장하고 있습니다. docs를 작성하는 행위 자체에서부터 API를 통합테스트할 수 있다는 점이 매력적이며, 인터페이스의 의도치 않은 변경을 감지할 수 있다는 장점이 있습니다. 문제는 독스를 작성할 때마다 테스트 코드를 작성해줘야 하기 때문에 Swagger 보다 더 번거롭게 작업하게 된다는 문제가 있습니다.</span></span></span></p><p id=\"22e77f23-aa93-430f-a468-e20f9d4c6f88\"><span><span><span>이 글에서는 DSL을 통해서 API 인터페이스의 안정성과 개발자의 생산성을 모두 가져갈 수 있는 방법을 소개합니다.</span></span></span></p><h2 id=\"77c3eb33-1806-4000-8aba-311b254ed1e5\"><span><span><span>REST Docs DSL</span></span></span></h2><p id=\"3eeca15a-71b4-43bd-82fb-62e3d260c74f\"><span><span><span>먼저 기존의 작성법(AS-IS)과 DSL을 이용한 작성법(TO-BE)을 비교해보겠습니다.</span></span></span></p><h3 id=\"2f985438-fd3b-4061-ab2e-0eab9971eeb1\"><span><span><span>AS-IS.</span></span></span></h3><figure id=\"02b8148f-53f0-491c-a605-2b2ac34e1d61\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/4407d4f6-357a-4c73-8eb9-427952384294\"/></figure><h3 id=\"cb4a89ef-e998-49a2-bcf9-e3bcb9418fa6\"><span><span><span>TO-BE.</span></span></span></h3><figure id=\"283824b6-81cf-4db7-9bd3-b639234f51cd\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/cbdba5a7-8407-4d4e-98f3-4ca3c9b4e23a\"/></figure><p id=\"4e6d5a62-7f86-4825-af76-9645d4660e25\"><span><span><span>한 눈에 봐도 간결해보이지 않나요? AS-IS에서 볼 수 있듯, 기존의 작성법은 여러 문제가 있습니다.</span></span></span></p><ol><li id=\"84e1aee6-bd29-44fb-9d93-603d2a54f9d8\"><span><span><span>반복적인 코드 호출이 많음.</span><span> </span><span>기존 작성법으로 작성할 때마다 생산성 저하를 느꼈습니다. API를 만드는 시간만큼이나 docs를 생성하는 시간이 걸린다니, 이것 참 비효율이지 않나요?</span></span></span></li><li id=\"5f81cdad-10a1-4092-879b-fcdff878dea4\"><span><span><span>코드가 장황하여 읽히지 않음.</span><span> </span><span>인터페이스에 변화가 생기면 REST Docs 테스트 코드를 수정해야 하는데, 어떤 코드를 수정해야 하는지 빠르게 찾기가 어려웠습니다. 즉 해당 코드가 무엇을 수행하는지 한번에 읽기가 힘들고, 이 코드 수행 결과가 어떤 docs를 만들어낼지 단번에 떠올리기 어렵다는 단점이 있었습니다.</span></span></span></li></ol><p id=\"e157b22e-9f7a-48d5-bb73-0e12d65d4b61\"><span><span><span>첫 번째 단점은 기존의 다른 코드로부터 복붙으로 시간을 좀 줄여낼 수는 있었지만, 두 번째 단점은 참 신경 쓰였습니다. 저는 JSON과 같은 간결한 구조로부터 docs를 테스트하는 코드가 만들어지길 원했습니다.</span></span></span></p><h2 id=\"349be152-810b-418b-9d94-d94d6416ffe5\"><span><span><span>Kotlin으로 DSL 만들기</span></span></span></h2><p id=\"e8af03a2-4691-4e6c-a9e5-2204f7585536\"><span><span><span>다행히도 Kotlin은 여러 함수 선언 방식이 존재하여서, 이런 문제를 풀기에 매우 좋습니다. Kotlin의 테스트 코드 라이브러리인 Kotest와 MockK이 대표적인 사례라고 생각합니다.</span></span></span></p><h3 id=\"5edc140b-b1d2-4978-ad58-c03e252c5477\"><span><span><span>infix 함수</span></span></span></h3><p id=\"79fd8fb3-d073-4b2c-a743-b1e35ffd6f0d\"><span><span><a href=\"https://kotlinlang.org/docs/functions.html#infix-notation\" rel=\"noreferrer noopener\" target=\"_blank\">Infix Notation (kotlinlang.org)</a></span></span></p><p id=\"ae1e503c-cc45-4069-93a0-3b7dc6e14bf5\"><span><span><span>잘 만들어진 DSL은 인간의 자연어를 사용하듯이 자연스럽게 쓰고 읽힐 수 있어야 한다고 생각합니다. Kotlin의 infix notation은 이 목표를 달성하기에 최적의 도구입니다.</span></span></span></p><figure id=\"bd86096d-8a29-4faa-8d83-f44e46f87b18\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/901aa785-fe35-43d8-b89a-cbcfa4bea8bb\"/></figure><p id=\"e32ed4e4-3e28-4fbe-9000-afc71a9eb512\"><span><span><code>\"data.businessId\" type NUMBER</code><span>는 </span><code>\"data.businessId\".type(NUMBER)</code><span>와 동일한 효과를 낳습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>infix </span><span>fun </span><span>String</span>.<span>type</span><span>(</span>                    <span>// (1)</span>\n    <span>docsFieldType</span><span>:</span> DocsFieldType\n<span>)</span><span>:</span> <span>Field </span><span>{</span>                                <span>// (2)</span>\n    <span>...</span>                                   <span>// (3)</span>\n<span>}</span></code></pre></div></div></div></div><ul><li id=\"1efde866-30da-43f8-8519-66de522d0456\"><span><span><span>(1):</span></span></span><div><ul><li id=\"df070e97-c9b6-4ec4-a6ea-10b3036f0443\"><span><span><span>infix notation으로 해당 함수를 선언해줍니다.</span></span></span></li><li id=\"6be11860-dbf3-46bf-864c-96cbba972db7\"><span><span><span>type이라는 함수는 String을 receiver로 받는 함수입니다.</span></span></span></li><li id=\"56bdbbc3-ee4e-40b5-9307-3217c681a06e\"><span><span><span>파라미터는 docsFieldType 하나만 받습니다 (</span><code>DocsFieldType</code><span>는 아래에서 서술합니다.)</span></span></span></li></ul></div></li><li id=\"0dc96163-fdc0-49d5-9cfc-c515ac2ace27\"><span><span><span>(2):</span><span> 원래 restdocs가 제공하던 FieldDescriptor를 유연하게 다루기 위해 Field라는 Wrapper 클래스를 정의합니다.</span></span></span></li><li id=\"f3775ea4-4cd0-4963-94ee-d4e0e5e5aa35\"><span><span><span>(3):</span><span> 원래의 RestDocs를 만들던 동작을 수행합니다</span></span></span></li></ul><p id=\"d2200de0-9451-4a6c-aebb-0380c0f5c519\"><span><span><span>infix 함수를 사용할때는 제한사항이 있습니다.</span></span></span></p><ul><li id=\"c969d17c-95bb-4c2d-b64f-6e6b96887c68\"><span><span><span>호출할때는 receiver와 parameter가 명시적으로 있어야 함 (this로 암시적인 전달 불가능)</span></span></span></li><li id=\"d1965126-a5c7-428c-83d7-ded1211cb53a\"><span><span><span>parameter는 하나여야 함 (default value도 지정할 수 없음)</span></span></span></li></ul><p id=\"0d3fc574-e721-498d-92c2-bc621fde0f4f\"><span><span><span>그래야만 \"data\" type OBJECT 처럼 간결한 구조를 만들어 낼 수 있기 때문입니다.</span></span></span></p><h3 id=\"4f0e33c6-36e7-43c1-a790-c9460e7892ab\"><span><span><span>DocsFieldType</span></span></span></h3><p id=\"4215666c-6622-4188-9b8c-21d1632e6e39\"><span><span><span>REST Docs에서는 응답, 요청 필드의 type을 JsonFieldType으로서 구분합니다.</span></span></span></p><p id=\"8d40fd1b-88e2-47b9-82fb-62b5e4e217bd\"><span><span><span>여기에 저는 자주 사용하는 format인 Date, DateTime을 쉽게 정의할 방법을 찾고 싶었고, enum class도 간단히 전달하여 어떤 필드가 사용될 수 있는지 docs에 쉽게 표기하고 싶었습니다. date, datetime, enum은 모두 JsonFieldType.STRING이지만 format과 sample이 다르게 표시될 필요가 있는 특이 케이스이기 때문입니다.</span></span></span></p><figure id=\"f083c371-a5c6-4263-a6cf-c536c730c513\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/563e11df-c256-4ea0-a02e-a09b83e26ee5\"/></figure><p id=\"70ea9437-4ae8-4f8f-a0dc-00a4e1dae6a4\"><span><span><span>이런 식으로 정의한다면 아래 예시와 같이 간단하게 </span><code>Field</code><span>를 생성해내면서 </span><code>DocsFieldType</code><span>을 정의해낼 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>\"data\"</span> <span>type </span><span>OBJECT</span>\n<span>\"id\"</span> <span>type </span><span>NUMBER</span>\n<span>\"createdAt\"</span> <span>type </span><span>DATETIME</span></code></pre></div></div></div></div><h3 id=\"90fb48ed-2ba0-40b6-9cbc-5de5444c70a8\"><span><span><span>DocsFieldType - enum</span></span></span></h3><p id=\"3bdc3089-018d-48f1-8def-74f09614643a\"><span><span><span>다만 enum을 정의하고 싶을때는 조금 디테일이 필요합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>\"companyType\"</span> <span>type </span><span>STRING </span><span>example </span>CompanyType<span>:</span><span>:</span><span>class</span></code></pre></div></div></div></div><p id=\"c6a0aa8f-9d0f-4399-a54b-d8ffb3f398fb\"><span><span><span>로도 선언할 수는 있지만 매번 example을 호출해주는 건 조금 귀찮습니다. 어차피 enum이 string이라는건 누구나 다 아는 사실인데 두 함수 호출을 나눠야 할까요?</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>\"companyType\"</span> <span>type </span><span>ENUM</span><span>(</span><span>CompanyType</span><span>:</span><span>:</span><span>class</span><span>)</span></code></pre></div></div></div></div><p id=\"1fa79c76-c5bc-4a93-8709-176d355ca6d4\"><span><span><span>훨씬 간결해졌습니다.</span></span></span></p><p id=\"39f8f5ea-fb16-4ac9-ace7-9b01997a2725\"><span><span><span>다음과 같이 DocsFieldType을 확장한 sealedSubclass를 만든다면 위와 같은 dsl 작성이 가능합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>data </span><span>class</span> ENUM&lt;T <span>:</span> <span>Enum</span>&lt;<span>T</span>&gt;&gt;<span>(</span><span>val </span>enums<span>:</span> <span>Collection</span>&lt;<span>T</span>&gt;<span>)</span> <span>:</span> DocsFieldType<span>(</span><span>JsonFieldType</span>.<span>STRING</span><span>)</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>clazz</span><span>:</span> KClass&lt;<span>T</span>&gt;<span>)</span> <span>:</span> <span>this</span><span>(</span><span>clazz</span>.<span>java</span>.<span>enumConstants</span>.<span>asList</span><span>(</span><span>)</span><span>)</span>   <span>// (1)</span>\n<span>}</span></code></pre></div></div></div></div><ul><li id=\"1b33a97b-c2d9-4a3c-b4df-059c73e7b5f0\"><span><span><span>(1): secondary constructor 덕분에 모든 enum값이 아니라 특정 조건에 맞는 enum 값을 collection으로 넘길수도 있습니다.</span></span></span><div><ul><li id=\"60b4c5c4-a60e-49ba-a06e-01b1b98ea8b4\"><span><span><span>ex) 개인사업자에 해당하는 companyType만 해당 필드에 존재할 수 있을 때 </span><code>\"individualCompanyType\" type ENUM(CompanyType.values().filter { it.isIndividual() })</code></span></span></li></ul></div></li></ul><p id=\"abb172fa-e9cc-4d6e-b112-cf7839d67655\"><span><span><span>이로써 type infix 함수는 아래와 같이 완성할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>infix </span><span>fun </span><span>String</span>.<span>type</span><span>(</span><span>docsFieldType</span><span>:</span> DocsFieldType<span>)</span><span>:</span> <span>Field </span><span>{</span>\n    <span>val </span><span>field</span> = <span>createField</span><span>(</span><span>this</span><span>,</span> <span>docsFieldType</span>.<span>type</span><span>)</span>\n    <span>when</span> <span>(</span><span>docsFieldType</span><span>)</span> <span>{</span>\n        <span>is </span><span>DATE</span> -&gt; <span>field </span><span>formattedAs </span><span>RestDocsUtils</span>.<span>DATE_FORMAT</span>\n        <span>is </span><span>DATETIME</span> -&gt; <span>field </span><span>formattedAs </span><span>RestDocsUtils</span>.<span>DATETIME_FORMAT</span>\n        <span>else</span> -&gt; <span>{</span><span>}</span>\n    <span>}</span>\n    <span>return</span> <span>field</span>\n<span>}</span>\n\n<span>infix </span><span>fun</span> &lt;<span>T</span> <span>:</span> <span>Enum</span>&lt;<span>T</span>&gt;&gt; <span>String</span>.<span>type</span><span>(</span><span>enumFieldType</span><span>:</span> ENUM&lt;<span>T</span>&gt;<span>)</span><span>:</span> Field <span>{</span>\n    val <span>field</span> = <span>createField</span><span>(</span><span>this</span><span>,</span> <span>JsonFieldType</span>.<span>STRING</span><span>,</span> <span>false</span><span>)</span>\n    <span>field</span>.<span>format</span> = <span>EnumFormattingUtils</span>.<span>enumFormat</span><span>(</span><span>enumFieldType</span>.<span>enums</span><span>)</span>\n    <span>return</span> <span>field</span>\n<span>}</span>\n\n<span>private </span><span>fun </span><span>createField</span><span>(</span><span>value</span><span>:</span> String<span>,</span> <span>type</span><span>:</span> JsonFieldType<span>,</span> <span>optional</span><span>:</span> Boolean<span>)</span><span>:</span> <span>Field </span><span>{</span>\n    <span>val </span><span>descriptor</span> = <span>PayloadDocumentation</span>.<span>fieldWithPath</span><span>(</span><span>value</span><span>)</span>\n        .<span>type</span><span>(</span><span>type</span><span>)</span>\n        .<span>attributes</span><span>(</span><span>RestDocsUtils</span>.<span>emptySample</span><span>(</span><span>)</span><span>,</span> <span>RestDocsUtils</span>.<span>emptyFormat</span><span>(</span><span>)</span><span>,</span> <span>RestDocsUtils</span>.<span>emptyDefaultValue</span><span>(</span><span>)</span><span>)</span>\n        .<span>description</span><span>(</span><span>\"\"</span><span>)</span>\n\n    <span>if</span> <span>(</span><span>optional</span><span>)</span> <span>descriptor</span>.<span>optional</span><span>(</span><span>)</span>\n\n    <span>return</span> <span>Field</span><span>(</span><span>descriptor</span><span>)</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><h3 id=\"9c62d40c-8a74-4c34-b216-4083a94513b8\"><span><span><span>Field 클래스에서 DSL 확장하기</span></span></span></h3><figure id=\"5ff55f80-e9cb-4ac0-b72c-52247933af5d\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/8776c13f-4a18-4b37-ae01-7f939098037f\"/></figure><p id=\"33b364bf-6651-434a-a410-111102f33981\"><span><span><span>이제 좀 더 욕심을 내봅시다. 위 예시처럼 얼마든지 함수 호출을 chaining할 수 있습니다.</span></span></span></p><p id=\"7cffd722-919e-46fa-91a5-d046c00401d7\"><span><span><span>어떤가요? 괄호로 계속 호출하는 것보다 좀 더 직관적이지 않나요?</span></span></span></p><p id=\"8614acbc-dfe2-413b-b49b-fce6baf3e994\"><span><span><span>type이라는 infix function이 </span><code>Field</code><span>를 반환할 수 있도록 했으니, </span><code>Field</code><span>에서 더 많은 DSL을 호출하도록 확장할 수 있게 되었습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>open </span><span>class</span> Field<span>(</span>\n    <span>val </span>descriptor<span>:</span> FieldDescriptor<span>,</span>\n<span>)</span> <span>{</span>\n    <span>val </span>isIgnored<span>:</span> <span>Boolean</span> = <span>descriptor</span>.<span>isIgnored</span>\n    <span>val </span>isOptional<span>:</span> <span>Boolean</span> = <span>descriptor</span>.<span>isOptional</span>\n\n    <span>protected </span><span>open </span><span>var</span> <span>default</span><span>:</span> <span>String</span>\n        <span>get</span><span>(</span><span>)</span> = <span>descriptor</span>.<span>attributes</span>.<span>getOrDefault</span><span>(</span><span>RestDocsAttributeKeys</span>.<span>KEY_DEFAULT_VALUE</span><span>,</span> <span>\"\"</span><span>)</span> <span>as</span> String\n        <span>set</span><span>(</span><span>value</span><span>)</span> <span>{</span>\n            <span>descriptor</span>.<span>attributes</span><span>(</span><span>RestDocsUtils</span>.<span>defaultValue</span><span>(</span><span>value</span><span>)</span><span>)</span>\n        <span>}</span>\n\n    <span>protected </span><span>open </span><span>var</span> <span>format</span><span>:</span> String\n        <span>get</span><span>(</span><span>)</span> = <span>descriptor</span>.<span>attributes</span>.<span>getOrDefault</span><span>(</span><span>RestDocsAttributeKeys</span>.<span>KEY_FORMAT</span><span>,</span> <span>\"\"</span><span>)</span> <span>as</span> String\n        <span>set</span><span>(</span><span>value</span><span>)</span> <span>{</span>\n            <span>descriptor</span>.<span>attributes</span><span>(</span><span>RestDocsUtils</span>.<span>customFormat</span><span>(</span><span>value</span><span>)</span><span>)</span>\n        <span>}</span>\n\n    <span>protected </span><span>open </span><span>var</span> <span>sample</span><span>:</span> String\n        <span>get</span><span>(</span><span>)</span> = <span>descriptor</span>.<span>attributes</span>.<span>getOrDefault</span><span>(</span><span>RestDocsAttributeKeys</span>.<span>KEY_SAMPLE</span><span>,</span> <span>\"\"</span><span>)</span> <span>as</span> String\n        <span>set</span><span>(</span><span>value</span><span>)</span> <span>{</span>\n            <span>descriptor</span>.<span>attributes</span><span>(</span><span>RestDocsUtils</span>.<span>customSample</span><span>(</span><span>value</span><span>)</span><span>)</span>\n        <span>}</span>\n\n  \t<span>open </span><span>infix </span><span>fun </span><span>means</span><span>(</span><span>value</span><span>:</span> String<span>)</span><span>:</span> <span>Field </span><span>{</span>\n        <span>return</span> <span>description</span><span>(</span><span>value</span><span>)</span>\n    <span>}</span>\n\n    <span>open </span><span>infix </span><span>fun </span><span>attributes</span><span>(</span><span>block</span><span>:</span> Field.<span>(</span><span>)</span> -&gt; <span>Unit</span><span>)</span><span>:</span> <span>Field </span><span>{</span>\n        <span>block</span><span>(</span><span>)</span>\n        <span>return</span> <span>this</span>\n    <span>}</span>\n\n    <span>open </span><span>infix </span><span>fun </span><span>withDefaultValue</span><span>(</span><span>value</span><span>:</span> String<span>)</span><span>:</span> <span>Field </span><span>{</span>\n        <span>this</span>.<span>default</span> = <span>value</span>\n        <span>return</span> <span>this</span>\n    <span>}</span>\n\n    <span>open </span><span>infix </span><span>fun </span><span>formattedAs</span><span>(</span><span>value</span><span>:</span> String<span>)</span><span>:</span> <span>Field </span><span>{</span>\n        <span>this</span>.<span>format</span> = <span>value</span>\n        <span>return</span> <span>this</span>\n    <span>}</span>\n\n    <span>open </span><span>infix </span><span>fun </span><span>example</span><span>(</span><span>value</span><span>:</span> String<span>)</span><span>:</span> <span>Field </span><span>{</span>\n        <span>this</span>.<span>sample</span> = <span>value</span>\n        <span>return</span> <span>this</span>\n    <span>}</span>\n\n    <span>open </span><span>infix </span><span>fun </span><span>isOptional</span><span>(</span><span>value</span><span>:</span> Boolean<span>)</span><span>:</span> <span>Field </span><span>{</span>\n        <span>if</span> <span>(</span><span>value</span><span>)</span> <span>descriptor</span>.<span>optional</span><span>(</span><span>)</span>\n        <span>return</span> <span>this</span>\n    <span>}</span>\n\n    <span>open </span><span>infix </span><span>fun </span><span>isIgnored</span><span>(</span><span>value</span><span>:</span> Boolean<span>)</span><span>:</span> <span>Field </span><span>{</span>\n        <span>if</span> <span>(</span><span>value</span><span>)</span> <span>descriptor</span>.<span>ignored</span><span>(</span><span>)</span>\n        <span>return</span> <span>this</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><p id=\"bacee9be-d627-4f0e-8e1e-2d458ea9d152\"><span><span><span>이렇게 얼마든지 코드를 확장해나갈 수 있을뿐더러, 해당 프로젝트에서 사용하는 REST Docs snippet의 attribute를 코드 상으로 좀 더 명확하게 정의할 수 있게 되었습니다.</span></span></span></p><h2 id=\"0ee9a755-d7eb-429f-94a9-2aaa09e6796e\"><span><span><span>마무리</span></span></span></h2><p id=\"4a5cd155-d3af-4e69-af8b-d00e336281dc\"><span><span><span>이 글은 REST Docs의 반복적인 코드를 제거하고, docs의 생성이라는 본래의 목적을 달성하고자 기존 MockMvc 테스트코드 작성법에서 벗어나, REST Docs DSL을 만드는 방식으로 문제를 해결하고자 했습니다.</span></span></span></p><p id=\"8509e212-2028-46ec-bc3a-28563c51130f\"><span><span><span>우리가 흔히 쓰는 gradle configuration 작성 방식인 build.gradle.kts 또한 org.gradle.kotlin.dsl에서 그 선언 방식을 찾아볼 수 있고, MockK이나 Kotest에서도 다양한 방식으로 Kotlin의 장점을 최대한 끌어낸 모습을 확인할 수 있습니다.</span></span></span></p><ul><li id=\"83856967-cf00-4f41-85c2-0d0f49ac1154\"><span><span><span>build.gradle.kts (</span><a href=\"https://github.com/gradle/kotlin-dsl-samples\" rel=\"noreferrer noopener\" target=\"_blank\">https://github.com/gradle/kotlin-dsl-samples</a><span>)</span></span></span></li><li id=\"2e05855d-cab7-431b-9abe-22687185144d\"><span><span><span>MockK의 every(</span><a href=\"https://mockk.io/#dsl-examples\" rel=\"noreferrer noopener\" target=\"_blank\">https://mockk.io/#dsl-examples</a><span>),</span></span></span></li><li id=\"b4698df4-20ce-453f-a091-007a346ce6c5\"><span><span><span>Kotest의 여러 Testing Styles(</span><a href=\"https://kotest.io/docs/framework/testing-styles.html\" rel=\"noreferrer noopener\" target=\"_blank\">https://kotest.io/docs/framework/testing-styles.html</a><span>)</span></span></span></li></ul><p id=\"19511ce8-6ba0-4ee2-acd7-0cf5755c8050\"><span><span><span>혹시나 여러분도 반복적인 작업을 일일히 복붙으로 하고 있다면 여러분의 팀만을 위한 DSL을 만들어보는 건 어떨까요?</span></span></span></p><p id=\"026dcb00-f5f7-45d9-a1d8-b667fe228efa\"><span><span><span>이 REST Docs DSL은 토스페이먼츠 *</span><span>엔지니어링 데이</span><span>에 장태영(Server Developer, taeyoung.jang@tosspayments.com)님과 함께 만들었습니다.</span></span></span></p><ul><li id=\"f3f8ca05-387b-4386-b583-0aca8a823b78\"><span><span><span>토스페이먼츠에서는 매주 목요일에 엔지니어링 데이를 진행하고 있어요. 이 시간에는 평소 업무에 병목이 되는 문제들을 해결하거나, 인프라를 개선하는 등의 작업을 진행합니다.</span></span></span></li></ul></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "9": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling.png\"/><h1>에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/gyuju-han.png\"/><div><div><h3>한규주</h3><h3>ㆍ<!-- -->Server Developer</h3></div><div>2022. 5. 14</div></div></section></header><div><h2 id=\"f7b96812-350f-4b4e-950b-2c2b2b9b527d\"><span><span><span>TL;DR</span></span></span></h2><ol><li id=\"f3488903-6ccd-405d-8250-dc3642dc51d0\"><span><span><code>Result</code><span>를 이해한다면, MSA 환경에서 에러가 전파되지 않도록 막을 수 있습니다.</span></span></span></li><li id=\"967b6ac4-6a5e-4ee9-864b-b53a56e76ba2\"><span><span><code>runCatching</code><span>과 </span><code>Result</code><span>를 사용하면 에러 핸들링을 클라이언트에게 위임할 수 있습니다.</span></span></span></li></ol><h3 id=\"e488cd86-c2f7-488f-bd30-a1afc59d257a\"><span><span><span>예제: 로그인 요청을 전달하는 서비스 흐름에서 에러 처리하기</span></span></span></h3><p id=\"5dabf9c7-3b3e-47e2-9a28-50084a2ec413\"><span><span><span>아래와 같은 서비스 호출 흐름이 있다고 가정해보겠습니다.</span></span></span></p><figure id=\"f654c81c-01d7-4034-992f-c74939e4274f\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/cf75c34d-feeb-4909-a200-8119c0ef7fa6\"/></figure><p id=\"4c6c7e58-c24c-4242-bb0a-05b5b657ad94\"><span><span><span>Server A 입장에서는 Server B에서 발생하는 에러 처리를 해야하는 고민에 빠집니다.</span></span></span></p><p id=\"14248c43-794e-46ef-99ce-40893301cecd\"><span><span><span>API를 호출하는 코드에서 API의 에러 응답에 따른 비즈니스 로직을 다르게 가져가고 싶은 경우가 있습니다. 예를 들어 위 사례에서 비밀번호가 틀리거나 이메일 주소가 틀린 경우 이 에러를 캐치해서 다른 메세지를 던지고 싶을 수 있고, 어떤 코드에서는 그 에러를 무시하고 다른 로직을 수행하고 싶을 수 있습니다.</span></span></span></p><p id=\"7dccc5d0-c63c-4479-ad38-a8c9136cbb4e\"><span><span><span>에러 처리를 API Client 단에서 하지 않고 다른 클래스에 위임을 하고 싶은 이런 경우에는 어떤 방법을 사용할 수 있을지 아래 코드 예시로 알아보겠습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// API client</span>\n@<span>FeignClient</span>\n<span>internal </span><span>interface </span><span>LoginApi </span><span>{</span>\n  @<span>PostMapping</span>\n  <span>fun </span><span>login</span><span>(</span>\n    @<span>RequestBody</span> request<span>:</span> <span>LoginRequestDto</span>\n  <span>)</span><span>:</span> OtherServiceResponse&lt;<span>LoginResponseDto</span>&gt;\n<span>}</span>\n\n@<span>Component</span>\n<span>class</span> LoginApiClient <span>internal </span><span>constructor</span><span>(</span>\n  <span>private </span>val<span> </span>loginApi<span>:</span> <span>LoginApi</span>\n<span>)</span> <span>{</span>\n  <span>fun </span><span>login</span><span>(</span><span>request</span><span>:</span> LoginRequestDto<span>)</span><span>:</span> <span>LoginResult </span><span>{</span>\n    <span>return</span> <span>loginApi</span>.<span>login</span><span>(</span><span>request</span><span>)</span>.<span>result</span>.<span>toResult</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n\n@<span>Service</span>\n<span>class</span> LoginService<span>(</span>\n  <span>private </span><span>val </span>loginApiClient<span>:</span> <span>LoginApiClient</span>\n<span>)</span> <span>{</span>\n  <span>fun </span><span>login</span><span>(</span><span>id</span><span>:</span> String<span>,</span> <span>pw</span><span>:</span> String<span>)</span><span>:</span> <span>LoginResult </span><span>{</span>\n    <span>return</span> <span>try</span> <span>{</span>\n      <span>loginApiClient</span>.<span>login</span><span>(</span><span>LoginRequestDto</span><span>(</span><span>id</span><span>,</span> <span>pw</span><span>)</span><span>)</span>\n    <span>}</span> <span>catch</span> <span>{</span>\n      <span>// 에러 핸들링</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><p id=\"5571afb1-fb47-41a2-9719-3d7952a12aa6\"><span><span><span>이 경우에 아래와 같은 두 케이스를 해결하고 싶어집니다.</span></span></span></p><ol><li id=\"a337c351-8acf-4d77-bd69-dd5ed328f8d6\"><span><span><span>이 API를 사용하는 쪽(ex. LoginService)에서 에러 핸들링을 강제하고 싶습니다.</span></span></span></li><li id=\"fdf8d365-0b66-401c-b0bb-c255033dbcac\"><span><span><span>API 호출 로직마다 에러 핸들링을 다른 방식으로 가져가게 하고 싶습니다.</span></span></span><div><ul><li id=\"eef1465a-d9e4-4307-b618-aee3e2b9f51a\"><span><span><span>LoginService가 아닌 다른 호출 로직에서는 에러를 다르게 처리하고 싶을 수 있습니다.</span></span></span></li></ul></div></li></ol><p id=\"80ed287e-07f3-4636-8d5b-d0959e1069d8\"><span><span><span>위 고민을 해결할 방법이 있습니다. 바로 </span><code>Result</code><span>입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Component</span>\n<span>class</span> LoginApiClient <span>internal </span><span>constructor</span><span>(</span>\n  <span>private </span>val<span> </span>loginApi<span>:</span> <span>LoginApi</span>\n<span>)</span> <span>{</span>\n  <span>fun </span><span>login</span><span>(</span><span>request</span><span>:</span> LoginRequestDto<span>)</span><span>:</span> <span>Result</span>&lt;<span>LoginResult</span>&gt; <span>{</span>\n    <span>return </span><span>runCatching </span><span>{</span>\n      <span>loginApi</span>.<span>login</span><span>(</span><span>request</span><span>)</span>.<span>result</span>.<span>toResult</span><span>(</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n@<span>Service</span>\n<span>class</span> LoginService<span>(</span>\n  <span>private </span><span>val </span>loginApiClient<span>:</span> <span>LoginApiClient</span>\n<span>)</span> <span>{</span>\n  <span>fun </span><span>login</span><span>(</span><span>id</span><span>:</span> String<span>,</span> <span>pw</span><span>:</span> String<span>)</span><span>:</span> <span>LoginResult </span><span>{</span>\n    <span>return</span> <span>loginApiClient</span>.<span>login</span><span>(</span><span>LoginRequestDto</span><span>(</span><span>id</span><span>,</span> <span>pw</span><span>)</span><span>)</span>\n      .<span>onFailure</span> <span>{</span>\n        <span>// 에러 핸들링</span>\n      <span>}</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><h3 id=\"6a9524f9-95fa-4e49-bd10-e2c2a187060b\"><span><span><span>코틀린의 runCatching</span></span></span></h3><blockquote id=\"858e6abe-3f30-4395-a014-19f6675b2cf0\"><span><span><span>💡 이미 runCatching을 잘 사용하고 있다면 넘겨도 좋습니다.</span></span></span></blockquote><p id=\"1e35da25-c1e0-4ec0-bcb5-aa4ac4004684\"><span><span><span>위 코드를 이해하기에 앞서서 </span><code>runCatching</code><span>을 알아둘 필요가 있습니다. 코틀린은 물론 자바의 </span><code>try ... catch</code><span>를 동일하게 지원하지만 이와는 조금 다른 방법으로 에러 핸들링을 할 수도 있습니다.</span></span></span></p><h3 id=\"daca8eac-3087-46fb-9080-fa684706c816\"><span><span><span>예제</span></span></span></h3><p id=\"38dbad9c-72ae-438a-bd70-6c6b6f06ea85\"><span><span><span>아래 요구사항이 있다고 가정합시다.</span></span></span></p><ul><li id=\"4f13dc1b-a64d-42c1-beb4-02eaecbf483d\"><span><span><code>LoginApiClient</code><span> 호출 시 </span><code>LoginException</code><span>이 발생했는데,</span></span></span><div><ul><li id=\"8024484d-df1b-4283-910f-0485c911e8fe\"><span><span><code>errorCode</code><span>가 </span><code>INVALID_PASSWORD</code><span> 인 경우 예외를 발생시키지 않고 </span><code>null</code><span>을 반환한다.</span></span></span></li></ul></div></li><li id=\"e2d45149-d027-4de8-ba57-e1275b78bf7b\"><span><span><span>그 외 모든 에러 상황에서는 예외를 발생시킨다.</span></span></span></li></ul><h3 id=\"ec95020b-f338-473f-98c9-d1fdaa007e98\"><span><span><span>try ... catch를 사용했을때</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>try</span> <span>{</span>\n  <span>loginApiClient</span>.<span>login</span><span>(</span><span>request</span><span>)</span>\n<span>}</span> <span>catch</span> <span>(</span><span>e</span><span>:</span> LoginException<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>e</span>.<span>errorCode</span> == <span>\"INVALID_PASSWORD\"</span><span>)</span> <span>{</span>\n    <span>return</span> <span>null</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>throw</span> <span>e</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"ad3afee0-174d-4bda-880e-e23c72ef6cea\"><span><span><span>Java에서 위와 같이 작성하는 코드를 runCatching을 사용하면 아래처럼 표현할 수 있습니다.</span></span></span></p><p id=\"78668678-4491-428f-bd9b-703c6d39a546\"><span><span><span>runCatching을 사용했을 때</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>return</span> <span>runCatching</span> <span>{</span>\n  <span>loginApiClient</span>.<span>login</span><span>(</span><span>request</span><span>)</span>\n<span>}</span>.<span>onFailure </span><span>{</span> <span>e</span> -&gt;\n  <span>if</span> <span>(</span><span>e</span>.<span>errorCode</span> != <span>\"INVALID_PASSWORD\"</span><span>)</span> <span>throw</span> <span>e</span>\n<span>}</span>.<span>getOrNull</span><span>(</span><span>)</span></code></pre></div></div></div></div><h3 id=\"ffee67b5-0dee-45a6-a1bc-562d78cd4234\"><span><span><span>kotlin.runCatching</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>InlineOnly</span>\n@<span>SinceKotlin</span><span>(</span><span>\"1.3\"</span><span>)</span>\n<span>public </span><span>inline </span><span>fun</span> &lt;<span>R</span>&gt; <span>runCatching</span><span>(</span><span>block</span><span>:</span> <span>(</span><span>)</span> -&gt; <span>R</span><span>)</span><span>:</span> <span>Result</span>&lt;<span>R</span>&gt; <span>{</span>\n  <span>return </span><span>try</span> <span>{</span>\n    <span>Result</span>.<span>success</span><span>(</span><span>block</span><span>(</span><span>)</span><span>)</span>\n  <span>}</span> <span>catch</span> <span>(</span><span>e</span><span>:</span> Throwable<span>)</span> <span>{</span>\n    <span>Result</span>.<span>failure</span><span>(</span><span>e</span><span>)</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"dee90bbd-bfaa-4576-b99f-58a4e2e5cd65\"><span><span><code>try..catch</code><span> 로직을 그대로 사용하지만 </span><code>Result</code><span>로 감싸서 반환하는 것을 알 수 있습니다.</span></span></span></p><ul><li id=\"4d50bcce-30ad-41e2-98d2-e4231dcaff23\"><span><span><span>에러가 발생하지 않았을 때에는 </span><code>Result.success</code><span> 반환</span></span></span></li><li id=\"992a5d3e-385c-4902-ada7-fe9e93113af4\"><span><span><span>에러가 발생했을 때에는 </span><code>Result.failure</code><span> 반환</span></span></span></li></ul><h3 id=\"8281f5ad-f012-4d63-8cc7-29a0ca93bf85\"><span><span><span>Result가 뭔가요?</span></span></span></h3><p id=\"da248f0b-b241-43ab-9b30-4f92d91a836a\"><span><span><span>Result가 무엇인지 알아보기 위해서 Kotlin 1.3 표준 라이브러리의 코드를 살펴봅시다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>SinceKotlin</span><span>(</span><span>\"1.3\"</span><span>)</span>\n@<span>JvmInline</span>\n<span>public </span><span>value </span><span>class</span> Result&lt;out T&gt; @<span>PublishedApi</span> <span>internal </span><span>constructor</span><span>(</span>\n  @<span>PublishedApi</span>\n  <span>internal </span><span>val </span>value<span>:</span> <span>Any</span>?\n<span>)</span> <span>:</span> Serializable <span>{</span>\n\n  public <span>val </span>isSuccess<span>:</span> <span>Boolean </span><span>get</span><span>(</span><span>)</span> = <span>value</span> !<span>is </span><span>Failure</span>\n\n  <span>public </span><span>val </span>isFailure<span>:</span> <span>Boolean </span><span>get</span><span>(</span><span>)</span> = <span>value </span><span>is </span><span>Failure</span>\n\n  <span>/* ... */</span>\n\n  <span>public </span><span>companion </span><span>object </span><span>{</span>\n    @<span>Suppress</span><span>(</span><span>\"INAPPLICABLE_JVM_NAME\"</span><span>)</span>\n    @<span>InlineOnly</span>\n    @<span>JvmName</span><span>(</span><span>\"success\"</span><span>)</span>\n    <span>public </span><span>inline </span><span>fun</span> &lt;<span>T</span>&gt; <span>success</span><span>(</span><span>value</span><span>:</span> T<span>)</span><span>:</span> <span>Result</span>&lt;<span>T</span>&gt; =\n      <span>Result</span><span>(</span><span>value</span><span>)</span>\n\n    @<span>Suppress</span><span>(</span><span>\"INAPPLICABLE_JVM_NAME\"</span><span>)</span>\n    @<span>InlineOnly</span>\n    @<span>JvmName</span><span>(</span><span>\"failure\"</span><span>)</span>\n    <span>public </span><span>inline </span><span>fun</span> &lt;<span>T</span>&gt; <span>failure</span><span>(</span><span>exception</span><span>:</span> Throwable<span>)</span><span>:</span> <span>Result</span>&lt;<span>T</span>&gt; =\n      <span>Result</span><span>(</span><span>createFailure</span><span>(</span><span>exception</span><span>)</span><span>)</span>\n  <span>}</span>\n\n  <span>internal </span><span>class</span> Failure<span>(</span>\n    @<span>JvmField</span>\n    <span>val</span> exception<span>:</span> Throwable\n  <span>)</span> <span>:</span> Serializable <span>{</span>\n    <span>/* ... */</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><p id=\"452105e0-ee15-4db3-bd4c-a7d7b582b3e2\"><span><span><span>즉, </span><code>Result</code><span>의 </span><code>value</code><span>는</span></span></span></p><ul><li id=\"6fc12be7-28f8-4487-ac1b-ac6f0c9b4888\"><span><span><span>성공일 경우 </span><code>T</code><span>를 타입으로 하는 값을 가지게 되고</span></span></span></li><li id=\"31c88b60-21a9-4887-a9e6-a3f8cc90074e\"><span><span><span>실패일 경우는 </span><code>Failure</code><span>를 wrapper class로 하는 </span><code>exception</code><span>을 값으로 가지게 됩니다.</span></span></span></li></ul><p id=\"1cd69d67-1b2f-4cce-8576-3aad975d34df\"><span><span><code>Result</code><span>가 제공하는 함수들은 다음과 같습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>inline </span><span>fun</span> &lt;<span>T</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>getOrThrow</span><span>(</span><span>)</span><span>:</span> <span>T</span>\n\n<span>inline </span><span>fun</span> &lt;<span>R</span><span>,</span> <span>T</span> <span>:</span> <span>R</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>getOrElse</span><span>(</span>\n  <span>onFailure</span><span>:</span> <span>(</span><span>exception</span><span>:</span> Throwable<span>)</span> -&gt; <span>R</span>\n<span>)</span><span>:</span> <span>R</span>\n\n<span>inline </span><span>fun</span> &lt;<span>R</span><span>,</span> <span>T</span> <span>:</span> <span>R</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>getOrDefault</span><span>(</span><span>defaultValue</span><span>:</span> R<span>)</span><span>:</span> <span>R</span>\n\n<span>inline </span><span>fun</span> &lt;<span>R</span><span>,</span> <span>T</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>fold</span><span>(</span>\n  <span>onSuccess</span><span>:</span> <span>(</span><span>value</span><span>:</span> T<span>)</span> -&gt; <span>R</span><span>,</span>\n  <span>onFailure</span><span>:</span> <span>(</span><span>exception</span><span>:</span> Throwable<span>)</span> -&gt; <span>R</span>\n<span>)</span><span>:</span> <span>R</span>\n\n<span>inline </span><span>fun</span> &lt;<span>R</span><span>,</span> <span>T</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>map</span><span>(</span><span>transform</span><span>:</span> <span>(</span><span>value</span><span>:</span> T<span>)</span> -&gt; <span>R</span><span>)</span><span>:</span> <span>Result</span>&lt;<span>R</span>&gt;\n\n<span>fun</span> &lt;<span>R</span><span>,</span> <span>T</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>mapCatching</span><span>(</span><span>transform</span><span>:</span> <span>(</span><span>value</span><span>:</span> T<span>)</span> -&gt; <span>R</span><span>)</span><span>:</span> <span>Result</span>&lt;<span>R</span>&gt;\n\n<span>inline </span><span>fun</span> &lt;<span>R</span><span>,</span> <span>T</span> <span>:</span> <span>R</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>recover</span><span>(</span><span>transform</span><span>:</span> <span>(</span><span>exception</span><span>:</span> Throwable<span>)</span> -&gt; <span>R</span><span>)</span><span>:</span> <span>Result</span>&lt;<span>R</span>&gt;\n\n<span>inline </span><span>fun</span> &lt;<span>T</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>onFailure</span><span>(</span><span>action</span><span>:</span> <span>(</span><span>exception</span><span>:</span> Throwable<span>)</span> -&gt; <span>Unit</span><span>)</span><span>:</span> <span>Result</span>&lt;<span>T</span>&gt;\n\n<span>inline </span><span>fun</span> &lt;<span>T</span>&gt; <span>Result</span>&lt;<span>T</span>&gt;.<span>onSuccess</span><span>(</span><span>action</span><span>:</span> <span>(</span><span>value</span><span>:</span> T<span>)</span> -&gt; <span>Unit</span><span>)</span><span>:</span> <span>Result</span>&lt;<span>T</span>\n\n</code></pre></div></div></div></div><h3 id=\"206b7fa0-ef20-40e6-8275-457f2fe2bc47\"><span><span><span>Result 사용 예시</span></span></span></h3><p id=\"4e2d6e00-b882-4d00-b0cf-6b79354a6fa7\"><span><span><code>runCatching</code><span>은 </span><code>Result&lt;T&gt;</code><span>를 반환하게 되는데, </span><code>Result</code><span>가 제공하는 함수를 이용해서 다양하게 활용할 수 있습니다.</span></span></span></p><h3 id=\"5271ed8d-d767-43e4-b790-46f7c94e48dd\"><span><span><span>에러를 무시하고 null 반환</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>val </span><span>response</span> = <span>runCatching</span> <span>{</span>\n  <span>login</span><span>(</span><span>)</span>\n<span>}</span>.<span>getOrNull</span><span>(</span><span>)</span></code></pre></div></div></div></div><h3 id=\"e3de808a-e081-4841-878d-582188bbdfc3\"><span><span><span>기본값 반환</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>val </span><span>response</span> = <span>runCatching</span> <span>{</span>\n  <span>login</span><span>(</span><span>)</span>\n<span>}</span>.<span>getOrDefault</span><span>(</span><span>emptyList</span><span>(</span><span>)</span><span>)</span></code></pre></div></div></div></div><h3 id=\"5e8fc46a-2324-436a-8d35-ea99e36d0e2a\"><span><span><span>에러 발생 시 다른 동작 수행</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>val </span><span>response</span> = <span>runCatching</span> <span>{</span>\n  <span>login</span><span>(</span><span>)</span>\n<span>}</span>.<span>getOrElse </span><span>{</span> <span>ex</span> -&gt;\n  <span>logger</span>.<span>warn</span><span>(</span><span>ex</span><span>)</span> <span>{</span> <span>\"에러 발생\"</span> <span>}</span>\n\n  <span>// 에러를 던지고 싶다면</span>\n  <span>throw</span> <span>ex</span>\n<span>}</span></code></pre></div></div></div></div><h3 id=\"f6e8eacc-7f86-469b-9094-b8facba0a0fa\"><span><span><span>에러가 발생한 경우에만 해당 에러 객체 반환</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>val </span><span>exception</span> = <span>runCatching</span> <span>{</span>\n  <span>login</span><span>(</span><span>)</span>\n<span>}</span>.<span>exceptionOrNull</span><span>(</span><span>)</span>\n\n<span>// 위에서 받은 에러로 로직 수행</span>\n<span>when</span> <span>(</span><span>exception</span><span>)</span> <span>{</span>\n  <span>/* ... */</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"0a6647f5-3bad-477e-9686-c36dea0fc121\"><span><span><span>에러가 발생하는지 아닌지만 확인하고 싶을 때에도 유용할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>val </span><span>isValidCredential</span> = <span>runCatching</span> <span>{</span> <span>tryLogin</span><span>(</span><span>)</span> <span>}</span>.<span>exceptionOrNull</span><span>(</span><span>)</span> != <span>null</span></code></pre></div></div></div></div><h3 id=\"025f188a-b40c-49a1-b399-b6ca00ba5b97\"><span><span><span>성공/에러 시 각각 특정 동작 수행 후 에러 던지기</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>val </span><span>response</span> = <span>runCatching</span> <span>{</span>\n  <span>login</span><span>(</span><span>)</span>\n<span>}</span>.<span>onSuccess </span><span>{</span>\n  <span>logger</span>.<span>info</span><span>(</span><span>\"성공!\"</span><span>)</span>\n<span>}</span>.<span>onFailure </span><span>{</span>\n  <span>logger</span>.<span>info</span><span>(</span><span>\"실패!\"</span><span>)</span>\n<span>}</span>.<span>getOrThrow</span><span>(</span><span>)</span></code></pre></div></div></div></div><h3 id=\"91b826a7-b104-4ed4-8f7e-ae5f38a3dd60\"><span><span><span>runCatching으로 try .. finally 구현하기</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>runCatching </span><span>{</span>\n  <span>request</span><span>(</span><span>)</span>\n<span>}</span>.<span>also </span><span>{</span>\n  <span>doSomething</span><span>(</span><span>)</span>\n<span>}</span>.<span>getOrThrow</span><span>(</span><span>)</span></code></pre></div></div></div></div><h2 id=\"19b76959-2e9f-4623-a7dd-717c5813efe3\"><span><span><span>Result를 사용해서 예외 처리를 다른 클래스에 위임하기</span></span></span></h2><p id=\"7a80d3c6-a6f9-42b3-85fe-9455ac1477d1\"><span><span><code>runCatching</code><span>을 사용하면 </span><code>Result</code><span>가 제공하는 다양한 함수의 편의에 기댈 수 있다는 것을 배웠습니다.</span></span></span></p><p id=\"2f2a790e-b5e7-4789-a1da-ac67d2dcc293\"><span><span><code>Result</code><span>에 대한 처리를 즉시 하지 않고 함수의 반환 값으로 반환하게 된다면, </span><code>Result</code><span>에 대한 핸들링을 다른 클래스에 위임할 수도 있습니다.</span></span></span></p><h3 id=\"01f85efe-5d52-4e06-8381-7af7df4cb4f5\"><span><span><span>LoginApiClient</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Component</span>\n<span>class</span> LoginApiClient <span>internal </span><span>constructor</span><span>(</span>\n  <span>private </span>val<span> </span>loginApi<span>:</span> <span>LoginApi</span>\n<span>)</span> <span>{</span>\n  <span>fun </span><span>login</span><span>(</span><span>request</span><span>:</span> LoginRequestDto<span>)</span><span>:</span> <span>Result</span>&lt;<span>LoginResult</span>&gt; <span>{</span>\n    <span>return </span><span>runCatching </span><span>{</span>\n      <span>loginApi</span>.<span>login</span><span>(</span><span>request</span><span>)</span>.<span>result</span>.<span>toResult</span><span>(</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><p id=\"627ff819-620c-4eaa-872f-7d69cdaaa0d4\"><span><span><span>Result를 반환하여 다른 클래스가 에러 핸들링을 하도록 위임합니다.</span></span></span></p><h3 id=\"f8489596-fb76-4991-8df8-0de4d6761f45\"><span><span><span>LoginService</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Service</span>\n<span>class</span> LoginService<span>(</span>\n  <span>private </span><span>val </span>loginApiClient<span>:</span> <span>LoginApiClient</span>\n<span>)</span> <span>{</span>\n  <span>fun </span><span>login</span><span>(</span><span>id</span><span>:</span> String<span>,</span> <span>pw</span><span>:</span> String<span>)</span><span>:</span> <span>LoginResult</span>? <span>{</span>\n    <span>return </span>loginApiClient.login<span>(</span><span>LoginRequestDto</span><span>(</span><span>id</span><span>,</span> <span>pw</span><span>)</span><span>)</span>\n      .<span>getOrNull</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><p id=\"a8bc85b6-34e2-4488-bbda-2a84bf423080\"><span><span><span>에러가 발생한 경우 에러를 무시하고 기본값으로 null을 반환합니다.</span></span></span></p><p id=\"6f8cca95-673f-4de4-8a64-166d8fe26f59\"><span><span><span>하지만 아래처럼 다른 컴포넌트에서는 에러를 핸들링하고 싶을 수도 있습니다.</span></span></span></p><h3 id=\"04351a8c-106f-4ff8-a442-1d8bef590f6c\"><span><span><span>PasswordChangeService</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Component</span>\n<span>class</span> PasswordChangeService<span>(</span>\n  <span>private </span><span>val </span>loginApiClient<span>:</span> <span>LoginApiClient</span><span>,</span>\n  <span>private </span><span>val </span>errorStatusWriter<span>:</span> <span>ErrorStatusWriter</span><span>,</span>\n  <span>private </span><span>val </span>passwordChanger<span>:</span> <span>PasswordChanger</span>\n<span>)</span> <span>{</span>\n  <span>fun </span><span>change</span><span>(</span><span>)</span> <span>{</span>\n    <span>loginApiClient</span>.<span>login</span><span>(</span><span>request</span><span>)</span>\n      .<span>onFailure</span> <span>{</span> <span>exception</span> -&gt;\n        <span>errorStatusWriter</span>.<span>write</span><span>(</span><span>exception</span><span>)</span>    <span>// (1)</span>\n      <span>}</span>.<span>onSuccess </span><span>{</span> <span>loginResult</span> -&gt;\n        <span>passwordChanger</span>.<span>change</span><span>(</span><span>loginResult</span><span>)</span>   <span>// (2)</span>\n      <span>}</span>.<span>getOrThrow</span><span>(</span><span>)</span>                          <span>// (3)</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"828b47ff-145e-453b-92ff-6afc1b6a57a0\"><span><span><span>[1] 에러가 발생한 경우 에러를 기록합니다.</span></span></span></p><p id=\"8baa0d05-e47c-4d76-be33-ad688b0bdcb2\"><span><span><span>[2] 성공한 경우 해당 값을 받아서 다른 컴포넌트를 호출합니다.</span></span></span></p><p id=\"afadeb53-18db-4d72-a145-85a1df5fae35\"><span><span><span>→ [1], [2]번 두 케이스는 배타적이고 동시에 일어날 수 없습니다.</span></span></span></p><p id=\"5374af63-6a09-4dd6-b228-8546862f5e2c\"><span><span><span>[3] 그리고 에러인 경우 예외를 발생시킵니다.</span></span></span></p><h2 id=\"89599528-24a5-4101-bc4b-8233632ce866\"><span><span><span>결론</span></span></span></h2><p id=\"3e2bad26-5705-4f64-8e75-2b705de13eb2\"><span><span><span>정리하자면 </span><code>Result</code><span>(runCatching)는 다음의 용도에서 사용할 수 있습니다.</span></span></span></p><ul><li id=\"da501338-26b6-4e74-86b7-f092240c1473\"><span><span><span>외부 서비스에 의존하는 로직이라 예외 발생 가능성이 빈번한 컴포넌트</span></span></span></li><li id=\"55cfe254-7e58-4773-a09e-7182ed1dd274\"><span><span><span>해당 컴포넌트에서 에러가 발생할 수 있다는 것을 클라이언트에게 알려주고 싶을 때, 에러 핸들링을 다른 컴포넌트에 강제하고 위임하고 싶을 때</span></span></span></li><li id=\"aba21ec1-c2a2-424a-91c9-9bf1fce2f98b\"><span><span><span>try ... catch를 쓰고 싶지 않을 때</span></span></span></li></ul></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "10": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/06/techblog-10-test-code.png\"/><h1>테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/gwonsung-yang.jpeg\"/><div><div><h3>양권성</h3><h3>ㆍ<!-- -->Server Developer</h3></div><div>2022. 6. 9</div></div></section></header><div><p id=\"c9a4790a-e638-4c12-8e07-bbfe086ac8a0\"><span><span><span>테스트 코드는 애플리케이션 코드 못지 않게 높은 품질을 유지해야 합니다.</span></span></span></p><p id=\"f8b28bab-975c-48d7-9e1d-905e886f3c2a\"><span><span><span>낮은 품질(이해하기 어려운 코드, 여기저기 깨져있는 테스트)의 테스트는 유지보수가 어렵고 기술부채에 못지 않은 부채로 다가옵니다.</span></span></span></p><p id=\"04576316-6f15-43b3-9522-fbf6e3136b50\"><span><span><span>그래서 테스트 코드의 높은 품질을 유지하기 위해 다양한 Builder, Helper 클래스들이 나오게 되고, 테스트 전용으로 의존성을 추가하기도 합니다. 하지만 이 또한 관리의 대상이며 제대로 관리하지 않으면 중복 코드와 얼기설기 얽힌 의존성 지옥을 맛보게 됩니다.</span></span></span></p><p id=\"2d001387-4434-4409-9a8c-bb7612da2dc7\"><span><span><span>이 포스트에서는 </span><a href=\"https://docs.gradle.org/\" rel=\"noreferrer noopener\" target=\"_blank\">Gradle</a><span>의 </span><a href=\"https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures\" rel=\"noreferrer noopener\" target=\"_blank\">java-test-fixtures 플러그인</a><span>을 사용하여 위 문제를 해결하는 방법에 대해 설명합니다.</span></span></span></p><h2 id=\"1d75e8ea-c041-4206-9e25-e3fc7e41b43e\"><span><span><span>TL;DR</span></span></span></h2><ol><li id=\"5af3ec35-1a48-46b6-80b1-eda7a1569e26\"><span><span><span>Gradle의 java-test-fixtures 플러그인을 사용하면 테스트용으로 작성한 Builder, Helper 클래스 등등을 다른 모듈과 공유할 수 있습니다.</span></span></span></li><li id=\"eb789892-1b9d-43ee-95ba-c1e2eb2d70f8\"><span><span><span>추가적으로 해당 모듈의 테스트 전용 의존성까지 전파시킬 수 있어 각 모듈마다 불필요한 테스트 전용 의존성들을 일일이 추가할 필요가 사라집니다.</span></span></span></li></ol><h2 id=\"f9747a78-6a8d-45bb-b4f3-451f41620b1d\"><span><span><span>프로젝트 구조</span></span></span></h2><p id=\"b4d22861-4001-4a9e-aac7-694834111ecb\"><span><span><span>예제를 이해하기 쉽게 하기 위해 프로젝트 구조(멀티 모듈)를 가정하고 이야기를 진행하겠습니다.</span></span></span></p><figure id=\"ea62ef4d-7b78-4112-866e-eecc77e702b5\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/cbffefaf-63da-4670-86aa-22dfaebb7c7e\"/></figure><ul><li id=\"a6505fbd-6e47-413c-8d6c-d93d32fe7821\"><span><span><span>domain 모듈: 핵심 비즈니스 로직에만 관심이 있는 모듈, 외부(써드파티 라이브러리, DB, HTTP 등등)에 의존하지 않고 온전히 비즈니스 로직에만 관심을 갖고 있는 모듈로써 어떠한 의존성도 가지지 않습니다.</span></span></span></li><li id=\"19c02847-e70c-4b24-be54-23ea2e593494\"><span><span><span>db 모듈: 데이터의 CRUD(저장, 조회, 수정, 삭제)에만 관심이 있는 모듈, 클라이언트의 요구사항을 처리하기 위해 domain 모듈에 의존(</span><a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations\" rel=\"noreferrer noopener\" target=\"_blank\">implementation</a><span>)하고 있습니다.</span></span></span></li></ul><figure id=\"74e32351-8941-424d-9509-0879a6fcaa92\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/ad128d43-43c0-410a-94bc-611fe99ee848\"/></figure><p id=\"c32bba83-b161-4888-a350-98e11031ff30\"><span><span><span>이미지 출처: </span><a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\" rel=\"noreferrer noopener\" target=\"_blank\">Gradle Docs</a></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// db 모듈의 build.gradle.kts</span>\n<span>dependencies </span><span>{</span>\n    <span>implementation</span><span>(</span><span>project</span><span>(</span><span>\":domain\"</span><span>)</span><span>)</span>\n    <span>// 기타 디펜던시들...</span>\n<span>}</span></code></pre></div></div></div></div><ul><li id=\"446851f1-a14d-48a9-818f-8da18ef2ee75\"><span><span><span>application 모듈: 클라이언트의 요청을 받아 처리하는 모듈, 클라이언트의 요구사항을 처리하기 위해 domain 모듈에 의존(implementation)하고 있으며, application 모듈에 main 함수가 존재하기 때문에 데이터 조작(저장, 조회 등등)을 위해 db 모듈에도 의존(</span><a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations\" rel=\"noreferrer noopener\" target=\"_blank\">runtimeOnly</a><span>)하고 있습니다.</span></span></span></li></ul><figure id=\"e966f496-84e6-4d12-81ce-385269691943\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/26b31600-dc3d-4b40-b35c-37a51032b47f\"/></figure><p id=\"a62fe77a-2763-4147-a7dc-0fd8a820e114\"><span><span><span>이미지 출처: </span><a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\" rel=\"noreferrer noopener\" target=\"_blank\">Gradle Docs</a></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// application 모듈의 build.gradle.kts</span>\n<span>dependencies </span><span>{</span>\n    <span>implementation</span><span>(</span><span>project</span><span>(</span><span>\":domain\"</span><span>)</span><span>)</span>\n    <span>runtimeOnly</span><span>(</span><span>project</span><span>(</span><span>\":db\"</span><span>)</span><span>)</span>\n    <span>// 기타 디펜던시들...</span>\n<span>}</span></code></pre></div></div></div></div><h2 id=\"f205cd39-b29d-4491-be8e-6c612383ed16\"><span><span><span>테스트 전용으로 작성한 클래스를 다른 모듈에게 노출시키기</span></span></span></h2><p id=\"23020049-9ca8-47dd-9338-edc2eb8f9dad\"><span><span><span>domain 모듈에 아래와 같은 객체가 있다고 가정해보겠습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>class</span> Order<span>(</span>\n    <span>val </span>id<span>:</span> String<span>,</span>\n    <span>val</span> description<span>:</span> String<span>,</span>\n    <span>val</span> amount<span>:</span> <span>Long</span>\n<span>)</span></code></pre></div></div></div></div><p id=\"d89c898e-cc71-4cc9-bfb4-588faa4059ef\"><span><span><span>테스트에서 위 클래스를 사용해야할 때 객체를 생성하려고 생각하면 매우 번거로워집니다. (공감이 되지 않는다면 파라미터가 10개 정도 된다고 생각해보면 됩니다.)</span></span></span></p><p id=\"1b5773a6-3006-46b8-a281-3159ff7da484\"><span><span><span>이 때 모든 파라미터에 기본값을 넣는 절충안도 존재하는데, 객체의 필수값이 기본값으로 채워진 채 객체가 생성되면 불안정하게 동작할 수 있습니다. 누군가의 실수로 프로덕션에서 객체의 필수값 중 일부가 기본값으로 생성된다면 의도치 않은 동작을 하게 될 수도 있기 때문입니다.</span></span></span></p><p id=\"b75c29f0-68ac-4700-a9d2-cf3713794013\"><span><span><span>따라서 테스트에서 사용할 목적으로 디폴트 값이 들어간 빌더 객체를 만들게 됩니다.</span></span></span></p><ul><li id=\"be25c004-8f5f-4de8-8dd2-802642182cfa\"><span><span><span>참고로 </span><a href=\"https://www.jetbrains.com/idea/\" rel=\"noreferrer noopener\" target=\"_blank\">IntelliJ IDEA</a><span>에서 코틀린 클래스의 빌더를 만들어주는 플러그인은 </span><a href=\"https://plugins.jetbrains.com/plugin/14835-kotlin-builder-generator\" rel=\"noreferrer noopener\" target=\"_blank\">kotlin-builder-generator</a><span>를 사용하면 손 쉽게 만들 수 있습니다.</span></span></span></li></ul><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>data </span><span>class</span> OrderBuilder<span>(</span>\n    <span>val </span>id<span>:</span> String = <span>\"\"</span><span>,</span>\n    <span>val</span> description<span>:</span> String = <span>\"\"</span><span>,</span>\n    <span>val</span> amount<span>:</span> Long = <span>0</span>L\n<span>)</span> <span>{</span>\n    <span>fun </span><span>build</span><span>(</span><span>)</span><span>:</span> <span>Order </span><span>{</span>\n        <span>return</span> <span>Order</span><span>(</span>\n            <span>id</span> = <span>id</span><span>,</span>\n            <span>description</span> = <span>description</span><span>,</span>\n            <span>amount</span> = <span>amount</span>\n        <span>)</span>\n    <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"840e1101-4d6e-4b51-92b7-08e457fb68d9\"><span><span><span>하지만 빌더는 테스트에서만 사용해야하기 때문에 domain/src/test 디렉토리 밑에 생성해야합니다. test가 아닌 main 디렉토리 밑에 존재하게 되면 프로덕션 코드에서 누가 해당 빌더로 온전치 않은 상태의 객체를 생성하고 사용하는 실수를 할 수 있기 때문입니다.</span></span></span></p><p id=\"6a2a0be3-a4ca-41ce-a00a-58d952725770\"><span><span><span>이런 Builder나 Helper 같이 테스트 전용으로 만든 클래스들을 해당 클래스가 존재하는 모듈(domain 모듈)이 아닌 해당 모듈을 의존하고 있는 다른 모듈(domain 모듈에 의존하고 있는 application, db 모듈)의 테스트에서 사용하고 싶다는 니즈가 생겼다고 가정해보겠습니다.</span></span></span></p><p id=\"beee7d02-a8db-447b-85e1-48a3a927d25e\"><span><span><span>하지만 application과 db 모듈에서 domain 모듈에 의존하고 있다고 할지라도 각 모듈의 테스트에서는 OrderBuilder를 import 할 수 없습니다.</span></span></span></p><figure id=\"6c0a1e05-f913-44f5-a035-018258207825\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/acc12cbc-beba-4072-ae76-249499c3fd15\"/></figure><p id=\"a4d9a528-ef99-435f-95c0-c6f42b68455c\"><span><span><span>build된 jar 파일의 압축을 해제했을 때 나오는 결과물을 보면 main 디렉토리 밑에 있는 Order 클래스는 포함하고 있지만, test 디렉토리 밑에 있는 OrderBuilder 클래스는 포함하고 있지 않기 때문입니다.</span></span></span></p><p id=\"9c17a9ac-f6f8-435a-893d-7edba25b7aa7\"><span><span><span>어떻게 생각해보면 당연한 결과입니다.</span></span></span></p><p id=\"9ea31d05-8acf-4078-b683-292a221d938f\"><span><span><span>domain 모듈을 테스트하는데 필요한 정보들은 프로덕션 코드에서는 필요가 없고, 그렇기 때문에 굳이 불필요하게 테스트 전용 클래스들까지 포함시킬 필요는 없기 때문입니다.</span></span></span></p><p id=\"c1044258-3fe4-485e-8c2b-b3cb34d0170a\"><span><span><span>이제 문제를 해결하기 위한 간단한 방법 두 가지를 떠올리게 됩니다.</span></span></span></p><ol><li id=\"21b06947-c02c-49de-8d6f-780949175ac8\"><span><span><span>각 모듈의 test 디렉토리에 빌더를 복사/붙여넣기 합니다. 하지만 이는 코드의 중복을 유발하며 Order 클래스의 변경사항이 생겼을 때 각 모듈에 존재하는 OrderBuilder 클래스를 각각 수정해야한다는 번거로움이 존재합니다.</span></span></span></li><li id=\"d48a5a56-f7d7-4ee6-8ba4-19a3bd44e753\"><span><span><span>Builder/Helper를 모아놓은 별도의 test-data 같은 테스트 전용 모듈을 만들고, 각 모듈에서 test-data 클래스에 의존(testImplementation)하게 만듭니다.</span></span></span></li></ol><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// application/db 모듈의 build.gradle.kts</span>\n<span>dependencies </span><span>{</span>\n    <span>// 기타 디펜던시들...</span>\n    <span>testImplementation</span><span>(</span><span>project</span><span>(</span><span>\":test-data\"</span><span>)</span><span>)</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"806bbb65-eafa-4fd1-a3e3-52f8e0eb99ec\"><span><span><span>하지만 이는 실제 소스코드(Order는 domain 모듈에 존재)와 거리가 멀어지게 만들어(OrderBuilder는 test-data 모듈에 존재) 응집도가 떨어지는 모듈이 나오게 됩니다.</span></span></span></p><p id=\"2d40324a-bcc1-4ee0-af7a-54c1d902d223\"><span><span><span>또한 테스트 전용임에도 불구하고 test-data 모듈의 클래스들을 외부에 노출시켜야하기 때문에 test 디렉토리가 아닌 main 디렉토리에 둬야 하는 점도 약간의 혼란(’main 디렉토리에 있으니까 프로덕션 레벨에서 사용하는 건가…?’ 하는 정도의)을 유발할 수 있습니다.</span></span></span></p><p id=\"7182e361-56ad-4e2f-a0b0-e37f4d5a41b9\"><span><span><span>둘 다 좋은 방법은 아니라는 생각이 듭니다. 이 문제를 해결하기 위한 빛과 소금과 같은 존재가 있습니다.</span></span></span></p><h3 id=\"666660d1-f2c2-4165-94c6-4a62ea1faa06\"><span><span><span>구세주: java-test-fixtures 플러그인</span></span></span></h3><p id=\"0eae1046-7925-434f-a3d9-5030eeef39f5\"><span><span><a href=\"https://docs.gradle.org/\" rel=\"noreferrer noopener\" target=\"_blank\">Gradle</a><span>에는 이런 문제를 해결하고자 </span><a href=\"https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures\" rel=\"noreferrer noopener\" target=\"_blank\">java-test-fixtures 플러그인</a><span>이 존재합니다.</span></span></span></p><p id=\"aa488c02-abf7-4de2-8ffb-157b10f68f59\"><span><span><span>우선 외부에 노출시키고자 하는 Builder나 Helper 클래스가 존재하는 domain 모듈의 build.gradle.kts 파일에 플러그인을 추가해주고 프로젝트를 reload 하면 됩니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// domain 모듈의 build.gradle.kts</span>\n<span>plugins </span><span>{</span>\n    <span>// 기타 플러그인들...</span>\n    <span>`java-test-fixtures`</span>\n<span>}</span></code></pre></div></div></div></div><figure id=\"c9b1d539-7fcc-4d43-b0b4-a18abb14e1cd\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/3fce1ff6-e3db-4fdf-ae47-40d6f9cf203d\"/></figure><p id=\"782aa624-3b5d-4990-8c38-9ecd993b6ff8\"><span><span><span>java-test-fixtures 플러그인이 적용된 모듈에서 디렉토리를 생성하려고 하면 IntelliJ IDEA에서는 testFixtures 디렉토리가 자동완성 됩니다.</span></span></span></p><p id=\"beef22e7-f598-4127-b9d2-67dcd6b57007\"><span><span><span>그럼 아까 생성했던 OrderBuilder 클래스는 test가 아닌 testFixtures 디렉토리로 이동시켜준 후 build를 했을 때 수행되는 Gradle Task들을 보게 되면 testFixture 관련된 task가 추가된 걸 알 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>.<span>/gradlew :domain:build</span>\n\n...\n&gt; <span>Task</span> <span>:</span>domain<span>:</span><span>compileTestFixturesKotlin</span>\n&gt; <span>Task</span> <span>:</span>domain<span>:</span><span>compileTestFixturesJava </span><span>NO</span>-<span>SOURCE</span>\n&gt; <span>Task</span> <span>:</span>domain<span>:</span><span>processTestFixturesResources </span><span>NO</span>-<span>SOURCE</span>\n&gt; <span>Task</span> <span>:</span>domain<span>:</span><span>testFixturesClasses </span><span>UP</span>-<span>TO</span>-<span>DATE</span>\n&gt; <span>Task</span> <span>:</span>domain<span>:</span><span>testFixturesJar</span>\n\n</code></pre></div></div></div></div><p id=\"23e8e31d-7bc1-4725-9a9d-0ee080dc26a0\"><span><span><span>그리고 빌드된 결과물을 보면 test-fixtures.jar가 추가된 걸 볼 수 있습니다.</span></span></span></p><figure id=\"d5f1a2b1-4122-4190-9108-7ee2297b4423\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/5a4fae1a-6755-4d01-9bf1-d88619d35c88\"/></figure><p id=\"f8702d3f-6d3c-4c5e-a2a0-82f9d2c592f2\"><span><span><span>plain.jar는 plain에, test-fixtures.jar는 test에 각각 풀었는데 OrderBuilder는 test에 존재하는 걸 보니 test-fixtures.jar에 존재한다는 걸 알 수 있습니다.</span></span></span></p><p id=\"18875827-151f-4520-a8c2-8badcbca193a\"><span><span><span>여기서 또 java-test-fixtures 플러그인의 장점이 나오게 되는데 다른 모듈에서 불필요하게 여기는 클래스들(test 디렉토리에 있는 </span><code>@Test</code><span> 어노테이션이 붙은 테스트 코드들 등등)은 노출되지 않고, 필요한 클래스들(testFixtures 디렉토리에 있는 Helper나 Builder 클래스 등등)만 노출된다는 점입니다.</span></span></span></p><p id=\"45c2d987-fcbd-4fa8-95a9-9dbad3aa7644\"><span><span><span>하지만 이렇게 했다고 해서 아직 application이나 db 모듈에서 OrderBuilder를 import 할 수 있는 건 아닙니다. application과 db 모듈에서는 plain.jar에 의존하고 있는 것이지, test-fixtures.jar에 의존하고 있는 건 아니기 때문입니다.</span></span></span></p><p id=\"398f9b16-09d2-48a9-b722-487b2ac52b72\"><span><span><span>따라서 application과 db 모듈에서 test-fixtures.jar에 의존하도록 각 모듈의 build.gradle.kts에 추가해줘야합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// application/db 모듈의 build.gradle.kts</span>\n<span>dependencies </span><span>{</span>\n    <span>implementation</span><span>(</span><span>project</span><span>(</span><span>\":domain\"</span><span>)</span><span>)</span>\n    <span>testImplementation</span><span>(</span><span>testFixtures</span><span>(</span><span>project</span><span>(</span><span>\":domain\"</span><span>)</span><span>)</span><span>)</span>\n    <span>// 기타 디펜던시들...</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"12a8ec82-3445-47bb-81d0-abe7afd12f35\"><span><span><span>위와 같이 의존성을 추가해줘야 비로소 application과 db 모듈의 테스트 코드에서도 domain 모듈의 testFixtures에 존재하는 OrderBuilder를 사용할 수 있게 됩니다.</span></span></span></p><figure id=\"fc4da6ff-9d02-4e57-8074-ce86327270e2\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/9a687fca-c77b-4582-9c0e-be34c682b292\"/></figure><p id=\"0679abda-ccad-4844-87db-0b3f2f6a521d\"><span><span><span>이해하기 쉽게 모듈 간의 디렉토리 관계를 좀 더 세분화해서 표현해보았습니다.</span></span></span></p><h2 id=\"fc6b754b-d0fe-4b2c-ae64-f07c7968f1af\"><span><span><span>테스트 전용으로 추가한 의존성을 다른 모듈에게 노출시키기</span></span></span></h2><p id=\"f547867c-509f-41eb-bc5f-3524ae03c565\"><span><span><span>db 모듈의 통합테스트를 위해 인메모리 DB인 </span><a href=\"https://www.h2database.com/\" rel=\"noreferrer noopener\" target=\"_blank\">H2</a><span>를 테스트 전용으로 의존성을 추가했다고 가정해보겠습니다.</span></span></span></p><figure id=\"36999686-51fc-420b-854e-e70e0611a047\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/c3e3e13e-2ef0-4666-a749-b888978e8a60\"/></figure><p id=\"a3414ef4-0a38-40a6-b6fd-7d562bba54f5\"><span><span><span>이미지 출처: </span><a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\" rel=\"noreferrer noopener\" target=\"_blank\">Gradle Docs</a></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// db 모듈의 build.gradle.kts</span>\n<span>dependencies </span><span>{</span>\n    <span>// 기타 디펜던시들...</span>\n    <span>testRuntimeOnly</span><span>(</span><span>\"com.h2database:h2\"</span><span>)</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"a343e95b-411b-4433-aa48-609f7abccff1\"><span><span><span>이 상태에서 db 모듈의 통합테스트를 돌리게 되면 H2 DB를 사용하여 실제 DB와 격리된 환경에서 테스트가 돌아가는 것을 볼 수 있습니다.</span></span></span></p><p id=\"7565c51d-f3aa-47cb-9360-9ee264e849a5\"><span><span><span>그리고 application 모듈은 아래와 같이 db 모듈에 의존하고 있기 때문에 통합테스트를 작성할 때도 인메모리 DB를 쓸 것이라 희망하게 되는데 실제로 테스트를 짜고 돌려보면 그렇지 않습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// application 모듈의 build.gradle.kts</span>\n<span>dependencies </span><span>{</span>\n    <span>// 기타 디펜던시들...</span>\n    <span>runtimeOnly</span><span>(</span><span>project</span><span>(</span><span>\":db\"</span><span>)</span><span>)</span>\n<span>}</span></code></pre></div></div></div></div><figure id=\"3cb53c76-9291-4f64-807a-ede532f31812\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/01993311-e2ed-4cc2-aba6-66a1d3fc0d74\"/></figure><p id=\"1cbccdf7-ddb7-4ca4-96bd-be2e471ac75c\"><span><span><span>gradle 모듈의 디펜던시를 보게 되면 db 모듈의 testRuntimeClasspath에는 H2가 존재하지만, application 모듈의 testRuntimeClasspath에 존재하는 db 모듈에는 H2가 존재하지 않기 때문입니다.</span></span></span></p><p id=\"1dc41d31-bea7-4a52-927a-9a4fce199409\"><span><span><span>이 때도 application 모듈의 build.gradle.kts에 H2를 의존성으로 추가하는 방법이 있겠지만 관심사 문제가 있습니다. application 모듈의 관심사는 ‘어떻게 클라이언트와 커뮤니케이션해서 요구사항을 만족시킬 것인가?’이지 세부적인 내용(’저장소는 무엇을 쓸까? 데이터는 어디서 저장하고 어떻게 불러올까?’ 같은)은 관심사가 아닙니다. 따라서 H2를 직접적으로 의존성을 추가하는 순간 관심사 분리가 제대로 되지 않게 됩니다.</span></span></span></p><p id=\"76bdf25f-27cc-48d0-bee2-12de0333e2d7\"><span><span><span>이 문제를 해결하기 위해 또 우리의 구세주 java-test-fixtures 플러그인이 필요합니다.</span></span></span></p><h3 id=\"0487c2df-148e-40ae-bb5a-be13340f6889\"><span><span><span>testFixturesComplieClasspath와 testFixturesRuntimeClasspath</span></span></span></h3><p id=\"9bbca24f-4a2c-4fd7-b7f7-416227c4a43f\"><span><span><span>우선 외부에 테스트 전용 의존성(H2)을 노출시키고 싶은 db 모듈에 java-test-fixtures 플러그인을 추가하고, </span><code>testRuntimeOnly</code><span>로 추가했던 H2 의존성을 </span><code>testFixturesRuntimeOnly</code><span>로 변경해줘야 합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// db 모듈의 build.gradle.kts</span>\n<span>plugins </span><span>{</span>\n    <span>// 기타 플러그인들...</span>\n    <span>`java-test-fixtures`</span>\n<span>}</span>\n\n<span>dependencies </span><span>{</span>\n    <span>// 기타 디펜던시들...</span>\n    <span>testFixturesRuntimeOnly</span><span>(</span><span>\"com.h2database:h2\"</span><span>)</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"ff7180b1-4a2c-4338-9048-178f5ea966fd\"><span><span><span>그리고 나서 다시 db 모듈의 디펜더시를 보면 기존에 보지 못했던 </span><code>testFixturesCompileClasspath</code><span>와 </span><code>testFixturesRuntimeClasspath</code><span>가 추가된 게 보입니다.</span></span></span></p><p id=\"2df9d06b-5a07-41ba-8afb-83ad34d5b94d\"><span><span><span>사실 두 가지 클래스패스는 java-test-fixtures 플러그인을 추가하기만 해도 추가되는 클래스패스입니다.</span></span></span></p><figure id=\"494b40d4-ba5d-4588-84ee-9b6aa5b10d28\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/2e9314a8-df26-4181-80db-c7ac3a02cc4f\"/></figure><p id=\"3a438c4a-37f3-4231-a21d-dc7d76b58c99\"><span><span><span>여기서 눈여겨봐야할 것은 기존에는 testRuntimeClasspath에만 존재하던 H2 의존성이 testFixturesRuntimeClasspath에도 추가된 점입니다.</span></span></span></p><p id=\"c02c7e13-a720-418e-8e36-45f97eb50878\"><span><span><span>이에 대한 해답은 </span><a href=\"https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures\" rel=\"noreferrer noopener\" target=\"_blank\">java-test-fixtures 플러그인</a><span> 문서를 보다보면 아래와 같은 내용에 나오게 됩니다.</span></span></span></p><blockquote id=\"1d50fb09-3316-46b4-b0cd-92657e82fe2f\"><span><span><span>Test fixtures are configured so that: • they can see the main source set classes • test sources can see the test fixtures classes</span></span></span></blockquote><p id=\"5db59ee9-1a49-4e87-9e0f-880a86bc4fa9\"><span><span><span>두 번째로 나와있는 테스트 소스(test 디렉토리에 있는 내용들)에서 test fixture(testFixtures 디렉토리에 있는 내용들)에 있는 내용을 참조(can see)할 수 있도록 구성된다는 내용이 핵심입니다.</span></span></span></p><figure id=\"78674952-f55e-4c50-99c5-724c776c5661\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/80af7d04-8dab-470b-ba57-71cc36b5f5ae\"/></figure><p id=\"8eddd58f-212d-45e2-8c57-b368e4d7b5a0\"><span><span><span>따라서 </span><code>testFixturesRuntimeOnly</code><span>로만 추가(</span><code>testFixturesRuntimeClassPath</code><span>)했지만 </span><code>testRuntimeOnly</code><span>로도 추가된 것과 동일한 효과(</span><code>testRuntimeClasspath</code><span>에 추가된 효과)를 같이 보게 됩니다. 따라서 db 모듈의 통합테스트를 돌렸을 때는 여전히 H2 DB를 사용하게 됩니다.</span></span></span></p><p id=\"5e2529ba-2e92-4a48-be56-0ecd148fa3c9\"><span><span><span>하지만 H2를 db 모듈에 </span><code>testFixturesRuntimeClasspath</code><span>에 추가했지만, 여전히 application 모듈의 </span><code>testRuntimeClasspath</code><span>를 보면 아직도 db 모듈에는 H2 의존성이 추가되지 않은 모습을 볼 수 있습니다.</span></span></span></p><figure id=\"f9f2964d-b98e-49b5-bfd0-35bf40172971\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/d771bd53-7bae-4980-befc-8a28685c903d\"/></figure><p id=\"71ca3218-851d-4f65-aac5-a3c6f9313310\"><span><span><span>그 이유는 application 모듈의 build.gradle.kts를 보면 알 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// application 모듈의 build.gradle.kts</span>\n<span>dependencies </span><span>{</span>\n    <span>// 기타 디펜던시들...</span>\n    <span>runtimeOnly</span><span>(</span><span>project</span><span>(</span><span>\":db\"</span><span>)</span><span>)</span>\n<span>}</span></code></pre></div></div></div></div><figure id=\"74cf043d-1c7e-489a-a9a7-bccbe0806919\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/bb146d78-7eb8-4f26-8456-8c2e89e12296\"/></figure><p id=\"7273f163-1e8b-40a2-9177-d311ac0a3c19\"><span><span><span>이미지 출처: </span><a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\" rel=\"noreferrer noopener\" target=\"_blank\">Gradle Docs</a></span></span></p><p id=\"49760953-82f1-457a-87cc-73e56a9f529f\"><span><span><span>바로 정답은 </span><code>runtimeOnly</code><span> 키워드에 있습니다.</span><code>runtimeOnly</code><span>로 추가한 디펜던시는 </span><code>testRuntimeClasspath</code><span>에도 추가됩니다. (물론 </span><code>runtimeClasspath</code><span>에도 추가됩니다.)하지만 </span><code>testRuntimeClasspath</code><span>에 추가된 의존성은 외부 모듈에 노출되지 않는다는 특성이 있습니다.</span></span></span></p><p id=\"2b8fdf64-0620-49f2-bfa6-d279efd033c2\"><span><span><span>따라서 우리는 db 모듈의 </span><code>testRuntimeClasspath</code><span>가 아닌 </span><code>testFixturesRuntimeClasspath</code><span>에 추가된 의존성들에 주목해야하며 해당 의존성들이 추가되도록 application 모듈의 build.gradle.kts를 수정해야 합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// application 모듈의 build.gradle.kts</span>\n<span>dependencies </span><span>{</span>\n    <span>// 기타 디펜던시들...</span>\n    <span>runtimeOnly</span><span>(</span><span>project</span><span>(</span><span>\":db\"</span><span>)</span><span>)</span>\n    <span>testRuntimeOnly</span><span>(</span><span>testFixtures</span><span>(</span><span>project</span><span>(</span><span>\":db\"</span><span>)</span><span>)</span><span>)</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"fefd4abf-2357-4112-90d2-649afc92dab5\"><span><span><span>마지막 부분이 db 모듈의 </span><code>testFixturesRuntimeClasspath</code><span>에 있는 의존성을 </span><code>testRuntimeOnly</code><span>로 추가(</span><code>testRuntimeClasspath</code><span>에 추가)하는 내용입니다.</span></span></span></p><figure id=\"3a4a1a89-a177-4856-b6be-b2de6a8deba5\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/6e10ac53-c776-4b8a-aa65-08e63c0b21a2\"/></figure><p id=\"8194698a-4be1-41f9-8a4b-68421861d907\"><span><span><span>이제 application 모듈의 testRuntimeClasspath에도 db 모듈의 testFixutresRuntimeClasspath에 있는 H2 의존성이 추가된 걸 볼 수 있습니다.</span></span></span></p><figure id=\"e468a91f-9afe-4340-8270-6721320386d0\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/6f87d299-0a3d-4aee-96ed-c104e44fc7e1\"/></figure><p id=\"cb32347a-2d92-4fca-bace-afb103ab312d\"><span><span><span>이 상태에서 application 모듈의 통합테스트를 돌리더라도 H2 DB를 사용하는 걸 볼 수 있습니다.</span></span></span></p><h2 id=\"296153da-7f52-43d9-9596-bb5c920b4e3d\"><span><span><span>결론</span></span></span></h2><p id=\"09ca3cb0-17d2-4c29-9816-fdb3dc6f525b\"><span><span><span>테스트 코드는 실제 프로덕션에 영향을 미치지 않으므로 신경을 덜 쓰기 마련입니다. 그러다보면 중복이 난무하고 관심사 분리도 제대로 되지 않고 의존성 지옥에 빠지기 십상입니다. 하지만 테스트 코드는 우리의 소프트웨어를 좀 더 나은 설계로 유도하며 안정감도 주기 때문에 품질을 관리해야하는 소프트웨어임에는 분명합니다.</span></span></span></p><p id=\"1342be91-afba-4009-8c05-c6641550a5bc\"><span><span><span>혹시 해당 포스트를 보고 ‘어, 그거 그렇게 하는 거 아닌데…’라는 생각이 들었다면 </span><a href=\"https://toss.im/career/jobs?company=%ED%86%A0%EC%8A%A4%ED%8E%98%EC%9D%B4%EB%A8%BC%EC%B8%A0\" rel=\"noreferrer noopener\" target=\"_blank\">토스페이먼츠</a><span>에 와서 신나게 토론할 준비가 되어있으니 언제든 환영합니다!</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "11": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/10/techblog-11-node-js.png\"/><h1>CommonJS와 ESM에 모두 대응하는 라이브러리 개발하기: exports field</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/hoseung-jang.jpg\"/><div><div><h3>장호승</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2022. 10. 4</div></div></section></header><div><p id=\"d9c69740-7d85-4925-a124-71e50bf873b2\"><span><span><span>토스 프론트엔드 챕터에서는 개발 생산성을 극대화하기 위해 코드를 지속적으로 라이브러리로 만들고 있습니다. 그 결과 지금은 100개가 넘는 라이브러리를 운영하고 있습니다.</span></span></span></p><p id=\"a0d151d1-0b86-42e1-b256-00514b4584c7\"><span><span><span>Node.js 12부터 ECMAScript Modules라는 새로운 Module System이 추가되면서, 기존의 CommonJS라는 Module System까지, 라이브러리는 두 가지 Module System을 지원해야 하게 되었습니다.</span></span></span></p><p id=\"64cf26f8-1934-47d9-a28e-f50d4b9b4b73\"><span><span><span>토스팀에서는 그것을 package.json의 exports field를 통해 지원하고 있습니다. 각각의 모듈 시스템과 exports field에 대해 자세히 알아봅시다.</span></span></span></p><p id=\"593a10c4-4a4e-48c4-bd98-837a35fdc875\"><span><span><span>Node.js에는 CommonJS, ECMAScript Modules(이하 CJS, ESM)라는 두 가지 모듈 시스템이 존재합니다.</span></span></span></p><h2 id=\"fe1b1f64-b094-4b16-8e55-18edc479e269\"><span><span><span>CommonJS (CJS)</span></span></span></h2><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// add.js</span>\n<span>module</span>.<span>exports</span>.<span>add</span> = <span>(</span><span>x</span><span>,</span> <span>y</span><span>)</span> <span>=&gt;</span> <span>x</span> + <span>y</span><span>;</span>\n\n<span>// main.js</span>\n<span>const</span> <span>{</span> <span>add</span> <span>}</span> = <span>require</span><span>(</span><span>'./add'</span><span>)</span><span>;</span>\n\n<span>add</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>;</span></code></pre></div></div></div></div><h2 id=\"97fb6beb-ca61-4b7e-8c48-33303a057195\"><span><span><span>ECMAScript Modules (ESM)</span></span></span></h2><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// add.js</span>\n<span>export</span> <span>function</span> <span>add</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>)</span> <span>{</span>\n  <span>return</span> <span>x</span> + <span>y</span>\n<span>}</span>\n\n<span>// main.js</span>\n<span>import</span> <span>{</span> <span>add</span> <span>}</span> <span>from</span> <span>'./add.js'</span><span>;</span>\n\n<span>add</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>;</span></code></pre></div></div></div></div><ul><li id=\"8c0b7ef6-845a-4a02-9911-35cb43f21564\"><span><span><span>CJS는 </span><code>require</code><span> / </span><code>module.exports</code><span> 를 사용하고, ESM은 </span><code>import</code><span> / </span><code>export</code><span> 문을 사용합니다.</span></span></span></li><li id=\"a5a28235-2936-45e4-ac41-b5defa1fabc4\"><span><span><span>CJS module loader는 동기적으로 작동하고, ESM module loader는 비동기적으로 작동합니다.</span></span></span><div><ul><li id=\"3e8717d3-d1b3-49bd-9934-d328bedb486b\"><span><span><span>ESM은 </span><a href=\"https://nodejs.org/api/esm.html#top-level-await\" rel=\"noreferrer noopener\" target=\"_blank\">Top-level Await</a><span>을 지원하기 때문에 비동기적으로 동작합니다.</span></span></span></li></ul></div></li><li id=\"0fb4bcd2-bc35-45dc-b108-0b7c7e457a8e\"><span><span><span>따라서 ESM에서 CJS를 </span><code>import</code><span> 할 수는 있지만, CJS에서 ESM을 </span><code>require</code><span> 할 수는 없습니다. 왜냐하면 CJS는 Top-level Await을 지원하지 않기 때문입니다.</span></span></span></li><li id=\"24f0bb56-8ce6-47bd-9974-2d715b4c49cc\"><span><span><span>이 외에도 두 Module System은 기본적으로 동작이 다릅니다.</span></span></span></li><li id=\"8a154b9e-2a03-49b3-8dc7-e7bc369e2f55\"><span><span><span>따라서 두 Module System은 서로 호환되기 어렵습니다.</span></span></span></li></ul><h2 id=\"58e18e81-7197-4c2f-a0b9-52aa3a00bc20\"><span><span><span>왜 두 Module System을 지원해야해요?</span></span></span></h2><p id=\"64ba9b95-a88e-4dfc-9f54-56aebb0a694c\"><span><span><span>서로 호환되기 어려운 두 Module System을 지원해야하는 이유는 뭘까요? 그냥 하나로 통일하면 안될까요? 토스팀에서는 왜 그것을 중요하게 생각할까요?</span></span></span></p><p id=\"be9cd0e0-1975-45df-b611-79b48f554bc9\"><span><span><span>토스팀에서는 Server-side Rendering(이하 SSR)을 적극적으로 사용하고 있기 때문에, Node.js의 CJS를 지원하는 것이 중요했습니다.</span></span></span></p><p id=\"ee5d2f2f-c60e-4b90-9907-9ab617ff2abf\"><span><span><span>그리고 Module System의 지원은 브라우저 환경에서의 퍼포먼스와도 관련이 있습니다. 브라우저 환경에서는 페이지 렌더링을 빠르게 하는 것이 중요한데, 이 때 JavaScript는 로딩되어 실행되는 동안 페이지 렌더링을 중단시키는 리소스들 중 하나 입니다.</span></span></span></p><p id=\"f1dbfad4-6970-41e3-820e-e74ed9b9fd1e\"><span><span><span>따라서 JavaScript 번들의 사이즈를 줄여서 렌더링이 중단되는 시간을 최소화 하는 것이 중요합니다. 이를 위해 필요한 것이 바로 Tree-shaking입니다. Tree-shaking이란 필요하지 않은 코드와 사용되지 않는 코드를 삭제하여 JavaScript 번들의 크기를 가볍게 만드는 것을 말합니다.</span></span></span></p><p id=\"9fdbba2b-dede-449a-a6ab-e70bdf3f9a51\"><span><span><span>이 때, CJS는 Tree-shaking이 어렵고, ESM은 쉽게 가능합니다.</span></span></span></p><p id=\"1f083d5e-dcc8-4a35-9bd9-0bd0bf908305\"><span><span><span>왜냐하면 CJS는 기본적으로 </span><code>require</code><span> / </span><code>module.exports</code><span> 를 동적으로 하는 것에 아무런 제약이 없습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// require</span>\n<span>const</span> <span>utilName</span> = <span>/* 동적인 값 */</span>\n<span>const</span> <span>util</span> = <span>require</span><span>(</span><span>`./utils/</span><span>${</span><span>utilName</span><span>}</span><span>`</span><span>)</span><span>;</span>\n\n<span>// module.exports</span>\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>/* 동적인 조건 */</span><span>)</span> <span>{</span>\n    <span>module</span>.<span>exports</span> = <span>/* ... */</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>foo</span><span>(</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"bfdbf05c-060f-483c-8f15-90c102991941\"><span><span><span>따라서 CJS는 빌드 타임에 정적 분석을 적용하기가 어렵고, 런타임에서만 모듈 관계를 파악할 수 있습니다.</span></span></span></p><p id=\"d9df78e8-4f37-4dbf-ac2d-b768490fc988\"><span><span><span>하지만 ESM은 정적인 구조로 모듈끼리 의존하도록 강제합니다. import path에 동적인 값을 사용할 수 없고, export는 항상 최상위 스코프에서만 사용할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>util</span> <span>from</span> <span>`./utils/</span><span>${</span><span>utilName</span><span>}</span><span>.js`</span><span>;</span> <span>// 불가능</span>\n\n<span>import</span> <span>{</span> <span>add</span> <span>}</span> <span>from</span> <span>\"./utils/math.js\"</span><span>;</span> <span>// 가능</span>\n\n<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>export</span> <span>const</span> <span>value</span> = <span>\"foo\"</span><span>;</span> <span>// 불가능</span>\n<span>}</span>\n\n<span>export</span> <span>const</span> <span>value</span> = <span>\"foo\"</span><span>;</span> <span>// 가능</span></code></pre></div></div></div></div><p id=\"fda8ce96-e8e4-4d81-b251-8275208231c3\"><span><span><span>따라서 ESM은 빌드 단계에서 정적 분석을 통해 모듈 간의 의존 관계를 파악할 수 있고, Tree-shaking을 쉽게 할 수 있습니다.</span></span></span></p><p id=\"56d89e78-b4f9-41bf-a77f-0add1e8dba7e\"><span><span><span>위와 같은 배경으로 토스팀에서는 CJS/ESM 모두 지원하는 라이브러리를 운영하게 되었습니다.</span></span></span></p><h2 id=\"0812de05-28bb-4a4b-b2a1-08218650f3f6\"><span><span><span>파일이 CJS인지 ESM인지 어떻게 알아요?</span></span></span></h2><p id=\"5e70dd14-d3c5-440a-8dcb-6e83634d645c\"><span><span><span>Module System이 두 개가 존재하며 둘 다 지원해야할 필요성은 알겠는데, </span><code>.js</code><span> 파일이 CJS인지 ESM인지 어떻게 알 수 있을까요? package.json의 </span><code>type</code><span> field 또는 확장자를 보고 알 수 있습니다.</span></span></span></p><ul><li id=\"e8af6bf6-8a96-45ee-b075-7f9269462eb2\"><span><span><code>.js</code><span> 파일의 Module System은 package.json의 </span><code>type</code><span> field에 따라 결정됩니다.</span></span></span><div><ul><li id=\"f5dfa534-5195-4671-8149-2d4d255f7db2\"><span><span><code>type</code><span> field의 기본값은 </span><code>\"commonjs\"</code><span> 이고, 이 때 </span><code>.js</code><span> 는 CJS로 해석됩니다.</span></span></span></li><li id=\"8885acfa-34da-4137-ada5-7bb4e7fb2e78\"><span><span><span>다른 하나는 </span><code>\"module\"</code><span> 입니다. 이 때 </span><code>.js</code><span> 는 ESM으로 해석됩니다.</span></span></span></li></ul></div></li><li id=\"59f77082-75c6-487f-be1f-e3b21cf763b7\"><span><span><code>.cjs</code><span> 는 항상 CJS로 해석됩니다.</span></span></span></li><li id=\"5f6b83d0-e411-4878-b9b6-a9c08b4b82a5\"><span><span><code>.mjs</code><span> 는 항상 ESM으로 해석됩니다.</span></span></span></li></ul><p id=\"5ad58c12-206a-487c-8388-eaff16e53350\"><span><span><span>TypeScript도 4.7부터 </span><code>tsconfig.json</code><span> 의 </span><code>moduleResolution</code><span> 이 </span><code>nodenext</code><span> 또는 </span><code>node16</code><span> 으로 설정된 경우, 위 규칙이 똑같이 적용됩니다.</span></span></span></p><ul><li id=\"9ef87477-8f7d-48a0-a145-bf49b6c01158\"><span><span><code>type</code><span> field가 </span><code>\"commonjs\"</code><span> 인 경우, </span><code>.ts</code><span> 는 CJS로 해석됩니다.</span></span></span></li><li id=\"2e09c7c4-888f-43d8-a437-f237d4e2950f\"><span><span><code>type</code><span> field가 </span><code>\"module\"</code><span> 인 경우, </span><code>.ts</code><span> 는 ESM으로 해석됩니다.</span></span></span></li><li id=\"3fa3be9a-ec65-4fe3-8cd1-52e2af6559d1\"><span><span><code>.cts</code><span> 는 항상 CJS로 해석됩니다.</span></span></span></li><li id=\"487eb90e-a3ee-4aa9-be9b-1ebd76cda886\"><span><span><code>.mts</code><span> 는 항상 ESM으로 해석됩니다.</span></span></span></li></ul><hr/><p id=\"6f5a992c-199a-460f-a58d-9fca22de02cd\"><span><span><span>CJS와 ESM의 차이, 패키지의 기본 Module System을 설정하는 방법과 확장자 모두 알아봤는데, 그래서 어떻게 하면 하나의 패키지가 CJS/ESM을 동시에 매끄럽게 제공할 수 있을까요?</span></span></span></p><p id=\"dcd3e840-7c00-4c50-ab2e-8bb25bdb9285\"><span><span><span>정답은 </span><code>exports</code><span> field입니다. </span><code>exports</code><span> field는 무슨 문제를 해결해줄까요? 어떤 역할을 할까요?</span></span></span></p><h2 id=\"6ac83718-d2d2-47ba-ac8f-2e37c4b8c74f\"><span><span><span>패키지 entry point 지정</span></span></span></h2><p id=\"d09f21bd-3253-4aac-accd-bd437d9cd624\"><span><span><span>기본적으로는 package.json의 </span><code>main</code><span> field와 같은 역할을 합니다. 패키지의 entry point를 지정할 수 있습니다.</span></span></span></p><h2 id=\"b817a8a9-1087-4528-a5d4-2d4958de0154\"><span><span><span>subpath exports 지원</span></span></span></h2><p id=\"df628643-13d0-458a-a85e-37f2496f9c71\"><span><span><span>기존에는 filesystem 기반으로 동작했기 때문에, 패키지 내부의 임의의 JS 파일에 접근할 수 있었고, 또한 실제 filesystem 상의 위치와 import path를 다르게 둘 수 없었습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 디렉토리 구조</span>\n<span>/modules</span>\n  <span>a</span>.<span>js</span>\n  <span>b</span>.<span>js</span>\n  <span>c</span>.<span>js</span>\n<span>index</span>.<span>js</span></code></pre></div></div></div></div><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>require</span><span>(</span><span>\"package/a\"</span><span>)</span><span>;</span> <span>// 불가능</span>\n<span>require</span><span>(</span><span>\"package/modules/a\"</span><span>)</span><span>;</span> <span>// 가능</span></code></pre></div></div></div></div><p id=\"98eafe05-783d-40f9-b644-f5e02d643058\"><span><span><span>이 때, </span><code>exports</code><span> field를 사용해 subpath exports를 사용하면, 명시된 subpath 외에는 사용할 수 없고, filesystem 상의 위치와 import path를 다르게 지정할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// CJS 패키지</span>\n<span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"cjs-package\"</span><span>,</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>\"./index.js\"</span><span>,</span>\n    <span>\"./a\"</span><span>:</span> <span>\"./modules/a.js\"</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span></code></pre></div></div></div></div><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// ./a.js가 아니라</span>\n<span>// ./modules/a.js를 불러온다.</span>\n<span>require</span><span>(</span><span>\"cjs-package/a\"</span><span>)</span><span>;</span>\n\n<span>// 에러</span>\n<span>// ./b는 exports field에 명시하지 않은 subpath이다.</span>\n<span>require</span><span>(</span><span>\"cjs-package/b\"</span><span>)</span><span>;</span></code></pre></div></div></div></div><h2 id=\"3599a304-5f1a-4c12-9502-2e67057db742\"><span><span><span>conditional exports 지원</span></span></span></h2><p id=\"8f52f784-d7f9-4204-9915-f8c9e77e4c51\"><span><span><span>기존에는 filesystem 기반으로 동작했기 때문에, Dual CJS/ESM 패키지를 자연스럽게 운영하기가 어려웠습니다.</span></span></span></p><p id=\"96601fc2-2de9-4c7a-9ffa-e770c507e9f8\"><span><span><code>exports</code><span> field를 사용하면, 똑같은 import path에 대해 특정 조건에 따라 다른 모듈을 제공할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"cjs-package\"</span><span>,</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>{</span>\n      <span>\"require\"</span><span>:</span> <span>\"./dist/index.cjs\"</span><span>,</span>\n      <span>\"import\"</span><span>:</span> <span>\"./esm/index.mjs\"</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// CJS 환경</span>\n<span>// ./dist/index.cjs를 불러온다.</span>\n<span>const</span> <span>pkg</span> = <span>require</span><span>(</span><span>\"cjs-package\"</span><span>)</span><span>;</span>\n\n<span>// ESM 환경</span>\n<span>// ./esm/index.mjs를 불러온다.</span>\n<span>import</span> <span>pkg</span> <span>from</span> <span>\"cjs-package\"</span><span>;</span></code></pre></div></div></div></div><h2 id=\"36fc803c-3b75-4862-ba99-20cf5cce0a52\"><span><span><span>올바른 exports field</span></span></span></h2><p id=\"f5dc8bd4-4b6b-4c64-ac51-9375bc08f69a\"><span><span><span>Dual CJS/ESM 패키지의 </span><code>exports</code><span> field를 올바르게 작성하기 위해 주의해야할 점을 알아봅시다.</span></span></span></p><h3 id=\"14be3d37-2e1e-414e-99b5-73733f9aff95\"><span><span><span>상대 경로로 표시하기</span></span></span></h3><p id=\"e4f0affa-b405-465e-8d2c-6596737baa0f\"><span><span><code>exports</code><span> field는 모두 </span><code>.</code><span> 으로 시작하는 상대 경로로 작성되어야 합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// X</span>\n<span>{</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\"sub-module\"</span><span>:</span> <span>\"dist/modules/sub-module.js\"</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// O</span>\n<span>{</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>\"./dist/index.js\"</span><span>,</span>\n    <span>\"./sub-module\"</span><span>:</span> <span>\"./dist/modules/sub-module.js\"</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><h3 id=\"8748d5f1-fd6c-48a7-8ae7-36e1902b5dee\"><span><span><span>Module System에 따라 올바른 확장자 사용하기</span></span></span></h3><p id=\"bd85cc7d-b993-4517-a865-2c3173f7e0bd\"><span><span><span>conditional exports를 사용할 때, 패키지가 따르는 Module System에 따라, 즉 package.json의 </span><code>type</code><span> field에 따라 올바른 JS 확장자를 사용해야 합니다.</span></span></span></p><ul><li id=\"0dfeb828-834f-4967-8f1e-cb18ac28b0d6\"><span><span><span>CJS 패키지일 때</span></span></span></li></ul><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// ESM은 .mjs로 명시해야함</span>\n<span>{</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>{</span>\n      <span>\"require\"</span><span>:</span> <span>\"./dist/index.js\"</span><span>,</span>\n      <span>\"import\"</span><span>:</span> <span>\"./dist/index.mjs\"</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><ul><li id=\"44999aef-30ed-49d9-abf3-41fb75e0c559\"><span><span><span>ESM 패키지일 때</span></span></span></li></ul><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// CJS는 .cjs로 명시해야함</span>\n<span>{</span>\n  <span>\"type\"</span><span>:</span> <span>\"module\"</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>{</span>\n      <span>\"require\"</span><span>:</span> <span>\"./dist/index.cjs\"</span><span>,</span>\n      <span>\"import\"</span><span>:</span> <span>\"./dist/index.js\"</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><p id=\"216db708-2c08-4b47-b647-cdfcddabff7e\"><span><span><span>이 규칙을 지키지 않고 전부 </span><code>.js</code><span> 확장자를 사용했을 때는 어떤 일이 발생할까요? 아래와 같이 상황을 가정하겠습니다.</span></span></span></p><ul><li id=\"cebe7262-ab13-42cb-a6d2-7f95a2cf72a0\"><span><span><code>cjs-package</code><span> 는 CJS 패키지이다.</span></span></span><div><ul><li id=\"ee68abbb-c4df-4de8-a938-707bb9ebd588\"><span><span><code>type</code><span> field가 </span><code>\"commonjs\"</code><span> 이기 때문이다.</span></span></span></li></ul></div></li><li id=\"bc15d492-564c-4357-bf21-a12d2e673ddc\"><span><span><code>./dist/index.js</code><span> 는 CJS 문법(</span><code>require</code><span> / </span><code>module.exports</code><span>)으로 작성된 모듈이다.</span></span></span></li><li id=\"207c8d57-03c1-48ec-b8f7-2e0466fdfff1\"><span><span><code>./esm/index.js</code><span> 는 ESM 문법(</span><code>import</code><span> / </span><code>export</code><span>)으로 작성된 모듈이다.</span></span></span></li></ul><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"cjs-package\"</span><span>,</span>\n  <span>\"type\"</span><span>:</span> <span>\"commonjs\"</span><span>,</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>{</span>\n      <span>\"require\"</span><span>:</span> <span>\"./dist/index.js\"</span><span>,</span>\n      <span>\"import\"</span><span>:</span> <span>\"./esm/index.js\"</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"68816f98-4c7a-4436-bcf7-5b584d99fcc7\"><span><span><span>CJS 환경에서 </span><code>cjs-package</code><span> 를 </span><code>require</code><span> 했을 땐 잘 동작합니다. </span><code>./dist/index.js</code><span> 는 CJS 모듈이고, 확장자가 </span><code>.js</code><span> 이므로, 가장 가까운 package.json의 </span><code>type</code><span> field를 따라 CJS Module Loader가 사용될 것이기 때문입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 잘 동작한다.</span>\n<span>// ./dist/index.js를  CommonJS Module Loader로 불러온다.</span>\n<span>const</span> <span>pkg</span> = <span>require</span><span>(</span><span>\"cjs-package\"</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"305d776d-4f0d-4764-8f8e-734b3dde2725\"><span><span><span>하지만 ESM 환경에서 </span><code>cjs-package</code><span> 를 </span><code>import</code><span> 했을 땐 에러가 발생합니다. </span><code>./esm/index.js</code><span> 는 ESM 모듈이지만, 확장자가 </span><code>.js</code><span> 이므로 가장 가까운 package.json의 </span><code>type</code><span> field를 따라 CJS Module Loader가 사용됩니다.</span></span></span></p><p id=\"bf6b4ed9-2e94-48f9-be7d-a9ea9833fa19\"><span><span><span>ESM 문법으로 작성된 JavaScript를 CJS Module Loader로 읽기 때문에 당연히 에러가 발생합니다.</span></span></span></p><p id=\"9b6c6cea-4307-4cc7-9140-32641b90256a\"><span><span><span>(예시: </span><code>import</code><span> 문은 ESM에서만 사용 가능하다는 에러가 발생)</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 에러가 발생한다.</span>\n<span>// ./esm/index.js를 CJS Module Loader로 읽었다.</span>\n<span>import</span> <span>*</span> <span>as</span> <span>pkg</span> <span>from</span> <span>\"cjs-package\"</span><span>;</span></code></pre></div></div></div></div><h3 id=\"1cd01621-3eff-4d41-a7d8-656088203781\"><span><span><span>TypeScript 지원하기</span></span></span></h3><p id=\"0d37761e-25ec-455b-a71a-a7378cb53700\"><span><span><span>TypeScript에서 module import시, 항상 Type Definition을 찾게 되는데요. 기존에는 filesystem 기반으로 Type Definition을 탐색했습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// ./sub-module.d.ts를 찾는다.</span>\n<span>import</span> <span>subModule</span> <span>from</span> <span>\"package/sub-module\"</span><span>;</span>\n\n</code></pre></div></div></div></div><p id=\"0250514f-cf7b-4a68-83df-6ad77255fbc3\"><span><span><span>하지만 TypeScript 4.7부터 </span><code>moduleResolution</code><span> 옵션에 </span><code>node16</code><span> 과 </span><code>nodenext</code><span> 가 정식으로 추가되었고, </span><code>node16</code><span> 과 </span><code>nodenext</code><span> 는 filesystem 기반이 아닌 </span><code>exports</code><span> field로부터 Type Definition을 탐색합니다. 또한, CJS TypeScript( </span><code>.cts</code><span> )와 ESM TypeScript( </span><code>.mts</code><span> )를 구분합니다.</span></span></span></p><p id=\"7a55bfd6-acfd-4992-8e8c-35e9d01d7f64\"><span><span><span>TypeScript는 conditional import의 조건 중 </span><code>types</code><span> 를 참조하며, 이 때 JavaScript와 마찬가지로 package.json의 </span><code>type</code><span> field에 따라 알맞은 확장자 ( </span><code>.cts</code><span> / </span><code>.mts</code><span> )를 사용해야 합니다.</span></span></span></p><ul><li id=\"069e6774-eba4-483c-885a-b5ccbe66eab6\"><span><span><span>CJS 패키지</span></span></span></li></ul><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// ESM TS는 mts로 명시해야함</span>\n<span>{</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>{</span>\n      <span>\"require\"</span><span>:</span> <span>{</span>\n        <span>\"types\"</span><span>:</span> <span>\"./index.d.ts\"</span><span>,</span>\n        <span>\"default\"</span><span>:</span> <span>\"./index.js\"</span>\n      <span>}</span><span>,</span>\n      <span>\"import\"</span><span>:</span> <span>{</span>\n        <span>\"types\"</span><span>:</span> <span>\"./index.d.mts\"</span><span>,</span>\n        <span>\"default\"</span><span>:</span> <span>\"./index.mjs\"</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><ul><li id=\"f86297ce-1690-4685-b651-5e600715e10f\"><span><span><span>ESM 패키지</span></span></span></li></ul><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// CJS TS는 cts로 명시해야함</span>\n<span>{</span>\n  <span>\"type\"</span><span>:</span> <span>\"module\"</span><span>,</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>{</span>\n      <span>\"require\"</span><span>:</span> <span>{</span>\n        <span>\"types\"</span><span>:</span> <span>\"./index.d.cts\"</span><span>,</span>\n        <span>\"default\"</span><span>:</span> <span>\"./index.cjs\"</span>\n      <span>}</span><span>,</span>\n      <span>\"import\"</span><span>:</span> <span>{</span>\n        <span>\"types\"</span><span>:</span> <span>\"./index.d.ts\"</span><span>,</span>\n        <span>\"default\"</span><span>:</span> <span>\"./index.js\"</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"5104e34f-a120-4423-bfd7-8c2c0d859586\"><span><span><span>그럼 TypeScript의 경우에는 위 규칙을 지키지 않으면 어떻게 될까요? 아래와 같이 상황을 가정하겠습니다.</span></span></span></p><ul><li id=\"42131b05-cc89-468d-8db8-1c1d20160452\"><span><span><code>esm-package</code><span> 는 ESM 패키지이다.</span></span></span><div><ul><li id=\"3ac58fc5-b7b9-45bc-8dd8-2aa8d83fbfdf\"><span><span><code>type</code><span> field가 </span><code>\"module\"</code><span> 이기 때문이다.</span></span></span></li></ul></div></li><li id=\"1c92c6ff-6b1a-478d-8c21-8acd8cdcfd90\"><span><span><code>.cts</code><span> (CJS TypeScript)에서 </span><code>esm-package</code><span> 를 사용한다.</span></span></span></li></ul><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"esm-package\"</span><span>,</span>\n  <span>\"type\"</span><span>:</span> <span>\"module\"</span><span>,</span>\n  <span>\"exports\"</span><span>:</span> <span>{</span>\n    <span>\".\"</span><span>:</span> <span>{</span>\n      <span>\"types\"</span><span>:</span> <span>\"./index.d.ts\"</span><span>,</span>\n      <span>\"require\"</span><span>:</span> <span>\"./index.cjs\"</span><span>,</span>\n      <span>\"import\"</span><span>:</span> <span>\"./index.js\"</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"d0bede72-4f68-4ceb-8df5-71d26fb3fe7c\"><span><span><span>이 때 </span><code>.cts</code><span> (CJS TypeScript)에서 </span><code>esm-package</code><span> 를 require하면 타입 에러가 발생합니다.</span></span></span></p><p id=\"7af66c73-68b2-4ac8-b000-f61fe76f5430\"><span><span><code>esm-package</code><span> 는 Type Definition을 </span><code>./index.d.ts</code><span> 만 지원합니다. 즉, ESM/CJS TypeScript 모두 </span><code>./index.d.ts</code><span> 를 바라보게 됩니다.</span></span></span></p><p id=\"c4a15d17-a248-4b73-8279-8450b7fee485\"><span><span><span>이 때, </span><code>esm-package</code><span> 는 ESM 패키지이기 때문에 </span><code>index.d.ts</code><span> 는 ESM TypeScript로써 해석됩니다.</span></span></span></p><p id=\"f177f13a-e250-4dee-bd29-11337b61d934\"><span><span><span>따라서 </span><code>esm-package</code><span> 는 CJS TypeScript 입장에서 Pure ESM Module이고, CJS는 ESM을 불러올 수 없기 때문에 </span><code>esm-package</code><span> 가 순수 ESM으로만 확인된다는 타입 에러가 발생합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// index.cts</span>\n\n<span>// Type Error: esm-package는 동기적으로 가져올 수 없는 ES 모듈로만 확인됩니다.</span>\n<span>// CJS TypeScript를 위한 .d.cts를 지원하지 않았기 때문에 발생하는 에러</span>\n<span>import</span> <span>*</span> <span>as</span> <span>esmPkg</span> <span>from</span> <span>\"esm-package\"</span><span>;</span>\n\n</code></pre></div></div></div></div><hr/><p id=\"e8c31d50-ea75-402f-8bef-720d2ea627bd\"><span><span><span>최근 토스팀 내부 라이브러리들은 위처럼 올바르게 </span><code>exports</code><span> field를 작성하여 배포되고 있습니다. CJS/ESM JavaScript는 물론 TypeScript 지원까지 잘 되있습니다.</span></span></span></p><p id=\"94dae924-974e-485a-8988-a13c3fb24fec\"><span><span><span>JavaScript/TypeScript 생태계는 계속해서 발전하고 있지만, TypeScript까지 잘 지원하는 라이브러리는 정말 유명한 라이브러리들 중에서도 찾아보기가 많이 힘듭니다.</span></span></span></p><p id=\"e034d065-1d69-4105-b5d4-a0dea58cd12d\"><span><span><span>그렇다면 우리가 그 시작점이 되면 어떨까요? 토스팀에서는 이런 기술적인 문제를 함께 풀어가고 싶으신 분들을 언제나 환영합니다. 함께 좋은 생태계를 만들어 나가고 싶어요.</span></span></span></p><ul><li id=\"c9537252-f01d-4d5d-9c9e-4dccb29442d5\"><span><span><span>Node.js의 CJS/ESM에 대해</span></span></span><div><ul><li id=\"f9cd2d09-11be-48e3-a6bd-e08afa70c19c\"><span><span><a href=\"https://nodejs.org/api/modules.html\" rel=\"noreferrer noopener\" target=\"_blank\">CJS</a></span></span></li><li id=\"e463f199-a290-44e0-b07e-9783ed89c607\"><span><span><a href=\"https://nodejs.org/api/esm.html\" rel=\"noreferrer noopener\" target=\"_blank\">ESM</a></span></span></li><li id=\"06812603-a1bc-4cfe-8a98-84745c5ca3d9\"><span><span><a href=\"https://nodejs.org/api/packages.html#determining-module-system\" rel=\"noreferrer noopener\" target=\"_blank\">Determining Module System</a></span></span></li></ul></div></li><li id=\"a406c982-b3c2-4f76-bac3-2f6a07f25041\"><span><span><code>exports</code><span> field에 대해</span></span></span><div><ul><li id=\"9b7bcb99-13b7-4a61-96be-4c0c02298764\"><span><span><a href=\"https://nodejs.org/api/packages.html#exports\" rel=\"noreferrer noopener\" target=\"_blank\">package.json export field</a></span></span></li><li id=\"bfdc936b-d509-43be-afc9-c2b1bb97f43e\"><span><span><a href=\"https://nodejs.org/api/packages.html#subpath-exports\" rel=\"noreferrer noopener\" target=\"_blank\">Subpath exports</a></span></span></li><li id=\"b1f1d76a-9b72-4376-a035-9c2192f59918\"><span><span><a href=\"https://nodejs.org/api/packages.html#conditional-exports\" rel=\"noreferrer noopener\" target=\"_blank\">Conditional exports</a></span></span></li></ul></div></li><li id=\"00cdeb4d-31d0-47c0-a514-2d306890bdb6\"><span><span><span>TypeScript의 CJS/ESM 지원에 대해</span></span></span><div><ul><li id=\"b52dfd45-6f51-46ce-899a-2bd8b2339222\"><span><span><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html\" rel=\"noreferrer noopener\" target=\"_blank\">4.7 릴리즈 노트</a></span></span></li></ul></div></li></ul></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "12": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/10/tech_M.png\"/><h1>토스증권 QA Team을 소개합니다</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/sujeong-kwak.png\"/><div><div><h3>곽수정</h3><h3>ㆍ<!-- -->QA Manager</h3></div><div>2022. 10. 25</div></div></section></header><div><p id=\"359d2bf8-2aee-4e47-b266-aff08dec41aa\"><span><span><span>안녕하세요. 저는 3년 전 토스의 첫 QA Manager로 입사해서 현재 토스증권 QA팀에서 일하고 있는 곽수정입니다. 길다면 긴 3년이란 시간 동안 즐겁고 재밌게 일할 수 있었던 토스와 토스증권의 QA팀을 소개해보려고 해요.</span></span></span></p><h3 id=\"ebe83fc0-1552-4a81-9736-03ea35734d90\"><span><span><span>QA가 없었던 토스팀, 왜 첫 번째 QA Manager를 채용하게 되었을까요?</span></span></span></h3><p id=\"5c27297b-0d0f-4dcb-870e-35224e5baccf\"><span><span><span>초창기의 토스팀은 사용자에게 빠른 제품/서비스를 제공하는데 많은 노력을 기울이고 있었어요. 제품의 퀄리티 역시 PO, 개발자 등 제품을 만드는 ‘메이커(Maker)’들이 간단한 테스트를 통해 관리하고 있었죠. 버그가 발생하더라도 누구보다 빠르게 대응할 수 있다는 강한 자신감과 팀원 개개인의 오너십이 있었기 때문에 가능한 일이었다고 생각해요.</span></span></span></p><p id=\"8e914d11-6674-483e-97c1-c0da39aa2937\"><span><span><span>이러한 동력에 힘입어 토스는 시장에서 빠른 속도감을 무기로 존재감을 높여갔어요. 그만큼 우리가 제공하는 제품과 서비스의 수도 증가했죠. 이에 따라 메이커들이 제품을 만들면서, 동시에 높은 수준의 제품 안정성을 체크하고 유지하는 데 한계가 생기기 시작했어요. 이 시기에 토스팀에서도 QA 담당자의 필요성이 논의되기 시작했지만, QA가 진행하는 품질 테스트가 우리의 속도에 영향을 주지는 않을지 우려가 공존하기도 했답니다.</span></span></span></p><p id=\"c9ba6a05-5f33-4e44-96f1-02cb72526d86\"><span><span><span>시장에서의 빠른 속도만큼이나, 고객들에게 안정적이고 높은 퀄리티의 서비스를 제공하는 것도 중요하다고 믿었던 토스팀은 2019년 첫 번째 QA Manager를 채용하게 됩니다. 그게 바로 저고요!</span></span></span></p><h3 id=\"7a6b9446-596d-4bc1-811e-18a3894a7c9a\"><span><span><span>그럼 토스팀의 QA는 어떻게 일할까요?</span></span></span></h3><p id=\"b6c00f29-119f-434d-bc45-f44e270faf33\"><span><span><span>QA가 없던 회사에서 QA가 일하는 방식을 만들어 나가는 것은 아주 어려움이 많았어요. 일반적인 IT 회사에서는 서비스 출시 전에 테스트하는 것이 너무 당연한데요. 처음 토스에 입사했을 땐 이것도 알려야 할 만큼 어려움이 있었답니다.</span></span></span></p><p id=\"70716f9f-516e-4a1d-a062-fa2f17ba4bad\"><span><span><span>이전 회사의 경우, 기획팀에서 기획서를 작성한 후에 개발/QA팀에 공유해서 서비스 출시 일정을 결정했어요. 그래서 QA팀에서는 QA 중에 발견한 버그로 인해 출시 일정이 뒤로 밀리거나 개발이 늦어지지 않도록 </span><a href=\"https://istqb-glossary.page/sanity-test/\" rel=\"noreferrer noopener\" target=\"_blank\">Sanity Test</a><span>(</span><a href=\"https://istqb-glossary.page/build-verification-test/\" rel=\"noreferrer noopener\" target=\"_blank\">BVT</a><span>)라는 절차를 만들어서 QA 가용 리소스를 확보하는 장치를 만들기도 했고요. 오히려 이러한 장치가 개발자와 QA 모두에게 업무적인 비효율을 초래해서 서비스 출시일이 미뤄지는 경우가 많다는 점이 아쉬웠어요.</span></span></span></p><p id=\"53f05cb8-517e-4d49-bfb9-4defc1214ded\"><span><span><span>하지만 토스의 방식은 달라요.</span></span></span></p><p id=\"28803b78-e1f2-4d0f-af51-fa9d55d76ec7\"><span><span><span>QA Manager는 다양한 툴을 통해 서비스와 관련된 크고 작은 변경 사항들을 미리 확인할 수 있어요. 접근 권한 또한 열려 있어서 개발자의 작업 상태를 확인할 수 있고요. 자체적으로 QA계획을 수립해서 작은 단위부터 미리 테스트를 시작할 수도 있고, 통합테스트(Integration Test) 및 모니터링과 같은 QA 단계도 직접 조율할 수 있어요.</span></span></span></p><p id=\"37021bf3-e0ef-45ed-be25-e3dc0e02e171\"><span><span><span>QA Manager가 테스트를 진행하지만, </span><a href=\"https://softwaretestingreference.tistory.com/132#1._%EC%82%B4%EC%B6%A9%EC%A0%9C_%ED%8C%A8%EB%9F%AC%EB%8F%85%EC%8A%A4(Pesticide_Paradox)%EB%9E%80_%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94?_\" rel=\"noreferrer noopener\" target=\"_blank\">살충제 패러독스</a><span>(Pesticide Paradox)에 빠지지 않도록 개발자도 배포를 위한 </span><a href=\"https://istqb-glossary.page/regression-testing/\" rel=\"noreferrer noopener\" target=\"_blank\">Regression Test Case</a><span>를 별도로 수행하고 있어요. 매주 랜덤으로 수행자를 지정한 뒤 테스트가 완료되어야만 앱 심사 등록 요청이 가능하도록 하고 있어요. 서비스를 만들어가는 담당자 모두가 안정적인, 높은 품질의 서비스를 제공하고자 하는 마음이 크기 때문에 가능한 방식이라고 생각해요.</span></span></span></p><h3 id=\"a592c0fe-4bab-4a0e-be88-ef89ee08dd23\"><span><span><span>토스증권이 서비스를 처음 출시했을 땐, 어떻게 QA를 했을까요?</span></span></span></h3><p id=\"378f1bd3-c125-46de-8701-41a96034c184\"><span><span><span>토스증권 출범을 준비하던 시기에는 토스증권 소속 QA Manager가 전무한 상태였어요. 당시 토스 소속이었던 제가 파견을 나가 QA 업무를 지원해주고 있었죠.</span></span></span></p><p id=\"7b063cde-3dd1-4575-a80a-51a99da8dc1a\"><span><span><span>조직 내 QA 매니저가 없는 상태에서 새로운 분을 모셔오는건 정말 어려운 일이었어요. 그래서 외주업체에서 QA 테스트 전문가분들을 모셔와 MTS(모바일 트레이딩 시스템) 출시를 위한 테스트를 진행했어요.</span></span></span></p><p id=\"270f77a7-a840-4316-991e-a9081dcfce70\"><span><span><span>다시 말하면, 새로운 법인에서 메인 서비스를 출시하는데 단 3명의 QA 인력이 그 모든 품질 테스트를 담당했다는 것이죠.</span></span></span></p><p id=\"089df0d5-b754-451d-9ff8-8c0e4801e636\"><span><span><span>👀 </span><span>“3명이라고요?? 그게 가능한 일인가요?”</span></span></span></p><p id=\"7b17a6c3-b633-42e2-9949-fd519ef8ed01\"><span><span><span>당연히, 저 혼자만 QA를 진행할 수는 없었어요.</span></span></span></p><p id=\"7c6175e5-7a37-49a3-b500-eacef7789347\"><span><span><span>많은 팀원분들이 적극적으로 도움을 주셔서 가능했어요.</span></span></span></p><p id=\"5275dd3e-6460-4b3c-8906-49b2f9687ff9\"><span><span><span>토스증권이 서비스를 성공적으로 런칭할 수 있도록 같은 마음으로 바라봐주는 든든한 팀원분들이 없었다면 힘들었을 것 같아요. 당시 토스증권 팀원 총 70명 정도를 대상으로 </span><a href=\"https://istqb-glossary.page/beta-testing/\" rel=\"noreferrer noopener\" target=\"_blank\">클로즈 베타 테스트</a><span>를 1~2회 정도 진행하였고, 토스커뮤니티의 타 계열사 팀원분들께도 사전 신청을 받아 150명을 대상으로 하는 추가 테스트도 진행했어요.</span></span></span></p><p id=\"3f69e39b-650c-4982-9f4d-6ced63103528\"><span><span><span>이러한 과정을 통해 Edge Case를 발견하고 고객의 피드백도 미리 체험해볼 수 있었습니다. 제품에 진심인 팀원분들이 꼼꼼하게 피드백을 주시다 보니 서비스를 빠르게 개선해서 출시할 수 있었어요.</span></span></span></p><p id=\"8e9fe942-e739-428c-b5f3-8803e70e899c\"><span><span><span>(토스증권 서비스 출시 과정과 관련된 에피소드는 다음 포스팅에서 자세히 공개할께요)</span></span></span></p><h3 id=\"a73e70b1-0af3-49ba-819c-cb47f6af6a8f\"><span><span><span>토스증권 QA팀은 어떤 업무를 하나요?</span></span></span></h3><p id=\"67b58ef3-326c-4231-8686-e753a5d23ced\"><span><span><span>홀로 QA Manager로 근무하던 때에는 리소스가 부족하니 고객 접점이 높은 프론트 서비스를 기준으로 QA 범위를 정했었어요.</span></span></span></p><p id=\"a17a2949-95fc-4355-8e08-2cda2944cd0a\"><span><span><span>이제는 QA팀이 되어서 함께하는 든든한 동료분들이 있습니다. 각각 제품을 만드는 Silo/Team에 소속되어 프로덕트를 만드는 전 과정을 함께하고 있어요.</span></span></span></p><p id=\"cd7ee3f2-5fa0-47d0-8fb1-f02f7fe0fea4\"><span><span><span>QA가 일할 때 필요한 공통 정책을 정의하기도 하고 프로덕트의 QA 커버리지 확대를 위해 노력하고 있기도 합니다. QA Manager는 본인이 담당하고 있는 서비스를 대상으로 팀원들에게 탐색적 테스팅이나 Bug Bash를 제안하기도 해요. 주기적으로 QA Study도 진행하면서 자기 계발도 함께해요.</span></span></span></p><p id=\"677e517a-7523-49cb-a68b-b13a7c74a956\"><span><span><span>최근에는 Test Automation Engineer를 채용하기도 했어요. UI Automation Testing 설계뿐만 아니라 QA팀에서 필요한 도구를 개발하는 업무까지 수행하고 계세요.</span></span></span></p><p id=\"a2f4c6c8-3c93-42c7-a568-44924280dfbb\"><span><span><span>토스증권 QA팀은 테스트 커버리지를 계속해서 넓혀가고 있습니다. 장기적으로는 QA 품질 서비스 지표를 만들어서 변하지 않는 북극성 같은 목표를 만들고자 해요.</span></span></span></p><h3 id=\"a1fd935a-1559-4939-acc1-a701ec865fd6\"><span><span><span>토스증권에서 QA로 근무하면서 가장 만족하는 점은 무엇인가요?</span></span></span></h3><p id=\"f71ac6d0-c883-45c2-bd5d-e85eb4f8a122\"><span><span><span>제가 재직했던 여러 회사에서는 QA의 권한이 곧 QA 품질 보고서(Sign Off)라고 생각하는 경우가 많았어요. QA의 중요성을 주장하기 위해 보고서를 작성하느라 야근하는 일도 잦았죠. 품질팀에서는 버그나 장애에 대한 책임을 피하고자 테스트를 아웃소싱에 맡기는 경우도 많았습니다. QA에서 발견한 버그의 </span><a href=\"https://istqb-glossary.page/kr/%E1%84%8B%E1%85%AE%E1%84%89%E1%85%A5%E1%86%AB%E1%84%89%E1%85%AE%E1%86%AB%E1%84%8B%E1%85%B1-priority/\" rel=\"noreferrer noopener\" target=\"_blank\">Priority</a><span>, </span><a href=\"https://istqb-glossary.page/kr/%E1%84%89%E1%85%B5%E1%86%B7%E1%84%80%E1%85%A1%E1%86%A8%E1%84%83%E1%85%A9-severity/\" rel=\"noreferrer noopener\" target=\"_blank\">Severity</a><span>를 고려하지 않고 품질 확보라는 명목으로 서비스 출시일 자체를 미뤄버리는 경우도 있었어요.</span></span></span></p><p id=\"f6c599a9-000c-47b9-9ac6-5617e5931794\"><span><span><span>서비스 출시일이 계속 뒤로 밀리고 있는 게 과연 회사를 위한 일이 맞는지는 아직도 공감되지 않아요.</span></span></span></p><p id=\"07b36d9d-a27f-4684-9a6b-d06b01f1d99e\"><span><span><span>토스증권은 이러한 비효율적인 부분을 가장 지양합니다. 테스트케이스 수행 결과를 취합하고, Sign Off 결과에 대한 근거를 제공하기 위해 추가 이터레이션, Regression Test 일정을 확보하기 위해 문서 작업을 하는 등의 비효율이 없어요.</span></span></span></p><p id=\"77b8a65d-14b3-4c5c-a89b-b52a2065cb97\"><span><span><span>서비스 출시를 할 때 QA가 허들이 되는 것이 아니라, 안정적인, 좋은 품질의 서비스를 제공하여 고객 만족을 추구한다는 점에서 토스증권 QA Manager로 근무하고 있는 것이 만족스러워요.</span></span></span></p><h3 id=\"d30e40a3-23cb-4aad-bf3a-f72c1b556da7\"><span><span><span>토스증권에서는 어떠한 사람을 찾고 있나요? 🙋‍♂️🙋‍♀️</span></span></span></h3><p id=\"ffbd006f-d603-408a-91d7-7aaaf41bc05f\"><span><span><span>토스증권과 함께 성장하는 QA Manager가 되기 위해서는 다음과 같은 부분이 중요하다고 말씀드리고 싶어요.</span></span></span></p><blockquote id=\"4988c725-4725-4240-82b1-d0afab48d84b\"><span><span><span>QA에 대한 열정과 긍정적인 마음가짐을 바탕으로 토스증권 서비스의 품질을 향상시키기 위해 함께 고민할 수 있는, 고민하는 것을 즐기는 분</span></span></span></blockquote><p id=\"032eb15b-25d3-44a7-9140-8681fbe58ca8\"><span><span><span>QA 업무를 하시는 분들은 대부분 팀이 세팅되어있고 안정적으로 Iteration하고 있는 회사를 선호하시는 것 같아요. 새롭게 설립되는 QA팀의 경우, QA가 회사에서 꼭 필요한 역할이라는 것을 내부적으로 설득하는 것이 어렵기 때문일 수 있겠죠.</span></span></span></p><p id=\"d63aa2da-12d9-4113-8124-5f5a72bdf53e\"><span><span><span>토스증권은 팀원들이 QA의 중요성을 잘 알고 있고 QA팀이 설정해둔 목표 또한 명확합니다. 빠르게 성장하고 있는 서비스와 함께 QA 커버리지를 확대하기 위해 함께할 동료분들을 찾고 있어요.</span></span></span></p><p id=\"6123ebe3-2848-4903-b57f-543d049244b4\"><span><span><span>토스증권에서 메이커와 같은 시선으로 제품의 전 과정을 함께하는 QA Manager가 되어보세요!</span></span></span></p><p id=\"f943a871-e662-4789-a493-73fb77bb94c9\"><span><span><span>토스증권 QA Manager 채용공고 👉 </span><a href=\"https://toss.im/career/job-detail?job_id=4113699003\" rel=\"noreferrer noopener\" target=\"_blank\">바로가기</a></span></span></p><p id=\"3253d568-6d04-4d94-87fa-fde2e0bcc99f\"><span><span><span>토스증권 Test Automation Engineer 채용공고 👉 </span><a href=\"https://toss.im/career/job-detail?job_id=5207727003\" rel=\"noreferrer noopener\" target=\"_blank\">바로가기</a></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "13": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/10/tech-article-ts.png\"/><h1>TypeScript 타입 시스템 뜯어보기: 타입 호환성</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/byeongmuk-kim.png\"/><div><div><h3>김병묵</h3><h3>ㆍ<!-- -->Node.js Developer</h3></div><div>2022. 10. 26</div></div></section></header><div><p id=\"bcfecba5-6b07-4cd9-9cf4-f9296ad9f248\"><span><span><span>토스 Node.js 챕터에서는 높은 코드 가독성과 품질을 위해 TypeScript의 타입 시스템을 적극적으로 활용하고 있고 이에 대한 이해도를 높이기 위해 스터디를 꾸준히 진행하고 있습니다. TypeScript의 타입 시스템에 대해 공부해보던 중 알게된 흥미로운 몇가지 토픽들을 소개하려 합니다. 그 중 한가지로 이번글에서는 “타입 호환성 (type compatibility)”에 대해 알아보고자 합니다.</span></span></span></p><p id=\"ff7fa62d-f16d-46f6-b0de-f5ea1c0e5896\"><span><span><span>TypeScript 공식문서 </span><a href=\"https://www.typescriptlang.org/ko/docs/handbook/type-compatibility.html\" rel=\"noreferrer noopener\" target=\"_blank\">타입 호환성에 관한 글</a><span>을 보면 아래와 같이 소개하고 있습니다.</span></span></span></p><blockquote id=\"dc818b7d-f363-4ed6-8b1d-59d3b1543cc0\"><span><span><span>TypeScript의 타입 호환성은 구조적 서브타이핑(structural subtyping)을 기반으로 합니다. 구조적 타이핑이란 오직 멤버만으로 타입을 관계시키는 방식입니다. 명목적 타이핑(nominal typing)과는 대조적입니다. TypeScript의 구조적 타입 시스템의 기본 규칙은 y가 최소한 x와 동일한 멤버를 가지고 있다면 x와 y는 호환된다는 것입니다.</span></span></span></blockquote><p id=\"9e903c64-3025-465a-9093-5508e71c2d6c\"><span><span><span>위 내용에 대해 하나씩 이해해봅시다. 우선 강한 타입 시스템을 통해 높은 가독성과 코드 품질을 지향하는 TypeScript가 왜 타입 호환성을 지원하는 것일까요? 이 경우 타입 안정성에 문제가 생기게 되는 것은 아닐까요? 아래 예시를 통해 타입 호환성이 왜 필요한지 살펴보겠습니다.</span></span></span></p><figure id=\"bb662230-0510-4ee8-9c06-b29678558e16\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/190ed91b-5155-4d87-ba54-0639a891bcbb\"/></figure><p id=\"eec3475f-c9a8-4310-9143-0f5e4935ab80\"><span><span><span>위와 같이 음식 </span><code>Food</code><span> 타입의 객체를 인자로 받아 간단한 칼로리 계산 공식으로 주어진 음식의 칼로리를 구하는 </span><code>calculateCalorie</code><span> 함수가 있습니다. 타입과 함수는 아래와 같이 구현되어 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>Food</span> = <span>{</span>\n  <span>/** 각 영양소에 대한 gram 중량값 */</span>\n  <span>protein</span><span>:</span> <span>number</span><span>;</span>\n  carbohydrates<span>:</span> <span>number</span><span>;</span>\n  fat<span>:</span> <span>number</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>calculateCalorie</span><span>(</span><span>food</span><span>:</span> Food<span>)</span><span>{</span>\n  <span>return</span> <span>food</span>.<span>protein</span> * <span>4</span>\n    + <span>food</span>.<span>carbohydrates</span> * <span>4</span>\n    + <span>food</span>.<span>fat</span> * <span>9</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"bd427067-f3bb-4e09-9f6b-eca34d7b8a78\"><span><span><span>한편, 개발자가 코드를 작성하는 과정에서 (의도했거나 혹은 실수로) </span><code>calculateCalorie</code><span> 함수 인자에 여러가지 타입의 객체를 전달해본다고 가정해봅시다. 이 경우 TypeScript 타입 시스템은 프로그램이 타입 오류를 일으킬 가능성을 검사하게 됩니다.</span></span></span></p><figure id=\"f266e137-77a8-40c9-a6f4-8c3f9d4a28a0\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/6644199e-07d8-448e-9c3b-e9a051b2875f\"/></figure><p id=\"ed862c00-7e1e-4459-8188-a9959875b72a\"><span><span><span>위 3가지 케이스에 대해 Type Checker가 어떻게 판단하는 것이 좋을까요?</span></span></span></p><p id=\"e03708ae-5ef8-475a-b9ee-22671d8c2ef1\"><span><span><span>개발자가 정의한 </span><code>Food</code><span> 타입과 동일한 타입인 경우 (1번) 오류 없음이 명확하며, </span><code>Computer</code><span> 타입과 같이 다른 타입이며 칼로리 계산이 불가능한 경우 (2번) 오류로 판단하는 것이 명확합니다. 하지만, 햄버거를 의미하며 음식의 한 종류인 </span><code>Burger</code><span> 타입이 전달되는 경우 (3번) 어떻게 판단하는 것이 맞을까요?</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>Burger</span> = <span>Food</span> &amp; <span>{</span>\n  <span>/** 햄버거 브랜드 이름 */</span>\n  <span>burgerBrand</span><span>:</span> <span>string</span>;\n<span>}</span></code></pre></div></div></div></div><p id=\"ebb456ef-5633-41b5-aeb1-472687bc0d4e\"><span><span><span>심지어 </span><code>Burger</code><span> 타입이 위와 같이 </span><code>Food</code><span> 타입을 상속하며 칼로리 계산에 필요한 모든 프로퍼티를 포함하고 있어 런타임 상에서 정상적으로 동작한다면 이를 타입 오류라고 판단하는게 올바른 걸까요?</span></span></span></p><p id=\"cac1dcbd-45a3-496b-bbaf-c6d6eb99ab72\"><span><span><span>이처럼 실제로 정상적으로 동작할 수 있는 올바른 코드라면 타입 시스템은 개발자의 의도에 맞게 유연하게 대응하여 타입 호환성을 지원하는 것이 더 좋을 수 있습니다. 이러한 유연성을 위해 TypeScript 타입 시스템은 부분적으로 타입 호환을 지원하고 있습니다.</span></span></span></p><p id=\"721f808d-b1ce-4f28-aa64-05922e5b4163\"><span><span><span>한편 위에 예시에서 </span><code>Computer</code><span> 타입 사례처럼 타입오류로 판단하는 것이 명확한 경우가 있으며, 타입 안정성을 해치면서까지 유연함을 제공하는 것은 바람직하지 못합니다. 이를 위해서는 어떠한 경우에 호환을 허용할 것인지에 대한 명확한 규칙이 필요합니다. 이러한 규칙 중 프로그래밍 언어들에서 널리 활용되는 방식으로 명목적 서브타이핑(nominal subtyping)과 구조적 서브타이핑(structural subtpying)이 있습니다.</span></span></span></p><p id=\"74d04391-f5a5-4a93-8149-fcf1295f5835\"><span><span><span>명목적 서브타이핑은 아래와 같이 타입 정의 시에 상속 관계임을 명확히 명시한 경우에만 타입 호환을 허용하는 것입니다. 이 방법을 통해 타입 오류가 발생할 가능성을 배제하고, 개발자의 명확한 의도를 반영할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>/** 상속 관계 명시 */</span>\n<span>type </span><span>Burger</span> = <span>Food</span> &amp; <span>{</span>\n  <span>burgerBrand</span><span>:</span> <span>string</span>;\n<span>}</span>\n\n<span>const</span> <span>burger</span><span>:</span> Burger = <span>{</span>\n  <span>protein</span><span>:</span> <span>29</span><span>,</span>\n  <span>carbohydrates</span><span>:</span> <span>48</span><span>,</span>\n  <span>fat</span><span>:</span> <span>13</span><span>,</span>\n  <span>burgerBrand</span><span>:</span> <span>'버거킹'</span>\n<span>}</span>\n\n<span>const</span> <span>calorie</span> = <span>calculateCalorie</span><span>(</span><span>burger</span><span>)</span>\n<span>/** 타입검사결과 : 오류없음 (OK) */</span>\n\n</code></pre></div></div></div></div><p id=\"8a6fd563-c7d9-471b-a554-01d8374e2826\"><span><span><span>한편, 구조적 서브타이핑은 아래와 같이 상속 관계가 명시되어 있지 않더라도 객체의 프로퍼티를 기반으로 사용처에서 사용함에 문제가 없다면 타입 호환을 허용하는 방식입니다. 아래 예시를 보면 비록 상속 관계임을 명시하지는 않았지만 </span><code>burger</code><span> 변수는 </span><code>Food</code><span> 타입의 프로퍼티를 모두 포함하고 있고 따라서</span><code>calculateCalorie</code><span> 함수 실행과정에서 오류가 발생하지 않습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>burger</span> = <span>{</span>\n  <span>protein</span><span>:</span> <span>29</span><span>,</span>\n  <span>carbohydrates</span><span>:</span> <span>48</span><span>,</span>\n  <span>fat</span><span>:</span> <span>13</span><span>,</span>\n  <span>burgerBrand</span><span>:</span> <span>'버거킹'</span>\n<span>}</span>\n\n<span>const</span> <span>calorie</span> = <span>calculateCalorie</span><span>(</span><span>burger</span><span>)</span>\n<span>/** 타입검사결과 : 오류없음 (OK) */</span></code></pre></div></div></div></div><p id=\"ac250af6-b668-4041-9497-5357c236c362\"><span><span><span>구조적 서브타이핑 방식은 타입 시스템이 객체의 프로퍼티를 체크하는 과정을 수행해주므로써, 명목적 서브타이핑과 동일한 효과를 내면서도 개발자가 상속 관계를 명시해주어야 하는 수고를 덜어주게 됩니다. 참고로, 구조적 서브타이핑은 “만약 어떤 새가 오리처럼 걷고, 헤엄치고, 꽥꽥거리는 소리를 낸다면 나는 그 새를 오리라고 부를 것이다.” 라는 의미에서 덕 타이핑 (duck typing) 이라고도 합니다.</span></span></span></p><figure id=\"206cba23-3e04-487a-8a06-ff072de6bcd9\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/f491e29e-cf33-4d01-a7d1-ff470b1d6013\"/></figure><p id=\"a317a830-e447-4bf2-924c-5ff5d95fd9c1\"><span><span><span>TypeScript Type Checker는 구조적 서브타이핑을 기반으로 타입 호환을 판단합니다.</span></span></span></p><p id=\"5f5b2eca-9231-4a12-b595-d6653bb5a814\"><span><span><span>TypeScript는 구조적 서브타이핑을 지원하며, 명목적 서브타이핑만 지원하는 C#, Java 등의 언어는 명시적으로 상속 관계를 명시해주어야 타입 호환이 가능합니다.</span></span></span></p><blockquote id=\"0e096b1a-ffd0-4fcd-b007-91f57dc95a87\"><span><span><span>💡  한편, 여기서부터 좀 더 본격적인 이야기를 다루어 보겠습니다.</span></span></span></blockquote><p id=\"317977bd-bac1-4449-9703-eb31d9ce104c\"><span><span><span>위 구조적 서브타이핑 예시의 코드는 타입 호환성에 따라 타입 오류가 발생하지 않지만, 아래 코드의 경우 컴파일 과정에서 </span><code>Argument is not assignable to parameter of type 'Food'</code><span> 라는 타입 오류가 발생하게 됩니다. 글을 더 읽으시기에 앞서 실제로 </span><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAYg9nAJlAvFA3lAUASAPQBUBUggDVSCAY4ImjgMYOALo1IADNgOqtQDmATgIYC2UgiJOBJ9sBINVAJ4sUKGHZxgEAJYA7AFxRFAV24AjCOwDcEqAGNO7LXAAWIRFzkBnVRu26DkgGadgjzTv1YAvlhYbuqKRsDycIrGnAA2RgDCcXDsIAAUbgiIqvBIAJTohuwQwOrs0ZlIAHTSsgrRxAAsUADUUJWIVSZmlta2EHaiUM1tHVUewEMAnAFBoJBQAEJlrLqosFlQAGQYhloruotcitlQdsDsSqwGgVhGUedQ++yr7ACMqssva2iFOLVyJSqABMUwANIZuuYrDZPANVI0ABwQ9yeVRvADMKKeB3YR04J1UAHJACE9gAcawCdC0TZncHpMTLEUiA3usGYlkqk0s9Xm88pJCMRAAMLgFDxwABNYAagaggAaawA-NVBVIASMcAGp1QQBjo4AZcdE4lpike3N0wPWfwB9RB4MhpmhfThDmGyMME3RWL2uPxhKgpMp1Nu9119I5IFZcXZjM5+vYwL5UAFUBFEulcsVKo1WqCvseDKZGKD8SSofSxpkgJUUFB2KhvVh9gR9tRXigmOx4bdp09VICUckXe7Pd7fZ7McFgBDx+Oy+VQZVQQAR45qxEA\" rel=\"noreferrer noopener\" target=\"_blank\">TS Playground</a><span>를 통해 오류를 확인해보시고 다양하게 테스트해보시는 것도 추천합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>calorie</span> = <span>calculateCalorie</span><span>(</span><span>{</span>\n  <span>protein</span><span>:</span> <span>29</span><span>,</span>\n  <span>carbohydrates</span><span>:</span> <span>48</span><span>,</span>\n  <span>fat</span><span>:</span> <span>13</span><span>,</span>\n  <span>burgerBrand</span><span>:</span> <span>'버거킹'</span>\n<span>}</span><span>)</span>\n<span>/** 타임검사결과 : 오류 (NOT OK)*/</span></code></pre></div></div></div></div><p id=\"29de02e2-3361-41bf-a16d-0ac034307e71\"><span><span><span>왜 위 코드는 타입 호환이 지원되지 않는 것일까요? 처음에 이 오류를 마주쳤을 때 이런저런 테스트를 해보며 함수에 값을 바로 인자로 전달하는 경우만 타입 호환이 지원되지 않는 것 같다고 유추하기는 했으나 조금 더 구체적인 규칙과 이렇게 예외가 발생하는 이유에 대해 이해해보고자 했습니다.</span></span></span></p><p id=\"ed0a0924-8818-436a-9216-562b65b1bc4b\"><span><span><span>결과적으로 TypeScript 컴파일러 코드 상의 구현로직과 위 이슈와 연관된 </span><a href=\"https://github.com/Microsoft/TypeScript/pull/3823\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Github PR</a><span>을 통해 이해할 수 있었습니다. 이에 대해 알아보기 위해 우선 TypeScript 컴파일러가 동작하는 방식에 대해 간략히 살펴보겠습니다.</span></span></span></p><p id=\"90236585-1d5b-4895-9063-a2ee12114ac7\"><span><span><span>TypeScript 컴파일러가 동작하는 방식에 관해 아래 영상에 자세히 소개되어 있으며, 이 중 몇가지 내용만 요약하여 살펴보겠습니다.</span></span></span></p><p id=\"2c10cc47-fb5c-4a9c-b7f7-17cf1b10316e\"><span><span><a href=\"https://www.youtube.com/watch?v=X8k_4tZ16qU\" rel=\"noreferrer noopener\" target=\"_blank\">https://www.youtube.com/watch?v=X8k_4tZ16qU</a></span></span></p><p id=\"5192df06-ae5d-4c9b-adff-5a2fefc2483d\"><span><span><span>TypeScript 컴파일러의 역할은 TypeScript 소스코드를 AST (Abstract Syntax Tree)로 변환한 뒤, 타입 검사를 수행하고, 그 후 JavaScript 소스코드로 변환하는 과정을 담당합니다.</span></span></span></p><p id=\"907490a7-de7e-432b-b710-90979abf0267\"><span><span><span>TypeScript 소스코드를 AST로 변환하는 과정은 </span><code>parser.ts, scanner.ts</code><span> , 타입 검사를 수행하는 과정은 </span><code>binder.ts, checker.ts</code><span>, AST를 JavaScript 소스코드로 변환하는 과정은 </span><code>emitter.ts, transformer.ts</code><span> 등의 파일이 담당하고 있습니다.</span></span></span></p><figure id=\"6c89f823-1b09-49c4-abba-bbd3c29aaaf2\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/dd8a1a19-1a13-4b51-a798-019879592bbb\"/></figure><p id=\"683e0858-83c2-4402-87fd-29d5ccfe61e5\"><span><span><span>실제로 </span><a href=\"https://github.com/microsoft/TypeScript/tree/main/src/compiler\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Github의 compiler 디렉토리</a><span>에 가면 위 코드 파일이 어떤식으로 구현되어 있는지 확인해볼 수 있으며, 이번 글에서 다루고 있는 주제인 구조적 서브타이핑과 타입 호환에 관한 부분은 타입 검사와 가장 연관이 높은 </span><code>checker.ts</code><span> 파일의 </span><code>hasExcessProperties()</code><span> 함수에서 처리하고 있었습니다.</span></span></span></p><p id=\"bf4c443e-f191-477f-872a-4a8299dee4b7\"><span><span><span>아래는 </span><code>checker.ts</code><span> </span><a href=\"https://raw.githubusercontent.com/microsoft/TypeScript/main/src/compiler/checker.ts\" rel=\"noreferrer noopener\" target=\"_blank\">코드</a><span> 중 타입 호환의 예외가 발생하는 지점의 코드를 주요한 부분만 남기고 간소화한 것입니다. 주석과 함께 봐주시면 좋을 것 같습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>/** 함수 매개변수에 전달된 값이 FreshLiteral인 경우 true가 됩니다. */</span>\n<span>const</span> <span>isPerformingExcessPropertyChecks</span> =\n    <span>getObjectFlags</span><span>(</span><span>source</span><span>)</span> &amp; <span>ObjectFlags</span>.<span>FreshLiteral</span><span>;</span>\n\n<span>if</span> <span>(</span><span>isPerformingExcessPropertyChecks</span><span>)</span> <span>{</span>\n    <span>/** 이 경우 아래 로직이 실행되는데,\n     * hasExcessProperties() 함수는\n     * excess property가 있는 경우 에러를 반환하게 됩니다.\n     * 즉, property가 정확히 일치하는 경우만 허용하는 것으로\n     * 타입 호환을 허용하지 않는 것과 같은 의미입니다. */</span>\n    <span>if</span> <span>(</span><span>hasExcessProperties</span><span>(</span><span>source</span> <span>as</span> FreshObjectLiteralType<span>)</span><span>)</span> <span>{</span>\n        <span>reportError</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n<span>/**\n * FreshLiteral이 아닌 경우 위 분기를 skip하게 되며,\n * 타입 호환을 허용하게 됩니다. */</span></code></pre></div></div></div></div><p id=\"95ebedb3-3d60-4fd6-a0fe-18c00bc1c5e0\"><span><span><span>지면상 다소 간소화한 코드만 남겨두었지만, 함수에 인자로 들어온 값이 </span><code>FreshLiteral</code><span> 인지 아닌지 여부에 따라 조건분기가 발생하여 타입 호환 허용 여부가 결정된다는 것을 확인할 수 있었습니다.</span></span></span></p><p id=\"d0c5f9fa-008c-41a7-bd2a-4d292add3717\"><span><span><span>그렇다면 </span><code>Fresh Literal</code><span> 이란 무엇이며, 왜 이 경우에는 타입 호환의 예외가 발생하도록 되어 있는 것일까요?</span></span></span></p><p id=\"6cbcd2b8-16bd-4447-8d64-cbac7306968f\"><span><span><span>TypeScript는 구조적 서브타이핑에 기반한 타입 호환의 예외 조건과 관련하여 </span><a href=\"https://radlohead.gitbook.io/typescript-deep-dive/type-system/freshness\" rel=\"noreferrer noopener\" target=\"_blank\">신선도 (Freshness)</a><span> 라는 개념을 제공합니다. 모든 object literal은 초기에 “fresh” 하다고 간주되며, 타입 단언 (type assertion) 을 하거나, 타입 추론에 의해 object literal의 타입이 확장되면 “freshness”가 사라지게 됩니다. 특정한 변수에 object literal을 할당하는 경우 이 2가지 중 한가지가 발생하게 되므로 “freshness”가 사라지게 되며, 함수에 인자로 object literal을 바로 전달하는 경우에는 “fresh”한 상태로 전달됩니다.</span></span></span></p><p id=\"f8491224-ca08-42b8-903a-15248a1293a2\"><span><span><span>한편, </span><a href=\"https://github.com/Microsoft/TypeScript/pull/3823\" rel=\"noreferrer noopener\" target=\"_blank\">TypeScript Github PR (2015년 7월) 의 논의</a><span>에 따르면, fresh object인 경우에는 예외적으로 타입 호환을 허용하지 않기로 했음을 확인할 수 있습니다. 그러한 이유에 대해 살펴보겠습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>/** 부작용 1\n * 코드를 읽는 다른 개발자가 calculateCalorie 함수가\n * burgerBrand를 사용한다고 오해할 수 있음 */</span>\n<span>const</span> <span>calorie1</span> = <span>calculateCalorie</span><span>(</span><span>{</span>\n  <span>protein</span><span>:</span> <span>29</span><span>,</span>\n  <span>carbohydrates</span><span>:</span> <span>48</span><span>,</span>\n  <span>fat</span><span>:</span> <span>13</span><span>,</span>\n  <span>burgerBrand</span><span>:</span> <span>'버거킹'</span>\n<span>}</span><span>)</span>\n\n<span>/** 부작용 2\n * birgerBrand 라는 오타가 발생하더라도\n * excess property이기 때문에 호환에 의해 오류가\n * 발견되지 않음 */</span>\n<span>const</span> <span>calorie2</span> = <span>calculateCalorie</span><span>(</span><span>{</span>\n  <span>protein</span><span>:</span> <span>29</span><span>,</span>\n  <span>carbohydrates</span><span>:</span> <span>48</span><span>,</span>\n  <span>fat</span><span>:</span> <span>13</span><span>,</span>\n  <span>birgerBrand</span><span>:</span> <span>'버거킹'</span>\n<span>}</span><span>)</span></code></pre></div></div></div></div><p id=\"5eff7761-f18b-4630-b39d-4a63d54e96f2\"><span><span><span>구조적 서브타이핑에 기반한 타입 호환은 유연함을 제공한다는 이점이 있지만, 위 코드 사례와 같이 코드를 읽는 다른 개발자의 입장에서 함수가 실제 다루는 것보다 더 많은 데이터를 받아들인다는 오해를 불러일으킬 수 있고, 프로퍼티 키에 대한 오타가 발생하더라도 오류가 확인되지 않는 부작용이 있습니다.</span></span></span></p><p id=\"f40d4bc4-e8b1-467f-91bd-9952b477c913\"><span><span><span>한편, fresh object를 함수에 인자로 전달한 경우, 이는 특정한 변수에 할당되지 않았으므로 어차피 </span><span>해당 함수에서만 사용되고 다른 곳에서 사용되지 않습니다.</span><span> 이 경우 유연함에 대한 이점보다는 부작용을 발생시킬 가능성이 높으므로 굳이 구조적 서브타이핑을 지원해야할 이유가 없습니다.</span></span></span></p><figure id=\"5c97c945-2676-4a1f-bafa-a16dda957ff0\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/cd3b6899-da42-429f-8d4a-d49f08467754\"/></figure><p id=\"a1c2af12-49b0-4e8e-81eb-f686728b4c98\"><span><span><span>TypeScript Type Checker는 구조적 서브타이핑을 기반으로 타입 호환을 판단하되,Freshness에 따라 예외를 둡니다.</span></span></span></p><p id=\"0328686d-9556-4d67-ba0a-90683e22b25e\"><span><span><span>이처럼 타입 호환성은 유연함이라는 이점을 제공하지만 그로 인해 부작용이 발생할 수 있으므로, 이에 대한 절충안으로 타입 호환을 제공해서 얻는 이점이 거의 없는 fresh object에 대해서는 호환성을 지원하지 않기로 논의되어 TypeScript 컴파일러 코드에 반영된 것을 확인해볼 수 있었습니다.</span></span></span></p><p id=\"88a2135a-b47b-47e8-9023-7f387cdca022\"><span><span><span>한편, 그럼에도 개발자가 fresh object에 대해서 타입 호환을 허용하고자 한다면 아래와 같이 함수 매개변수 타입에 index signature를 포함시켜두어 명시적으로 타입 호환을 허용시키는 것이 가능합니다. 또는 tsconfig 상에 </span><code>suppressExcessPropertyErrors</code><span> 를 true로 설정하는 방식도 가능합니다. (이 또한 </span><a href=\"https://github.com/Microsoft/TypeScript/pull/3823\" rel=\"noreferrer noopener\" target=\"_blank\">동일한 PR 논의</a><span>에 정의되어 있습니다.)</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>Food</span> = <span>{</span>\n  <span>protein</span><span>:</span> <span>number</span><span>;</span>\n  carbohydrates<span>:</span> <span>number</span><span>;</span>\n  fat<span>:</span> <span>number</span><span>;</span>\n  <span>[</span><span>x</span><span>:</span><span> </span>string<span>]</span><span>:</span> <span>any</span>                  <span>/** index signature */</span>\n<span>}</span>\n\n<span>const</span> <span>calorie</span> = <span>calculateCalorie</span><span>(</span><span>{</span>\n  <span>protein</span><span>:</span> <span>29</span><span>,</span>\n  <span>carbohydrates</span><span>:</span> <span>48</span><span>,</span>\n  <span>fat</span><span>:</span> <span>13</span><span>,</span>\n  <span>burgerBrand</span><span>:</span> <span>'버거킹'</span>\n<span>}</span><span>)</span>\n<span>/** 타임검사결과 : 오류없음 (OK) */</span>\n\n</code></pre></div></div></div></div><p id=\"84c0b00f-d1d4-4713-8403-d7c481aa59a3\"><span><span><span>또한 반대로 모든 경우에 대해 타입 호환을 허용하지 않도록 강제하는 것도 가능한데 이를 위해 사용할 수 있는 기법이 Branded type (또는 Branding type) 입니다. 아래와 같이 의도적으로 </span><code>__brand</code><span> 와 같은 프로퍼티를 추가시켜, 개발자가 함수의 매개변수로 정의한 타입 외에는 호환이 될 수 없도록 강제하는 기법입니다. 온도(섭씨, 화씨)나 화폐단위(원, 달러, 유로)와 같이 같이 </span><code>number</code><span> 타입이지만 서로 다를 의미를 가질 수 있어 명시적인 구분이 필요할 때 사용해볼 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>type </span><span>Brand</span>&lt;<span>K</span><span>,</span> <span>T</span>&gt; = <span>K</span> &amp; <span>{</span> <span>__brand</span><span>:</span> <span>T</span><span>}</span><span>;</span>\n<span>type </span><span>Food</span> = <span>Brand</span>&lt;<span>{</span>\n  <span>protein</span><span>:</span> <span>number</span><span>;</span>\n  carbohydrates<span>:</span> <span>number</span><span>;</span>\n  fat<span>:</span> <span>number</span><span>;</span>\n<span>}</span><span>,</span> <span>'Food'</span>&gt;\n\n<span>const</span> <span>burger</span> = <span>{</span>\n  <span>protein</span><span>:</span> <span>100</span><span>,</span>\n  <span>carbohydrates</span><span>:</span> <span>100</span><span>,</span>\n  <span>fat</span><span>:</span> <span>100</span><span>,</span>\n  <span>burgerBrand</span><span>:</span> <span>'버거킹'</span>\n<span>}</span>\n\n<span>calculateCalorie</span><span>(</span><span>burger</span><span>)</span>\n<span>/** 타임검사결과 : 오류 (NOT OK) */</span>\n\n</code></pre></div></div></div></div><p id=\"7ba509d4-df40-4d0e-a785-2671867a6267\"><span><span><span>앞선 글을 통해 이해한 타입 호환의 이점과 부작용에 대한 이해를 바탕으로 개발자는 자신의 프로젝트를 진행하는 과정에서 필요에 맞게 </span><code>index signature</code><span>, </span><code>tsconfig &gt; suppressExcessPropertyErrors</code><span>, </span><code>branded type</code><span> 등을 통해 타입 호환성의 범위를 선택하여 개발하는 것이 가능할 것입니다.</span></span></span></p><figure id=\"0b4ced67-d6c4-423a-8393-f6942745344c\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/d5e2eb3e-7dc1-4597-8c6f-7cbfa62fa853\"/></figure><p id=\"61fbec14-e559-4262-9cb6-8cb83ea4f5a5\"><span><span><span>TypeScript Type Checker는 내부적인 규칙에 따라 타입 호환을 판단하지만,개발자가 필요에 따라 선택하는 것이 가능합니다.</span></span></span></p><p id=\"aad1a3ca-42a1-4157-8c54-29f1fba8af0a\"><span><span><span>이번글의 내용을 모두 요약하면 아래와 같습니다.</span></span></span></p><ul><li id=\"2cae9398-630e-4c2c-b770-94d5673f15d3\"><span><span><span>타입 검사의 안정성과 유연함 사이에서 절충안으로 도입된 개념이 타입 호환성입니다. 그리고 타입 호환성을 지원하는 방법과 관련하여 개발자에게 명시적 선언을 어디까지 요구할 것인지에 대한 선택지가 존재합니다.</span></span></span></li><li id=\"56eb12d0-cc29-443f-a3cd-38a599e0f28c\"><span><span><span>TypeScript는 구조적 서브타이핑에 기반한 타입 호환을 통해 개발자의 명시적 선언을 줄여주는 한편 이로 인한 부작용을 개선하고자 freshness에 기반한 예외조건을 두었고, Index Signature와 Branded type 등의 방식을 통해 개발자가 명시적으로 선택할 수 있는 선택지를 만들어두었습니다.</span></span></span></li><li id=\"1a41b1c8-87c1-4b86-b1c0-967b97600f8f\"><span><span><span>프로그래밍 언어마다 타입 검사가 동작하는 방식이 다르며 이는 해당 언어를 개발한 커뮤니티의 논의와 의사결정에 따라 선택된 결과라고 볼 수 있습니다. 본 주제 외에도 TypeScript 컴파일러 코드와 Github PR을 살펴보면 흥미로운 논의와 토픽들을 확인해볼 수 있습니다.</span></span></span></li></ul><p id=\"38189c0e-bf63-4aed-9210-5967f8d5eb2d\"><span><span><span>토스 Node.js 챕터는 토스의 다양한 제품과 라이브러리 개발을 위해 팀원들의 지속적인 성장이 중요하다고 믿으며, 이를 위해 꾸준히 공부하고 공유하는 자리를 가지고 있으니 많은 관심 부탁드립니다.</span></span></span></p><p id=\"09bc4538-0b32-43c6-9979-c13b31456115\"><span><span><span>토스 Node.js Chapter 채용 공고 👉 </span><a href=\"https://toss.im/career/jobs?search=node.js\" rel=\"noreferrer noopener\" target=\"_blank\">바로가기</a></span></span></p><p id=\"2bbffc2c-fc21-4aa0-9c6f-71f0abe5deef\"><span><span><span>감사합니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "14": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"nestjs-custom-decorator\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/11/tech-article-nest-js-02.png\"/><h1>NestJS 환경에 맞는 Custom Decorator 만들기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/hyeonji-song.jpg\"/><div><div><h3>송현지</h3><h3>ㆍ<!-- -->Node.js Developer</h3></div><div>2022. 11. 22</div></div></section></header><div><p id=\"d698bf35-07cd-4f0f-8d93-19b4229adf31\"><span><span><span>데코레이터는 비즈니스와 상관 없는 로직들을 숨기면서 기능을 변경하거나 확장할 수 있게 합니다. 또한 여러 클래스에서 반복되는 공통 관심사가 있을 때 데코레이터를 사용하면 중복된 코드를 줄이고 코드를 모듈 단위로 관리하는 효과를 거둘 수 있습니다.</span></span></span></p><figure id=\"ac420239-9719-49ba-bad6-e00360fc7579\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/2abee564-a825-4b84-a379-ac6ee105e848\"/></figure><p id=\"50824874-d4ca-4dd4-b5b5-022d31d84cc7\"><span><span><span>이런 이유로 저희 Node.js Chapter에서도 데코레이터를 적극 활용하고 있습니다. 하지만 NestJS에서는 데코레이터를 만들 때 다음과 같은 질문들이 있었습니다.</span></span></span></p><ol><li id=\"02cd8f4e-2a94-4d39-b116-ed3184dcccf3\"><span><span><span>데코레이터에서 Provider를 사용해야할 때 어떻게 Provider에 접근할 수 있을까?</span></span></span></li><li id=\"3ba2e360-3922-47e5-b154-bf9b1aefffed\"><span><span><span>메타데이터를 쓰는 NestJS 데코레이터를 일반 데코레이터와 사용해도 괜찮을까?</span></span></span></li></ol><p id=\"2670bedf-0eab-4219-ad46-8dbf63a1ecea\"><span><span><span>NestJS에서 데코레이터를 만들기 위해서는 NestJS의 DI와 메타 프로그래밍 환경 등을 고려해야 합니다. 그래서 이 글을 통해 NestJS에서는 어떻게 데코레이터를 만드는지 살펴보고, 앞의 두 질문들을 고려하여 NestJS 환경에 맞는 데코레이터를 만들어보려고 합니다.</span></span></span></p><p id=\"14f61fc0-0756-4ae7-be97-76044b832660\"><span><span><span>들어가기 전에, 만약 데코레이터나 메타데이터가 생소하시다면 아래 문서들을 읽어보시는 걸 추천드립니다.</span></span></span></p><ul><li id=\"243b0ced-5523-433d-96ba-b7fd33c2348f\"><span><span><a href=\"https://www.typescriptlang.org/ko/docs/handbook/decorators.html\" rel=\"noreferrer noopener\" target=\"_blank\">Typescript Decorator</a></span></span></li><li id=\"e52f445a-791b-455c-9451-b1c0a42c719b\"><span><span><a href=\"https://www.npmjs.com/package/reflect-metadata\" rel=\"noreferrer noopener\" target=\"_blank\">reflect-metadata</a></span></span></li></ul><hr/><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Injectable</span><span>(</span><span>)</span>\n<span>class</span> TestService <span>{</span>\n  @<span>Cacheable</span><span>(</span><span>'key'</span><span>)</span>\n  <span>test</span><span>(</span><span>)</span> <span>{</span>\n      <span>// 비즈니스 로직</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"a09782e6-bf76-4f8a-8ce5-92c0ba453a22\"><span><span><span>TestService가 있을 때, 캐싱 로직을 Cacheable 데코레이터를 사용해 비즈니스 로직과 분리하려고 합니다.Cacheable 데코레이터에서 </span><code>CacheManager</code><span>라는 Provider를 사용하려면 어떻게 접근해야 할까요?</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Module</span><span>{</span>\n  imports<span>:</span> <span>[</span><span>CacheModule</span>.<span>register</span><span>(</span><span>...</span><span>)</span><span>]</span>\n  providers<span>:</span> <span>[</span><span>TestService</span><span>]</span>\n<span>}</span>\n<span>class</span> TestModule <span>{</span><span>}</span></code></pre></div></div></div></div><p id=\"bb1889a4-ddd0-47a6-aa66-ba69a0ef37ab\"><span><span><span>CacheManager Provider를 export하는 CacheModule을 import 해봅시다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>function</span> <span>Cacheable</span><span>(</span><span>key</span><span>:</span> string<span>,</span> <span>ttl</span><span>:</span> number<span>)</span> <span>{</span>\n  <span>return</span> <span>function</span> <span>(</span><span>target</span><span>:</span> any<span>,</span> <span>_key</span><span>:</span> string<span>,</span> <span>descriptor</span><span>:</span> PropertyDescriptor<span>)</span> <span>{</span>\n    <span>const</span> <span>methodRef</span> = <span>descriptor</span>.<span>value</span><span>;</span>\n\n    <span>descriptor</span>.<span>value</span> = <span>async</span> <span>function</span> <span>(</span><span>...</span><span>args</span><span>:</span> any<span>[</span><span>]</span><span>)</span> <span>{</span>\n    <span>console</span>.<span>log</span><span>(</span><span>this</span><span>)</span> <span>// TestService {}</span>\n\n    <span>// TypeError: Cannot read properties of undefined (reading 'get')</span>\n    <span>const</span> <span>value</span> = <span>await</span> <span>this</span>.<span>cache</span>.<span>get</span><span>(</span><span>key</span><span>)</span><span>;</span>\n    <span>if</span> <span>(</span><span>value</span><span>)</span> <span>{</span>\n      <span>return</span> <span>value</span><span>;</span>\n    <span>}</span>\n\n    <span>const</span> <span>result</span> = <span>await</span> <span>methodRef</span>.<span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span><span>args</span><span>)</span><span>;</span>\n    <span>await</span> <span>this</span>.<span>cache</span>.<span>set</span><span>(</span><span>key</span><span>,</span> <span>result</span><span>,</span> <span>ttl</span><span>)</span><span>;</span>\n    <span>console</span>.<span>log</span><span>(</span><span>result</span><span>)</span>\n    <span>return</span> <span>result</span><span>;</span>\n    <span>}</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><figure id=\"c94283bd-ba4a-40b0-adca-c6177addd082\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/06ce4152-6060-4842-ac47-39a15a4eb8d7\"/></figure><p id=\"fca4a50e-0ecc-41fc-8c76-07471eeb8913\"><span><span><span>TestModule에서 CacheModule을 import하고 있긴 하지만 TestService에서 CacheManager 를 주입하지 않는 이상 Cacheable에서 CacheManager에 접근할 방법이 없습니다. Cacheable 데코레이터를 사용하려면 클래스에 항상 CacheManager를 주입해주어야 하는 불편함이 있습니다.</span></span></span></p><p id=\"3b1b73fe-3c65-4053-8e84-5a53e2bfbd01\"><span><span><span>게다가 CacheManager를 넣어준다고 해도 멤버 이름을 </span><code>cache</code><span> 로 강제해야 합니다. 가능한 방법이지만 휴먼 에러가 발생할 수 있어 좋은 방법은 아닙니다.</span></span></span></p><p id=\"e2078c98-0383-48e5-a093-b73c04068863\"><span><span><span>그렇다면 NestJS 메서드 데코레이터는 어떻게 되어있을까요?</span></span></span></p><p id=\"2099bf57-825d-4174-a099-001040c6e54f\"><span><span><span>NestJS가 데코레이터를 등록하는 과정은 ‘</span><span>마킹 - 조회 - 등록</span><span>’로 크게 세 단계로 나뉩니다. </span><code>Cron</code><span> 메서드 데코레이터를 예로 들어보겠습니다.</span></span></span></p><figure id=\"0a7cf8ba-0517-4903-a092-2e1880730b3e\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/33970dbe-8f0d-4c77-b04d-687bad687d84\"/></figure><ol><li id=\"0677434e-7e97-4c45-8a00-f865fd3acd2d\"><span><span><span>마킹 - SetMetadata라는 함수로 특정 메서드에 </span><code>CRON</code><span> 심볼을 메타데이터 키로 등록합니다.</span></span></span></li><li id=\"fd0df984-70df-4867-9aaa-308255bbe2cd\"><span><span><span>조회 - 모듈이 초기화되는 시점에 DiscoveryServiced와 MetadataScanner로 모든 Provider 클래스를 순회하며 </span><code>CRON</code><span> 심볼을 메타데이터로 가지고 있는 메서드들을 찾습니다.</span></span></span></li><li id=\"d4e21a20-d213-4291-96ef-e0d556bbccf1\"><span><span><span>등록 - 메서드를 찾았으면 해당 메서드를 크론 잡으로 등록합니다.</span></span></span></li></ol><p id=\"35e898cb-60a8-42aa-b091-0d815cd4a9f7\"><span><span><span>NestJS에서 제공하는 SetMetadata와 DiscoverService, 그리고 MetadataScanner를 사용하면, 특정 클래스나 메서드만 필터링하여 IoC 내 다른 Provider를 사용해 원하는 로직들을 적용할 수 있습니다.</span></span></span></p><h2 id=\"ec2235d8-8a1c-4f0e-a790-8af99b4c3008\"><span><span><span>SetMetadata</span></span></span></h2><p id=\"16252adf-da9e-4394-a3ae-5a0d7aeff855\"><span><span><span>SetMetadata는 </span><span>타겟(클래스, 메서드)에 메타데이터를 마킹하는 데코레이터</span><span>를 반환하는 함수입니다. NestJS의 코드를 보면 아래와 같습니다. </span><a href=\"https://github1s.com/nestjs/nest/blob/HEAD/packages/common/decorators/core/set-metadata.decorator.ts#L22-L37\" rel=\"noreferrer noopener\" target=\"_blank\">setMetadata 코드</a></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>const</span> <span>SetMetadata</span> = <span>&lt;</span><span>K</span> = <span>string</span><span>,</span> <span>V</span> = <span>any</span>&gt;<span>(</span>\n  <span>metadataKey</span><span>:</span> K<span>,</span>\n  <span>metadataValue</span><span>:</span> V<span>,</span>\n<span>)</span><span>:</span> CustomDecorator&lt;<span>K</span>&gt; <span>=&gt;</span> <span>{</span>\n  <span>const </span>decoratorFactory = <span>(</span><span>target</span><span>:</span> object<span>,</span> <span>key</span>?<span>:</span> any<span>,</span> <span>descriptor</span>?<span>:</span> any<span>)</span> <span>=&gt;</span> <span>{</span>\n    <span>// method or class에 메타데이터 등록</span>\n    <span>Reflect</span>.<span>defineMetadata</span><span>(</span><span>metadataKey</span><span>,</span> <span>metadataValue</span><span>,</span> <span>class</span> <span>or</span> method<span>)</span><span>;</span>\n    <span>return</span> <span>target</span><span>;</span>\n  <span>}</span><span>;</span>\n  <span>decoratorFactory</span>.<span>KEY</span> = <span>metadataKey</span><span>;</span>\n  <span>return</span> <span>decoratorFactory</span><span>;</span>\n<span>}</span><span>;</span></code></pre></div></div></div></div><p id=\"0aa3a231-c1e7-4aeb-8468-f7684d85c603\"><span><span><code>Reflect.defineMetadata(metadataKey, metadataValue, class or method);</code></span></span></p><p id=\"bf51036e-2031-479b-9ae0-26c7c16b0c44\"><span><span><span>SetMetadata 함수 내부에서는 *</span><code>Reflect.defineMetadata</code><span> 메서드를 통해 타겟 객체에 metadataKey를 키, metadataValue를 값으로 하는 </span><a href=\"https://medium.com/jspoint/what-are-internal-slots-and-internal-methods-in-javascript-f2f0f6b38de\" rel=\"noreferrer noopener\" target=\"_blank\">내부 슬롯</a><span>을 정의합니다. (</span><code>[[Metadata]]</code><span> )*</span><code>Reflect</code><span> 는 </span><a href=\"https://www.npmjs.com/package/reflect-metadata\" rel=\"noreferrer noopener\" target=\"_blank\">reflect-metadata</a><span> 라이브러리가 설치되어있는 경우 사용할 수 있습니다. 메타데이터를 정의하거나 조회하는 데 사용합니다.</span></span></span></p><p id=\"99e0cf2f-a4fb-432a-b1f3-8322fc0aaa44\"><span><span><code>SetMetadata(KEY, value) -&gt; CustomDecorator;</code></span></span></p><p id=\"2447673c-b094-41a0-9349-7ce87718db0d\"><span><span><span>SetMetadata의 리턴값은 클래스, 메서드 데코레이터로 사용 가능합니다. 해당 데코레이터로 타겟 클래스나 메서드에 대한 메타데이터를 설정할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>SOMETHING</span> = <span>Symbol</span><span>(</span><span>'SOMETHING'</span><span>)</span>\n\n<span>function</span> <span>CustomDecorator</span><span>(</span><span>key</span><span>:</span> string | symbol<span>)</span> <span>{</span>\n  <span>// SetMetadata(SOMETHING, key)와 다른 데코레이터를 합성할 수 있습니다.</span>\n  <span>return</span> <span>applyDecorators</span><span>(</span><span>SetMetadata</span><span>(</span><span>SOMETHING</span><span>,</span> <span>key</span><span>)</span><span>,</span> <span>AnotherDecorator</span><span>)</span>\n<span>}</span>\n\n@<span>CustomDecorator</span><span>(</span><span>'KEY1'</span><span>)</span>\n<span>class</span> DecoratedClass <span>{</span><span>}</span></code></pre></div></div></div></div><p id=\"068fd137-55fe-4d66-9bca-40b6a323705b\"><span><span><code>DecoratedClass</code><span>에 </span><code>SOMETHING</code><span> 심볼을 메타데이터 키, </span><code>'KEY1'</code><span>을 메타데이터 값으로 등록합니다.</span></span></span></p><h2 id=\"6b992989-6492-46d7-aabb-20d9586eeed0\"><span><span><span>DiscoveryService</span></span></span></h2><p id=\"59fd8567-5163-4825-b089-e6587002941a\"><span><span><span>NestJS는 DiscoveryModule 을 제공합니다. DiscoveryModule의 DiscoveryService에서는 내부적으로 modulesContainer를 사용하여 모든 모듈의 Controller와 Provider 클래스를 조회할 수 있습니다.</span></span></span></p><p id=\"8a92ec7d-e9df-468a-acc9-02a7f240d26c\"><span><span><code>DiscoverService</code><span>를 사용하여 모든 Provider 클래스를 순회하며, SetMetadata로 등록했던 메타데이터 키로 특정 Provider를 필터링할 수 있게 됩니다.</span></span></span></p><p id=\"46924cd2-6df1-4a6d-95b8-e947bf76974a\"><span><span><a href=\"https://github.com/nestjs/nest/blob/master/packages/core/discovery/discovery-service.ts\" rel=\"noreferrer noopener\" target=\"_blank\">DiscoveryService 코드</a></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Injectable</span><span>(</span><span>)</span>\n<span>export</span> <span>class</span> DiscoveryService <span>{</span>\n  <span>constructor</span><span>(</span><span>private</span> readonly modulesContainer<span>:</span> ModulesContainer<span>)</span> <span>{</span><span>}</span>\n\n  <span>getProviders</span><span>(</span>\n    <span>options</span><span>:</span> DiscoveryOptions = <span>{</span><span>}</span><span>,</span>\n    <span>modules</span><span>:</span> Module<span>[</span><span>]</span> = <span>this</span>.<span>getModules</span><span>(</span><span>options</span><span>)</span><span>,</span>\n  <span>)</span><span>:</span> InstanceWrapper<span>[</span><span>]</span> <span>{</span>\n    <span>return</span> <span>modules</span>.<span>flatMap</span><span>(</span><span>item</span> <span>=&gt;</span> <span>[</span><span>...</span><span>item</span>.<span>providers</span>.<span>values</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>// ...생략</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"91815530-6103-4eb4-a70d-4ad7d9ba0036\"><span><span><span>CustomDecorator 가 붙은 메서드를 찾는 과정을 예로 들어보겠습니다. 메타데이터 키는 </span><code>CUSTOM_DECORATOR</code><span>  심볼이고, 메타데이터 값은 </span><code>test-value </code><span>입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>const</span> <span>CUSTOM_DECORATOR</span> = <span>Symbol</span><span>(</span><span>\"CUSTOM_DECORATOR\"</span><span>)</span><span>;</span>\n<span>export</span> <span>const</span> <span>CustomDecorator</span> = <span>SetMetadata</span><span>(</span><span>CUSTOM_DECORATOR</span><span>,</span> <span>'test-value'</span><span>)</span><span>;</span>\n\n@<span>CustomDecorator</span>\n@<span>Injectable</span><span>(</span><span>)</span>\n<span>class</span> TestService <span>{</span>\n  <span>test</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"c4e99097-1de5-4bf2-93f7-0689f7954820\"><span><span><span>아래의 </span><code>explorerService.find(CUSTOM_DECORATOR)</code><span> 메서드를 실행하면 어떻게 될까요?</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>{</span> <span>Injectable</span> <span>}</span> <span>from</span> <span>'@nestjs/common'</span><span>;</span>\n<span>import</span> <span>{</span> <span>DiscoveryService</span><span>,</span> <span>MetadataScanner</span><span>,</span> <span>Reflector</span> <span>}</span> <span>from</span> <span>'@nestjs/core'</span><span>;</span>\n\n@<span>Injectable</span><span>(</span><span>)</span>\n<span>export</span> <span>class</span> ExplorerService <span>{</span>\n  <span>constructor</span><span>(</span>\n    <span>private</span> readonly discoveryService<span>:</span> DiscoveryService<span>,</span>\n  <span>)</span> <span>{</span><span>}</span>\n\n  <span>find</span><span>(</span><span>metadataKey</span><span>:</span> string | symbol<span>)</span> <span>{</span>\n    <span>const</span> <span>providers</span> = <span>this</span>.<span>discoveryService</span>.<span>getProviders</span><span>(</span><span>)</span><span>;</span>\n\n    <span>return</span> <span>providers</span>\n      .<span>filter</span><span>(</span><span>(</span><span>wrapper</span><span>)</span> <span>=&gt;</span> <span>wrapper</span>.<span>isDependencyTreeStatic</span><span>(</span><span>)</span><span>)</span>\n      .<span>filter</span><span>(</span><span>(</span><span>{</span> <span>metatype</span><span>,</span> <span>instance</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>\n        <span>if</span> <span>(</span>!<span>instance</span> || !<span>metatype</span><span>)</span> <span>{</span>\n          <span>return</span> <span>false</span><span>;</span>\n        <span>}</span>\n        <span>return</span> <span>Reflect</span>.<span>getMetadata</span><span>(</span><span>metadataKey</span><span>,</span> <span>metatype</span><span>)</span><span>;</span>\n      <span>}</span><span>)</span>\n      .<span>map</span><span>(</span><span>(</span><span>{</span> <span>instance</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>instance</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"c6432104-5f79-44a7-b480-5f6edd060898\"><span><span><span>첫번째 필터: </span><code>filter((wrapper) =&gt; wrapper.isDependencyTreeStatic())</code></span></span></p><p id=\"8745a781-6da6-4215-95bc-75fe7b71546e\"><span><span><span>request scope가 아닌 싱글톤 프로바이더만 필터링합니다.</span></span></span></p><p id=\"fd8dc94c-f382-4dc3-9585-f230d665b2ba\"><span><span><span>두번째 필터: </span><code>Reflect.getMetadata(metadataKey, metatype)</code></span></span></p><p id=\"39fd5fbe-8360-4fc7-bdae-24db282c3623\"><span><span><span>해당 필터는 메타데이터가 등록된 클래스만 필터링합니다.</span></span></span></p><figure id=\"0429b695-924a-428f-a954-d94fa8f2e275\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/1de11efd-4e28-4d50-a5ae-87c9a4e05426\"/></figure><p id=\"6f12f6ef-0e44-4268-90c9-f51f9a58021e\"><span><span><code>metatype</code><span> 은 </span><code>class TestService</code><span> 와 같이 해당 Provider의 클래스를 의미합니다.</span></span></span></p><p id=\"f60543e4-8731-4a7c-9342-568f91d97509\"><span><span><code>Reflect.getMetadata(metadataKey, metatype)</code><span> 은 metatype(클래스)에 </span><code>metadataKey</code><span>로 등록된 메타데이터의 값을 가져옵니다. TestService 클래스의 경우 메타데이터 키는 </span><code>CUSTOM_DECORATOR</code><span> 이고 값은 </span><code>test-value</code><span> 입니다.</span></span></span></p><p id=\"cfec314a-3a29-4bc3-b0a2-aee2f9a1bf49\"><span><span><span>만약 등록된 메타데이터가 없으면 undefined를 반환하고 해당 Provider는 필터링됩니다.</span></span></span></p><h2 id=\"85624e0c-0f89-4e2f-8e98-f18a402bd386\"><span><span><span>MetadataScanner</span></span></span></h2><p id=\"5ed1aed4-3a72-4c0b-8be4-fbb6f2daf17a\"><span><span><span>앞의 DiscoverService의 예시에서는 데코레이팅된 메서드를 가진 인스턴스에 접근하는 데 그쳤습니다. 실제 데코레이팅된 메서드에 접근하기 위해서는 DiscoveryModule에서 제공하는 </span><code>MetadataScanner</code><span> 를 사용해야 합니다.</span></span></span></p><p id=\"d7a56503-5b22-45d6-95c4-e2459585d3f0\"><span><span><a href=\"https://github1s.com/nestjs/nest/blob/HEAD/packages/core/metadata-scanner.ts#L9-L40\" rel=\"noreferrer noopener\" target=\"_blank\">MetadataScanner 코드</a></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>class</span> MetadataScanner <span>{</span>\n  <span>public</span> <span>scanFromPrototype</span>&lt;T <span>extends</span> Injectable<span>,</span> R = any&gt;<span>(</span>\n    <span>instance</span><span>:</span> T<span>,</span>\n    <span>prototype</span><span>:</span> object<span>,</span>\n    <span>callback</span><span>:</span> <span>(</span><span>name</span><span>:</span> string<span>)</span> <span>=&gt;</span> R<span>,</span>\n  <span>)</span><span>:</span> R<span>[</span><span>]</span> <span>{</span>\n    <span>const</span> <span>methodNames</span> = <span>new</span> <span>Set</span><span>(</span><span>this</span>.<span>getAllFilteredMethodNames</span><span>(</span><span>prototype</span><span>)</span><span>)</span><span>;</span>\n    <span>return</span> <span>iterate</span><span>(</span><span>methodNames</span><span>)</span>\n      .<span>map</span><span>(</span><span>callback</span><span>)</span>\n      .<span>filter</span><span>(</span><span>metadata</span> <span>=&gt;</span> !<span>isNil</span><span>(</span><span>metadata</span><span>)</span><span>)</span>\n      .<span>toArray</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>*</span><span>getAllFilteredMethodNames</span><span>(</span><span>prototype</span><span>:</span> object<span>)</span><span>:</span> <span>IterableIterator</span><span>&lt;</span><span>string</span><span>&gt;</span> <span>{</span>\n    <span>// prototype에 등록된 method 이름들을 가져온다.</span>\n\n</code></pre></div></div></div></div><p id=\"64ff4739-2485-4e1e-b879-59cbc5991225\"><span><span><code>scanFromPrototype</code><span> 는 </span><code>getAllFilteredMethodNames</code><span> 메서드로 인스턴스의 모든 메서드 이름들을 가져와 인자로 받은 callback을 실행시킵니다. 이 중에서 메타데이터가 있는 메서드만 필터링합니다.</span></span></span></p><p id=\"cdf4eb58-f7ff-4c1c-be72-6513ae6028bc\"><span><span><code>scanFromPrototype</code><span> 의 callback 파라미터에서 인스턴스 메서드에 접근할 수 있습니다. 이제 메서드에 접근해 데코레이팅 함수로 덮어씌울 수 있습니다.</span></span></span></p><p id=\"051e28bf-9627-4ca3-83cc-bcbfa67b3427\"><span><span><code>SetMetadata</code><span>, </span><code>DiscoveryService</code><span>, </span><code>MetadataScanner</code><span> 모든 재료들이 모였으니 Provider에 접근 가능한 메서드 데코레이터를 만들어봅시다.</span></span></span></p><p id=\"0ad2c730-85ab-402e-9c6b-e001c0149f0c\"><span><span><span>Cacheable 데코레이터</span></span></span></p><p id=\"3d39f110-cb5a-4cce-ad2b-054d1e83b494\"><span><span><span>메서드에 </span><code>CACHEABLE</code><span> 심볼을 메타데이터 키로, ttl을 메타데이터 값으로 설정합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>const</span> <span>CACHEABLE</span> = <span>Symbol</span><span>(</span><span>'CACHEABLE'</span><span>)</span><span>;</span>\n<span>export</span> <span>const</span> <span>Cacheable</span> = <span>(</span><span>ttl</span><span>:</span> number<span>)</span> <span>=&gt;</span> <span>SetMetadata</span><span>(</span><span>CACHEABLE</span><span>,</span> <span>ttl</span><span>)</span><span>;</span>\n\n@<span>Injectable</span><span>(</span><span>)</span>\n<span>class</span> TargetClass <span>{</span>\n  @<span>Cacheable</span><span>(</span><span>0</span><span>)</span>\n  <span>test</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"a1265e98-58c5-4e2b-bf93-3d143f0d4dab\"><span><span><span>CacheDecoratorRegister 클래스</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Injectable</span><span>(</span><span>)</span>\n<span>export</span> <span>class</span> CacheDecoratorRegister <span>implements </span><span>OnModuleInit </span><span>{</span>\n  <span>constructor</span><span>(</span>\n    <span>private </span>readonly<span> </span>discoveryService<span>:</span> <span>DiscoveryService</span><span>,</span>\n    <span>private </span><span>readonly </span>metadataScanner<span>:</span> <span>MetadataScanner</span><span>,</span>\n    <span>private </span><span>readonly </span>reflector<span>:</span> <span>Reflector</span><span>,</span>\n    <span>private </span><span>readonly </span>cache<span>:</span> <span>Cache</span><span>,</span>\n  <span>)</span> <span>{</span><span>}</span>\n\n  <span>onModuleInit</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>this</span>.<span>discoveryService</span>\n      .<span>getProviders</span><span>(</span><span>)</span> <span>// #1. 모든 provider 조회</span>\n      .<span>filter</span><span>(</span><span>(</span><span>wrapper</span><span>)</span> <span>=&gt;</span> <span>wrapper</span>.<span>isDependencyTreeStatic</span><span>(</span><span>)</span><span>)</span>\n      .<span>filter</span><span>(</span><span>(</span><span>{</span> <span>instance</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>instance</span> &amp;&amp; <span>Object</span>.<span>getPrototypeOf</span><span>(</span><span>instance</span><span>)</span><span>)</span>\n      .<span>forEach</span><span>(</span><span>(</span><span>{</span> <span>instance</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>\n        <span>this</span>.<span>metadataScanner</span>.<span>scanFromPrototype</span><span>(</span>\n          <span>instance</span><span>,</span>\n          <span>Object</span>.<span>getPrototypeOf</span><span>(</span><span>instance</span><span>)</span><span>,</span>\n          <span>(</span><span>methodName</span><span>)</span> <span>=&gt;</span> <span>{</span>\n\t    <span>// #2. 메타데이터 value</span>\n            <span>const</span> <span>ttl</span> = <span>this</span>.<span>reflector</span>.<span>get</span><span>(</span><span>CACHEABLE</span><span>,</span> <span>instance</span><span>[</span><span>methodName</span><span>]</span><span>)</span><span>;</span>\n            <span>if</span> <span>(</span>!<span>ttl</span><span>)</span> <span>{</span>\n              <span>return</span><span>;</span>\n            <span>}</span>\n\n            <span>const</span> <span>methodRef</span> = <span>instance</span><span>[</span><span>methodName</span><span>]</span><span>;</span>\n\n            <span>// #3. 기존 함수 데코레이팅</span>\n            <span>instance</span><span>[</span><span>methodName</span><span>]</span> = <span>async</span> <span>function</span> <span>(</span><span>...</span><span>args</span><span>:</span> any<span>[</span><span>]</span><span>)</span> <span>{</span>\n              <span>const</span> <span>name</span> = <span>`</span><span>${</span><span>instance</span>.<span>constructor</span>.<span>name</span><span>}</span><span>.</span><span>${</span><span>methodName</span><span>}</span><span>`</span><span>;</span>\n              <span>const</span> <span>value</span> = <span>await</span> <span>this</span>.<span>cache</span>.<span>get</span><span>(</span><span>name</span><span>,</span> <span>args</span><span>)</span><span>;</span>\n              <span>if</span> <span>(</span><span>value</span><span>)</span> <span>{</span>\n                <span>return</span> <span>value</span><span>;</span>\n              <span>}</span>\n\n              <span>const</span> <span>result</span> = <span>await</span> <span>methodRef</span>.<span>call</span><span>(</span><span>instance</span><span>,</span> <span>...</span><span>args</span><span>)</span><span>;</span>\n              <span>await</span> <span>this</span>.<span>cache</span>.<span>set</span><span>(</span><span>name</span><span>,</span> <span>args</span><span>,</span> <span>result</span><span>,</span> <span>ttl</span><span>)</span><span>;</span>\n              <span>return</span> <span>result</span><span>;</span>\n            <span>}</span><span>;</span>\n          <span>}</span><span>,</span>\n        <span>)</span><span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"bf8baa3e-a7e6-4def-a837-bb8717c8b9ea\"><span><span><span>해당 클래스를 모듈의 provider에 등록하면, onModuleInit 단계에서 </span><code>@Cacheable</code><span>로 데코레이팅된 메서드를 찾아 기존 메서드를 덮어씌웁니다.</span></span></span></p><p id=\"0076b420-29b5-4072-9f89-9968e618080a\"><span><span><span>메서드 데코레이터를 만드는 과정은 다음과 같습니다.</span></span></span></p><p id=\"2b7bf4d8-2595-4041-be3c-4fac944c6c28\"><span><span><span>#1. 모든 Provider 클래스를 순회하며</span></span></span></p><p id=\"aecea826-fc1d-4dcb-bebb-cb56eaac7927\"><span><span><span>#2. 특정 메타데이터가 등록된 메서드를 찾아</span></span></span></p><p id=\"8f3cd01f-ee61-4777-81e4-d345842d9fee\"><span><span><span>#3. 기존 메서드를 덮어씌웁니다.</span></span></span></p><p id=\"ad2926c8-f127-4ac1-9ac9-ecf83d9f3317\"><span><span><span>#3의 과정에서, </span><code>CacheDecoratorRegister</code><span> 생성자에 주입한 CacheManager를 사용할 수 있습니다.</span></span></span></p><p id=\"64d3f1be-0c16-4bcb-9d49-0f6b08743c05\"><span><span><span>그런데 메서드 데코레이터를 만들 때마다 매번 이렇게 복잡한 과정을 거쳐야하는 걸까요? 저희 챕터에서는 메서드 데코레이터마다 반복되는 과정을 </span><span>AopModule</span><span>이라는 모듈로 해결했습니다.</span></span></span></p><p id=\"be82c70d-6122-465e-834d-c9fb758d4428\"><span><span><span>해당 모듈은 2022년 12월에 오픈소스로 공개되었습니다. 현재 npm에서 </span><a href=\"https://www.npmjs.com/package/@toss/nestjs-aop\" rel=\"noreferrer noopener\" target=\"_blank\">@toss/nestjs-aop</a><span> 라이브러리를 다운 받아 사용해보실 수 있습니다.</span></span></span></p><p id=\"094fab65-bef1-40e9-adee-966ce4ac98f6\"><span><span><span>관련해서 </span><a href=\"https://www.youtube.com/watch?v=VH1GTGIMHQw&amp;t=3000s\" rel=\"noreferrer noopener\" target=\"_blank\">NestJS 밋업에서 발표한 자료</a><span>도 있으니 함께 참고하시면 좋을 듯 합니다. :)</span></span></span></p><h2 id=\"309b53d5-bd7a-4501-b604-a0f7ffe56f2b\"><span><span><span>AopModule</span></span></span></h2><p id=\"632430d2-a5e9-45a7-8e7c-2f9b403d32c6\"><span><span><span>AopModule이 데코레이터들을 등록하는 과정은 이렇습니다.</span></span></span></p><figure id=\"e671e04b-b1d3-4774-a166-ff8b27263181\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/162daabb-82f4-46fc-9962-db18f299a82c\"/></figure><p id=\"b4ad4401-6f22-4371-b0b8-cbdf81c6963e\"><span><span><span>간단히 설명하면</span></span></span></p><ol><li id=\"3b0a8052-9870-4127-b01a-f3a0adc79eb1\"><span><span><span>Aspect 데코레이터가 붙은 클래스를 찾고 (CacheableDecorator)</span></span></span></li><li id=\"24caba75-34a0-459a-b2b5-fea55539a906\"><span><span><span>Cacheable 데코레이터가 붙은 함수를 찾아 (FooService.foo)</span></span></span></li><li id=\"4d758ce0-2f8f-4c2a-a17a-6aee85e055dc\"><span><span><span>1번 클래스의 wrap 함수로 2번의 함수를 감쌉니다. (CacheableDecorator.wrap)</span></span></span></li></ol><p id=\"6bd4c920-7887-4e62-9853-7ace9a382550\"><span><span><span>코드를 보며 좀 더 자세히 설명해볼게요.</span></span></span></p><h3 id=\"b4168e25-7a49-4489-be37-d23d68c1356a\"><span><span><span>1. Aspect 데코레이터 사용</span></span></span></h3><p id=\"90331f8f-6ac4-454a-afa5-bb9d92e6c6ed\"><span><span><span>Aspect 데코레이터</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>{</span> <span>applyDecorators</span><span>,</span> <span>Injectable</span> <span>}</span> <span>from</span> <span>'@nestjs/common'</span><span>;</span>\n\n<span>export</span> <span>const</span> <span>ASPECT</span> = <span>Symbol</span><span>(</span><span>'ASPECT_CLASS'</span><span>)</span><span>;</span>\n\n<span>export</span> <span>function</span> <span>Aspect</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>applyDecorators</span><span>(</span><span>SetMetadata</span><span>(</span><span>ASPECT</span><span>,</span> <span>'ASPECT_CLASS'</span><span>)</span><span>,</span> <span>Injectable</span><span>)</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"389f62ef-8208-4991-8c22-54e53ad4196b\"><span><span><span>데코레이터 사용</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Aspect</span><span>(</span><span>)</span>\n<span>export</span> <span>class</span> CacheLazyDecorator <span>{</span><span>}</span></code></pre></div></div></div></div><p id=\"408c4672-5858-470d-90d2-518e808abcec\"><span><span><span>데코레이터 로직을 실행할 클래스에 </span><code>ASPECT</code><span> 라는 심볼을 메타데이터로 설정합니다.</span></span></span></p><h3 id=\"3718941f-fe43-415b-a1e0-3cec632e0e10\"><span><span><span>2. 데코레이터 생성</span></span></span></h3><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>const</span> <span>CACHEABLE</span> = <span>Symbol</span><span>(</span><span>'CACHEABLE'</span><span>)</span><span>;</span>\n<span>export</span> <span>const</span> <span>Cacheable</span> = <span>(</span><span>ttl</span><span>:</span> number<span>)</span> <span>=&gt;</span> <span>SetMetadata</span><span>(</span><span>CACHEABLE</span><span>,</span> <span>ttl</span><span>)</span><span>;</span>\n\n\n<span>class</span> FooService <span>{</span>\n\t@<span>Cacheable</span><span>(</span><span>1000</span><span>)</span>\n\t<span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"6d6399e6-d670-4287-b139-cbf05928aa2d\"><span><span><span>특정 심볼(또는 문자열)을 메타데이터 키로 하여 SetMetadata로 원하는 데코레이터를 만듭니다.</span></span></span></p><h3 id=\"b0f0ad1c-57a3-4860-97b5-397a5c53e474\"><span><span><span>3. LazyDecorator 구현</span></span></span></h3><p id=\"b317dbd9-21fc-4dd0-a6db-530ac5a0045d\"><span><span><span>AopModule에 등록되는 모든 데코레이터들은 LazyDecorator 인터페이스를 구현해야 합니다. 데코레이팅 하는 시점을 모듈이 초기화되는 시점으로 미루기 때문에 LazyDecorator라고 합니다.</span></span></span></p><p id=\"30821586-097a-4749-bf8c-7732df481ea5\"><span><span><span>LazyDecorator 인터페이스</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>interface </span><span>LazyDecorator </span><span>{</span>\n  <span>wrap</span><span>(</span><span>reflector</span><span>:</span> Reflector<span>,</span> <span>instance</span><span>:</span> any<span>,</span> <span>methodName</span><span>:</span> string<span>)</span><span>:</span> <span>Decorator</span> | <span>undefined</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"62802134-fcb0-4971-9229-f84e27a7e11b\"><span><span><span>CacheLazyDecorator 구현</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Aspect</span><span>(</span><span>)</span>\n<span>export</span> <span>class</span> CacheLazyDecorator <span>implements </span><span>LazyDecorator </span><span>{</span>\n  <span>constructor</span><span>(</span>@<span>Inject</span><span>(</span><span>CACHE_MANAGER</span><span>)</span> <span>private </span><span>readonly </span>cache<span>:</span> <span>CacheManager</span><span>)</span><span> </span><span>{</span><span>}</span>\n\n  <span>wrap</span><span>(</span><span>reflector</span><span>:</span> Reflector<span>,</span> <span>instance</span><span>:</span> any<span>,</span> <span>methodName</span><span>:</span> string<span>)</span> <span>{</span>\n    <span>const</span> <span>ttl</span> = <span>reflector</span>.<span>get</span><span>(</span><span>CACHEABLE</span><span>,</span> <span>instance</span><span>[</span><span>methodName</span><span>]</span><span>)</span><span>;</span>\n    <span>if</span> <span>(</span>!<span>ttl</span><span>)</span> <span>{</span>\n      <span>return</span><span>;</span>\n    <span>}</span>\n\n    <span>const</span> <span>methodRef</span> = <span>instance</span><span>[</span><span>methodName</span><span>]</span><span>;</span>\n    <span>const</span> <span>name</span> = <span>`</span><span>${</span><span>instance</span>.<span>constructor</span>.<span>name</span><span>}</span><span>.</span><span>${</span><span>methodName</span><span>}</span><span>`</span><span>;</span>\n    <span>return</span> <span>async</span> <span>(</span><span>...</span><span>args</span><span>:</span> any<span>[</span><span>]</span><span>)</span> <span>=&gt;</span> <span>{</span>\n      <span>const</span> <span>value</span> = <span>await</span> <span>this</span>.<span>cache</span>.<span>get</span><span>(</span><span>name</span><span>)</span><span>;</span>\n      <span>if</span> <span>(</span><span>value</span><span>)</span> <span>{</span>\n        <span>return</span> <span>value</span><span>;</span>\n      <span>}</span>\n\n      <span>const</span> <span>result</span> = <span>await</span> <span>methodRef</span>.<span>call</span><span>(</span><span>instance</span><span>,</span> <span>...</span><span>args</span><span>)</span><span>;</span>\n      <span>this</span>.<span>cache</span>.<span>set</span><span>(</span><span>name</span><span>,</span> <span>result</span><span>,</span> <span>ttl</span><span>)</span><span>;</span>\n      <span>return</span> <span>result</span><span>;</span>\n    <span>}</span><span>;</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"72d51465-0859-4b9a-b1b4-d0e72ed436fa\"><span><span><span>접근하고자 하는 Provider는 이제 생성자에 주입하여 사용할 수 있습니다.</span></span></span></p><h3 id=\"91a22e49-0537-4c1a-823b-d608bacdd23a\"><span><span><span>4. AutoAspectExecutor</span></span></span></h3><p id=\"a20248d4-461b-4b26-a877-d8d83778530b\"><span><span><span>onModuleInit 단계에서 AopModule의 AutoAspectExecutor 가 ASPECT가 붙은 데코레이터 클래스들의 wrap 함수를 실행시키며 기존 메서드를 덮어씌웁니다.</span></span></span></p><p id=\"1d3d46a0-99ae-4586-9ecb-6a5afc8c6f79\"><span><span><span>AutoAspectExecutor 코드</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Injectable</span><span>(</span><span>)</span>\n<span>export</span> <span>class</span> AutoAspectExecutor <span>implements </span><span>OnModuleInit </span><span>{</span>\n  <span>constructor</span><span>(</span>\n    <span>private </span>readonly<span> </span>discoveryService<span>:</span> <span>DiscoveryService</span><span>,</span>\n    <span>private </span><span>readonly </span>metadataScanner<span>:</span> <span>MetadataScanner</span><span>,</span>\n    <span>private </span><span>readonly </span>reflector<span>:</span> <span>Reflector</span><span>,</span>\n  <span>)</span> <span>{</span><span>}</span>\n\n  <span>onModuleInit</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> <span>providers</span> = <span>this</span>.<span>discoveryService</span>.<span>getProviders</span><span>(</span><span>)</span><span>;</span>\n    <span>const</span> <span>lazyDecorators</span> = <span>this</span>.<span>lookupLazyDecorators</span><span>(</span><span>providers</span><span>)</span><span>;</span>\n    <span>if</span> <span>(</span><span>lazyDecorators</span>.<span>length</span> === <span>0</span><span>)</span> <span>{</span>\n      <span>return</span><span>;</span>\n    <span>}</span>\n\n    <span>providers</span>\n      .<span>filter</span><span>(</span><span>(</span><span>wrapper</span><span>)</span> <span>=&gt;</span> <span>wrapper</span>.<span>isDependencyTreeStatic</span><span>(</span><span>)</span><span>)</span>\n      .<span>filter</span><span>(</span><span>(</span><span>{</span> <span>instance</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>instance</span> &amp;&amp; <span>Object</span>.<span>getPrototypeOf</span><span>(</span><span>instance</span><span>)</span><span>)</span>\n      .<span>forEach</span><span>(</span><span>(</span><span>{</span> <span>instance</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>\n        <span>this</span>.<span>metadataScanner</span>.<span>scanFromPrototype</span><span>(</span>\n          <span>instance</span><span>,</span>\n          <span>Object</span>.<span>getPrototypeOf</span><span>(</span><span>instance</span><span>)</span><span>,</span>\n          <span>(</span><span>methodName</span><span>)</span> <span>=&gt;</span>\n            <span>lazyDecorators</span>.<span>forEach</span><span>(</span><span>(</span><span>lazyDecorator</span><span>)</span> <span>=&gt;</span> <span>{</span>\n              <span>const</span> <span>wrappedMethod</span> = <span>lazyDecorator</span>.<span>wrap</span><span>(</span><span>this</span>.<span>reflector</span><span>,</span> <span>instance</span><span>,</span> <span>methodName</span><span>)</span><span>;</span>\n              <span>if</span> <span>(</span><span>wrappedMethod</span><span>)</span> <span>{</span>\n                <span>instance</span><span>[</span><span>methodName</span><span>]</span> = <span>wrappedMethod</span><span>;</span>\n              <span>}</span>\n            <span>}</span><span>)</span><span>,</span>\n        <span>)</span><span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>private </span><span>lookupLazyDecorators</span><span>(</span><span>providers</span><span>:</span> any<span>[</span><span>]</span><span>)</span><span>:</span> LazyDecorator<span>[</span><span>]</span> <span>{</span>\n    <span>// this.reflector.get(ASPECT, metatype) 결과값이 존재하는 providers만 필터링</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"f5cd7148-8549-46dd-a687-f16cd699aa7c\"><span><span><span>Provider에 접근 가능한 데코레이터를 만드는 과정을 다시 요약하면 이렇습니다.</span></span></span></p><ol><li id=\"f501a030-b476-4a0a-90d4-8ad56ec15247\"><span><span><code>SetMetadata</code><span>로 필터링할 클래스에 메타데이터를 등록하고</span></span></span></li><li id=\"4866af35-e2f3-437f-bddf-240c137a148a\"><span><span><code>DiscoveryService</code><span>로 모든 Provider를 조회하며</span></span></span></li><li id=\"69dd54d8-8d9a-4b71-8a48-71c27ab4e7f8\"><span><span><span>등록된 Metadata로 특정 클래스나 메서드를 필터링하여 원하는 작업을 하면 됩니다.</span></span></span></li></ol><p id=\"5b6d7849-3c5e-4545-89b4-d6749c1436e3\"><span><span></span></span></p><p id=\"d47958fe-2d5c-4966-bb72-8830e481a145\"><span><span></span></span></p><hr/><p id=\"a56dc792-7cbe-4da0-a977-81b169083ded\"><span><span><span>Provider에 접근이 필요없는 경우 일반 메서드 데코레이터를 구현하면 될 것입니다. 하지만 메타데이터를 사용하는 NestJS 데코레이터를 일반 데코레이터와 함께 사용해도 괜찮을까요?</span></span></span></p><p id=\"ee74b01d-de19-439a-8b39-3f2d3a4eda71\"><span><span><span>결론부터 말하자면 둘을 함께 사용하면 예상치 못한 버그가 발생할 수 있습니다.</span></span></span></p><h3 id=\"e724d32d-064f-42c9-91a0-f7c95cb9e6d2\"><span><span><span>일반 메서드 데코레이터를 사용하면 안되는 이유</span></span></span></h3><p id=\"98376afa-e74a-4fa0-9771-9579d2f44cbf\"><span><span><span>메타데이터를 등록하는 다른 데코레이터와 함께 쓰이는 경우, 기존 메서드가 덮어씌워지면서 프로토타입에 등록된 메타데이터가 사라질 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>function</span> <span>OnError</span><span>(</span><span>handler</span><span>:</span> <span>(</span><span>e</span><span>:</span> Error<span>)</span> <span>=&gt;</span> <span>void</span><span>)</span> <span>{</span>\n  <span>return</span> <span>(</span><span>target</span><span>:</span> object<span>,</span> <span>key</span>?<span>:</span> any<span>,</span> <span>descriptor</span>?<span>:</span> any<span>)</span> <span>=&gt;</span> <span>{</span>\n    <span>const</span> <span>originMethod</span> = <span>descriptor</span>.<span>value</span><span>;</span>\n    <span>descriptor</span>.<span>value</span> = <span>(</span><span>...</span><span>args</span><span>:</span> any<span>[</span><span>]</span><span>)</span> <span>=&gt;</span> <span>{</span>\n      <span>try</span> <span>{</span>\n        <span>return</span> <span>originMethod</span>.<span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span><span>args</span><span>)</span><span>;</span>\n      <span>}</span> <span>catch</span> <span>(</span><span>error</span><span>)</span> <span>{</span>\n        <span>handler</span><span>(</span><span>error</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"43e90616-9f61-41f7-83d6-b8456c22a271\"><span><span><span>OnError 데코레이터는 기존 메서드를 새로운 메서드로 덮어씌웁니다.</span></span></span></p><p id=\"d5fd9d40-88c1-4e5b-902f-6f574dba41bd\"><span><span><span>아래 코드에서는 메타데이터를 등록하는 RegisterMetadata 데코레이터와 OnError 데코레이터를 함께 사용하고 있습니다. 데코레이터 선언 순서에 따라 기존에 등록된 메타데이터는 사라질 수 있습니다.</span></span></span></p><p id=\"aac1570e-e73e-4574-9796-ad2e21fe5f4b\"><span><span><span>아래 메서드 중에 </span><code>Reflect.getMetadata</code><span>를 했을 때 메타데이터가 사라지는 메서드는 무엇일까요?</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Injectable</span><span>(</span><span>)</span>\n<span>class</span> TestService <span>{</span>\n  @<span>OnError</span><span>(</span><span>console</span>.<span>log</span><span>)</span>\n  @<span>RegisterMetadata</span><span>(</span><span>'value'</span><span>)</span>\n  <span>test</span><span>(</span><span>)</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'error'</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  @<span>RegisterMetadata</span><span>(</span><span>'value2'</span><span>)</span>\n  @<span>OnError</span><span>(</span><span>console</span>.<span>log</span><span>)</span>\n  <span>test2</span><span>(</span><span>)</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'error'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"f79aa9d1-5412-45c6-b235-141c3799d71a\"><span><span><span>정답은 test 메서드입니다. 실행 결과는 </span><a href=\"https://www.typescriptlang.org/play?noImplicitAny=false&amp;noImplicitThis=false&amp;ssl=54&amp;ssc=89&amp;pln=51&amp;pc=1#code/PTAEEsFsAcHsCcAuoDk8CmAzANugxogLSTqICGAJmeSgFC16wB2AzsgMqkCypl1ZoALygAPAGkhoNvHBMA5gBpQANUlkmATwB8AClqhQJclXJj0GgFygxC-Yd4myystgCu6K8tsBKIVtAA3naMrLC4AHTYsHI6KJyIPMb8oICTy4AANSjewcxsoBT4CNQIAGJkBAgakjrk8HKkVrAARgBW+IhKANbmAPxW6hpK+Sx4MtCICL2g-b6C-kEGBuCYoDpDI+BjCL7zCwYhLGHokdGxgCpdgAMLgA7NgC7jgAyLoICPLYC6HShKRnzkzm7oWbsGAEpYXAEcL5TCydCJD5kHTvRxmAb2JKfFzuQboYajcbwcIAN1RPwA3HZdhhEK54Ew8hj1pt4MTdgBfOyMhnUxjwIrwUrleAacJiACiAE1JHD+Ai2WSKVT8hyuTzsRpiaz6JhXEwCOBmKAAPJMQXweAIHQAC3UFFw8CsOg8oENxvgM38uNg4Ao22yoQiURiACJ9Q6EKk0n7vFLSDKVjU6ogGi02p0en1NOjMRtsZNpn5AiTQPtDsd-YGjcHACdDgEjVqyAC1XABhDoEAds2AFtHAA8jgAY6sNsvY5ZAIcByWSJU2wCiSNZYhB4gld6npulT75VcLLsi1FgpjQAbQAus7c39QIg+fuD6BpZTQH2B0whyPwngXNhqqbwCwlMvwqu5Cxw3mDIz82oPBTRWdBS2tKZNE9U9QHNJhLTA21wN-A9mSZNlVWZBge1Af5BQAcQASXYAAVQV-gAfS4QUSIAQQAEVoujJHYDRIEaMJYjwojSPIqiaIYpjaMybDWGQQEBzYMCoUcKp8W+KxpFkOQ93iGT+B0bjiLIyjqLoxi6KUeT3CyBhsDIFgWFAEiMUQTh4FxcA8HQE8AAES0dHQCx9aJflAVyJNfRBpIcDSUGM9ARIMYK2B0aCFkQU1jQAd1AJh0FSoN4FiMDHUyDD6AMAL0Ek4L4HU8hYgigAmKL-I8k1vKOX0-JixBqrik9oqS2BUvSzLwJy8D8pZWgsP2ZA2vsxznMkfrrNs6anPQOL6CaotYjapFoVeXCgTacJYwqmEtN43SBIM2ilCmsCZqONrvCydbfU22zqu2xxdsBHADqO0LKtOnT+P0oTrsW27lvCNrqseoA\" rel=\"noreferrer noopener\" target=\"_blank\">타입스크립트 플레이그라운드</a><a href=\"https://www.typescriptlang.org/play?noImplicitAny=false&amp;noImplicitThis=false&amp;ssl=54&amp;ssc=89&amp;pln=51&amp;pc=1#code/PTAEEsFsAcHsCcAuoDk8CmAzANugxogLSTqICGAJmeSgFC16wB2AzsgMqkCypl1ZoALygAPAGkhoNvHBMA5gBpQANUlkmATwB8AClqhQJclXJj0GgFygxC-Yd4myystgCu6K8tsBKIVtAA3naMrLC4AHTYsHI6KJyIPMb8oICTy4AANSjewcxsoBT4CNQIAGJkBAgakjrk8HKkVrAARgBW+IhKANbmAPxW6hpK+Sx4MtCICL2g-b6C-kEGBuCYoDpDI+BjCL7zCwYhLGHokdGxgCpdgAMLgA7NgC7jgAyLoICPLYC6HShKRnzkzm7oWbsGAEpYXAEcL5TCydCJD5kHTvRxmAb2JKfFzuQboYajcbwcIAN1RPwA3HZdhhEK54Ew8hj1pt4MTdgBfOyMhnUxjwIrwUrleAacJiACiAE1JHD+Ai2WSKVT8hyuTzsRpiaz6JhXEwCOBmKAAPJMQXweAIHQAC3UFFw8CsOg8oENxvgM38uNg4Ao22yoQiURiACJ9Q6EKk0n7vFLSDKVjU6ogGi02p0en1NOjMRtsZNpn5AiTQPtDsd-YGjcHACdDgEjVqyAC1XABhDoEAds2AFtHAA8jgAY6sNsvY5ZAIcByWSJU2wCiSNZYhB4gld6npulT75VcLLsi1FgpjQAbQAus7c39QIg+fuD6BpZTQH2B0whyPwngXNhqqbwCwlMvwqu5Cxw3mDIz82oPBTRWdBS2tKZNE9U9QHNJhLTA21wN-A9mSZNlVWZBge1Af5BQAcQASXYAAVQV-gAfS4QUSIAQQAEVoujJHYDRIEaMJYjwojSPIqiaIYpjaMybDWGQQEBzYMCoUcKp8W+KxpFkOQ93iGT+B0bjiLIyjqLoxi6KUeT3CyBhsDIFgWFAEiMUQTh4FxcA8HQE8AAES0dHQCx9aJflAVyJNfRBpIcDSUGM9ARIMYK2B0aCFkQU1jQAd1AJh0FSoN4FiMDHUyDD6AMAL0Ek4L4HU8hYgigAmKL-I8k1vKOX0-JixBqrik9oqS2BUvSzLwJy8D8pZWgsP2ZA2vsxznMkfrrNs6anPQOL6CaotYjapFoVeXCgTacJYwqmEtN43SBIM2ilCmsCZqONrvCydbfU22zqu2xxdsBHADqO0LKtOnT+P0oTrsW27lvCNrqseoA\" rel=\"noreferrer noopener\" target=\"_blank\">에서</a><span> 직접 확인하실 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>testService</span> = <span>new</span> <span>TestService</span><span>(</span><span>)</span>\n\n<span>// undefined</span>\n<span>console</span>.<span>log</span><span>(</span><span>'test metadata'</span><span>,</span> <span>Reflect</span>.<span>getMetadata</span><span>(</span><span>REGISTER_METADATA</span><span>,</span> <span>testService</span>.<span>test</span><span>)</span><span>)</span>\n<span>// value2</span>\n<span>console</span>.<span>log</span><span>(</span><span>'test2 metadata'</span><span>,</span> <span>Reflect</span>.<span>getMetadata</span><span>(</span><span>REGISTER_METADATA</span><span>,</span> <span>testService</span>.<span>test2</span><span>)</span><span>)</span></code></pre></div></div></div></div><p id=\"2d078320-255f-4c76-bdd7-e8a579ade86b\"><span><span><span>왜 이렇게 되는 걸까요? 데코레이터의 실행 순서가 힌트입니다.</span></span></span></p><p id=\"07bbb6ab-d278-47de-92f8-b418cd3e73f7\"><span><span><span>g∘f(x) = g(f(x))</span><span> 와 같은 합성 함수가 있을 때 선언은 </span><span>g</span><span>가 </span><span>f</span><span>보다 먼저 되었지만 실행은 </span><span>f</span><span> 함수가 먼저 실행됩니다. 마찬가지로 </span><span>데코레이터는 평가될 때는 선언된 순서대로 위에서 아래로, 실행될 때는 아래에서 위로 실행됩니다</span><span>.</span></span></span></p><figure id=\"2aed8a1e-d873-4ac6-8bd0-9f1d59781293\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/fb86404f-7068-4f2f-9618-f272337111ae\"/></figure><p id=\"4c93b331-dcf0-4572-bda8-1fd991c2de44\"><span><span><span>RegisterMetadata에서 </span><code>Reflector.defineMetadata</code><span>가 먼저 실행되고 그 다음 OnError 데코레이터가 기존 함수를 덮어씌웁니다.</span></span></span></p><p id=\"5057ccdc-2e2b-4526-9d6a-c59b1226287f\"><span><span><span>덮어씌워지면서 기존에 메타데이터가 저장된 프로토타입과 끊기게 되고 </span><code>test</code><span> 메서드에서 메타데이터를 찾을 수 없게 됩니다.</span></span></span></p><p id=\"30f1a5fe-0c19-427e-904c-6f6b6bba9115\"><span><span><span>이런 사례도 있을 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Injectable</span><span>(</span><span>)</span>\n<span>class</span> TossScheduler <span>{</span>\n\n  @<span>OnError</span><span>(</span><span>console</span>.<span>log</span><span>)</span>\n  @<span>Cron</span><span>(</span><span>'*/10 * * * *'</span><span>)</span>\n  <span>task</span><span>(</span><span>)</span> <span>{</span>\n    <span>// do something</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"d2ccd419-6320-4db8-9b88-6a649f7d2445\"><span><span><code>@nestjs/schedule</code><span> 의 Cron 데코레이터 역시 CRON 심볼을 메타데이터로 등록합니다. 모듈이 초기화되는 시점에 해당 메타데이터가 등록된 메서드들을 조회하여 cron job을 등록합니다.</span></span></span></p><p id=\"4a6f174f-eb8e-4df0-baf3-22a5865bf874\"><span><span><span>하지만 OnError 데코레이터가 Cron 데코레이터 이후에 실행됨으로써 메타데이터가 사라지게 되고, NestJS에서는 task 메서드를 찾지 못해 cron job을 등록하지 못하게 됩니다.</span></span></span></p><p id=\"b7a4c0cc-4335-4a59-a951-2ae991357cd6\"><span><span><span>이렇듯 일반 메서드 데코레이터를 NestJS 환경에서 그냥 사용하게 되면 개발자의 실수에 의해 코드의 동작이 바뀔 수 있습니다. 데코레이터 실행 순서나 메타데이터 환경에 대해 알고 있지 못하다면 이런 류의 버그를 찾는 데는 시간이 오래 걸릴 지도 모릅니다.</span></span></span></p><p id=\"c6fd545d-935a-4161-8e67-c59db4cc2974\"><span><span><span>이를 방지하기 위해서는 메타데이터를 고려하여 데코레이터를 생성해야 합니다.</span></span></span></p><h2 id=\"31b7878e-168a-4774-ae1d-c21a3ab1201d\"><span><span><span>메타데이터를 유지하는 데코레이터</span></span></span></h2><p id=\"89f3618d-8756-47b8-8a9d-2b58108e5fd1\"><span><span><span>메타데이터를 유지하는 가장 naive한 방법은, 오버라이딩 되기 전에 메타데이터를 저장해둔 뒤 오버라이딩이 끝나면 메타데이터를 다시 등록해주는 것입니다.</span></span></span></p><p id=\"cd3b72e6-9165-41fc-ac3c-795c2f4f0902\"><span><span><span>OnErrorPreserveMeta 코드</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>function</span> <span>OnErrorPreserveMeta</span><span>(</span><span>handler</span><span>:</span> <span>(</span><span>e</span><span>:</span> Error<span>)</span> <span>=&gt;</span> <span>void</span><span>)</span> <span>{</span>\n  <span>return</span> <span>(</span><span>target</span><span>:</span> object<span>,</span> <span>key</span>?<span>:</span> any<span>,</span> <span>descriptor</span>?<span>:</span> any<span>)</span> <span>=&gt;</span> <span>{</span>\n    <span>const</span> <span>originMethod</span> = <span>descriptor</span>.<span>value</span><span>;</span>\n\n    <span>//  오버라이딩 되기 전의 메타데이터를 저장해놨다가</span>\n    <span>const</span> <span>metaKeys</span> = <span>Reflect</span>.<span>getOwnMetadataKeys</span><span>(</span><span>descriptor</span>.<span>value</span><span>)</span><span>;</span>\n    <span>const</span> <span>metas</span> = <span>metaKeys</span>.<span>map</span><span>(</span><span>(</span><span>k</span><span>)</span> <span>=&gt;</span> <span>[</span>\n      <span>k</span><span>,</span>\n      <span>Reflect</span>.<span>getMetadata</span><span>(</span><span>k</span><span>,</span> <span>descriptor</span>.<span>value</span><span>)</span><span>,</span>\n    <span>]</span><span>)</span><span>;</span>\n\n    <span>descriptor</span>.<span>value</span> = <span>(</span><span>...</span><span>args</span><span>:</span> any<span>[</span><span>]</span><span>)</span> <span>=&gt;</span> <span>{</span>\n      <span>try</span> <span>{</span>\n        <span>return</span> <span>originMethod</span>.<span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span><span>args</span><span>)</span><span>;</span>\n      <span>}</span> <span>catch</span> <span>(</span><span>error</span><span>)</span> <span>{</span>\n        <span>handler</span><span>(</span><span>error</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>;</span>\n\n    <span>// 오버라이딩 된 메서드에 대해 메타데이터 재등록</span>\n    <span>metas</span>.<span>forEach</span><span>(</span><span>(</span><span>[</span><span>k</span><span>,</span> <span>v</span><span>]</span><span>)</span> <span>=&gt;</span> <span>Reflect</span>.<span>defineMetadata</span><span>(</span><span>k</span><span>,</span> <span>v</span><span>,</span> <span>descriptor</span>.<span>value</span><span>)</span><span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"4fb858fa-5cf7-4db7-a964-88e6ca5c3d6e\"><span><span><span>직관적이지만 매번 Decorator를 만들어줄 때마다 이런 과정을 거쳐야 하는 게 불편합니다. 이를 해결하는 좀 더 간단한 방법이 있습니다.</span></span></span></p><h2 id=\"3b7b2649-6b09-47f5-821c-c5c7f673c3cf\"><span><span><span>프로토타입을 사용해 메타데이터 유지하기</span></span></span></h2><p id=\"73a27874-38a3-4301-af19-7b18a1e84d11\"><span><span><span>SetMetadata 파트에서 Reflect.defineMetadata 는 타겟 객체에 [[Metadata]] 라는 내부 슬롯을 정의한다고 말씀드렸습니다.</span></span></span></p><figure id=\"600b44b0-8e9c-44d1-b369-36082f365820\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/8a2721ef-7d10-4bbb-ad3a-6f76e4569ee6\"/></figure><p id=\"fe10654e-98d0-42c2-ae54-a81685f54f4b\"><span><span><span>내부 슬롯 또한 프로토타입의 내부 프로퍼티이니, 기존 프로토타입에 메타데이터 내부 슬롯이 저장되어있을 것입니다. 따라서 </span><span>새롭게 정의한 메서드에 기존 프로토타입을 연결해주면 됩니다.</span></span></span></p><p id=\"75961d2a-fa54-48c1-b511-31c68dac8ce0\"><span><span><span>변경된 OnErrorPreserveMeta 코드</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>export</span> <span>function</span> <span>OnErrorPreserveMeta</span><span>(</span><span>handler</span><span>:</span> <span>(</span><span>e</span><span>:</span> Error<span>)</span> <span>=&gt;</span> <span>void</span><span>)</span> <span>{</span>\n  <span>return</span> <span>(</span><span>target</span><span>:</span> object<span>,</span> <span>key</span>?<span>:</span> any<span>,</span> <span>descriptor</span>?<span>:</span> any<span>)</span> <span>=&gt;</span> <span>{</span>\n    <span>const</span> <span>originMethod</span> = <span>descriptor</span>.<span>value</span><span>;</span>\n\n    <span>const</span> <span>wrapper</span> = <span>(</span><span>...</span><span>args</span><span>:</span> any<span>[</span><span>]</span><span>)</span> <span>=&gt;</span> <span>{</span>\n      <span>try</span> <span>{</span>\n        <span>return</span> <span>originMethod</span>.<span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span><span>args</span><span>)</span><span>;</span>\n      <span>}</span> <span>catch</span> <span>(</span><span>error</span><span>)</span> <span>{</span>\n        <span>handler</span><span>(</span><span>error</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span><span>;</span>\n\n    <span>Object</span>.<span>setPrototypeOf</span><span>(</span><span>wrapper</span><span>,</span> <span>originMethod</span><span>)</span><span>;</span> <span>// 이 줄만 추가</span>\n    <span>descriptor</span>.<span>value</span> = <span>wrapper</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"2e568a5f-e5f1-48d9-965f-087c4433d543\"><span><span><code>Object.setPrototypeOf(arg1, arg2)</code><span> 은 arg1 객체의 프로토타입을 arg2로 설정합니다.</span></span></span></p><p id=\"57d9dcce-e050-4bc7-989e-c06645451655\"><span><span><span>기존 메서드를 덮어씌운 후 </span><code>Object.setPrototypeOf(wrapper, originMethod)</code><span>로 originMethod를 wrapper의 프로토타입으로 설정해주면 메타데이터가 유지됩니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Injectable</span><span>(</span><span>)</span>\n<span>class</span> TestService <span>{</span>\n  @<span>OnError</span><span>(</span><span>console</span>.<span>log</span><span>)</span>\n  @<span>RegisterMetadata</span><span>(</span><span>'value'</span><span>)</span>\n  <span>test</span><span>(</span><span>)</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'error'</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>const</span> <span>testService</span> = <span>new</span> <span>TestService</span><span>(</span><span>)</span>\n\n<span>console</span>.<span>log</span><span>(</span><span>'test metadata'</span><span>,</span> <span>Reflect</span>.<span>getMetadata</span><span>(</span><span>REGISTER_METADATA</span><span>,</span> <span>testService</span>.<span>test</span><span>)</span><span>)</span> <span>// 'value'</span></code></pre></div></div></div></div><hr/><p id=\"2c0662b2-633e-4877-8e29-93a4f00b8ef7\"><span><span><span>메타데이터와 NestJS의 </span><code>DiscoveryModule</code><span> 을 사용하여 NestJS의 IoC 컨테이너에 접근할 수 있는 데코레이터, 그리고 메타데이터를 유지할 수 있는 데코레이터를 만들어보았습니다.</span></span></span></p><p id=\"5b0ee3e3-5a0f-4104-a49a-5ba1607bbe18\"><span><span><span>메타데이터 태깅, DiscoveryModule, 프로토타입을 사용해 NestJS 환경에 맞는 데코레이터를 만들 수 있었습니다. 이 글을 통해 더욱 더 NestJS의 Aop 패턴에 맞는 프로그래밍을 하게 되었기를 바랍니다.</span></span></span></p><p id=\"ebcadc69-ea03-432f-b933-0985f7986990\"><span><span><span>또한 토스 Node.js 챕터는 토스의 다양한 제품과 라이브러리 개발을 위해 팀원들의 지속적인 성장이 중요하다고 믿으며, 이를 위해 코드 리뷰, 스터디와 엔지니어링 세미나 등을 통해 꾸준히 공부하고 공유하는 자리를 가지고 있으니 많은 관심 부탁드립니다.</span></span></span></p><p id=\"22bc8782-1876-47e3-bac0-6750f08dc8d3\"><span><span></span></span></p><hr/><h2 id=\"25d5d925-2877-44a5-a3f6-38b54b01e2b4\"><span><span><span>References</span></span></span></h2><ul><li id=\"205d64b0-0c32-4a30-ba4c-2faa84d1a505\"><span><span><a href=\"https://zuminternet.github.io/nestjs-custom-decorator/\" rel=\"noreferrer noopener\" target=\"_blank\">https://zuminternet.github.io/nestjs-custom-decorator/</a></span></span></li><li id=\"ea35f304-9d23-417b-9b45-94a649cefda5\"><span><span><a href=\"https://github.com/nestjs/nest\" rel=\"noreferrer noopener\" target=\"_blank\">https://github.com/nestjs/nest</a></span></span></li><li id=\"2826843e-ea74-4b3e-ba5f-71e8604cbe98\"><span><span><a href=\"https://github.com/nestjs/swagger/issues/217\" rel=\"noreferrer noopener\" target=\"_blank\">https://github.com/nestjs/swagger/issues/217</a></span></span></li><li id=\"1d2b4198-0089-4a71-b86e-6f545dd76388\"><span><span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" rel=\"noreferrer noopener\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf</a></span></span></li></ul></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "15": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://wp.toss.tech/wp-content/uploads/2022/12/01-1.png\"/><h1>토스증권 QA 문화 ‘통합테스트’를 아시나요? (feat. 해외주식)</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/chaeeun-hwang.png\"/><div><div><h3>황채은</h3><h3>ㆍ<!-- -->QA Manager</h3></div><div>2022. 12. 12</div></div></section></header><div><p id=\"33ada486-bcc0-4dec-b5d4-73afc9aad6d8\"><span><span><span>안녕하세요. 토스증권 QA팀에서 일하고 있는 QA Manager 황채은입니다.</span></span></span></p><p id=\"f0c88f7f-7d27-4e87-a541-a5784f0ebc3b\"><span><span><span>지난 글에서 잠깐 언급되었던 토스증권의 Closed Beta Test 기억하실까요? </span><code>🔗</code><code>지난 포스팅 참고하기 링크</code></span></span></p><p id=\"0117d013-7516-4bf1-b6d8-84cdd84efc31\"><span><span><span>오늘은 해외 증권 서비스 출시를 위해 토스증권 임직원 대상으로 진행한 Closed Beta Test 에 대해 소개하려고 합니다.</span></span></span></p><h3 id=\"f0149061-13a3-42d4-9a8a-a091b4f59135\"><span><span><span>토스증권 서비스는 어떤 테스트 과정을 통해 출시되고 있을까요?</span></span></span></h3><p id=\"43c3fcc2-ad53-4e43-b71d-97ed6d090e3f\"><span><span><span>토스증권에서는 기능별로 Silo가 만들어져있고, 그 Silo에는 PO, Developer, PD, DA, QA가 함께 서비스를 만들고 있는데요.</span></span></span></p><ul><li id=\"0d392a3f-00fb-420f-86cd-1511d05eb413\"><span><span><span>PO(Product Owner), 개발자(Front/Server/Core), PD(Product Designer), DA(Data Analyst), QA(Quality Assurance)</span></span></span></li></ul><p id=\"d9e020e5-56db-4eb1-88ca-38ec4e01ffce\"><span><span><span>개발이 완료된 서비스들은 1차로 개발자 단위 테스트를 진행 후 QA Manager는 알파 환경에서 계획한 테스트를 진행하고, 이슈 수정이 모두 완료되면 QA 환경에서 최종 확인된 기능에 대해 서비스 Release를 Silo 별로 진행하고 있습니다. 이런 과정은 일반적인 IT 회사의 QA Cycle과 비슷하게 진행하고 있어요.</span></span></span></p><p id=\"63b4dd2c-a5c0-473e-9f24-2b75bf773a33\"><span><span><span>하지만, 토스증권에서는 내부 임직원들 대상으로 테스트 참여를 유도하여 미처 발견하지 못한 Edge Case 들과 보다 다양한 사용자의 피드백을 미리 얻고자  Closed Beta Test를 진행하기도 한답니다. 실제 제가 작년에 진행했던 토스증권의 해외 주식 서비스 런칭 경험을 소개해 드리려고 해요.</span></span></span></p><p id=\"cd94f710-cf96-43a6-81ea-ba1ddf6a7298\"><span><span><span>토스증권에서 진행한 내부 임직원 테스트는 아래의 다양한 테스트 방식의 개념을 조금씩 섞어서 진행했어요.</span></span></span></p><p id=\"a99a5ac7-bef8-473a-9964-55df52105d2e\"><span><span><span>QA라면 모두가 알고 있는 탐색적 테스팅의 개념, Dog Fooding, Bug Bash를 모두 활용하였는데요. 그전에 개념들을 한번 언급하고 지나갈게요!</span></span></span></p><blockquote id=\"81359145-dd4e-44ae-9a1a-f7fa21a851e0\"><span><span><span>Closed Beta Test란?</span></span></span><div><p id=\"a6c3bd83-2780-4d09-bbba-a82911e0c9b5\"><span><span><span>비공개 베타 테스트로, 서비스를 정식으로 오픈하기 전에 프로그램의 버그를 찾거나 사용성, 요구사항 충족 등을 검증하기 위해 개발자와 관련되지 않은 사용자에 의해 진행되는 테스트</span></span></span></p></div></blockquote><blockquote id=\"7a241461-b9df-4cd1-956d-e8e0ed335ed9\"><span><span><span>탐색적 테스팅이란?</span></span></span><div><p id=\"f602103e-9304-48e4-96c1-56dda9109ed1\"><span><span><span>테스트 대상 제품을 사용하면서 제품의 정보 습득과 동시에 테스트를 설계하고 실행하는 방식으로 탐색적 테스팅의 주요 구성요소는 Test Charter, Test Note, Time Boxing, Debrief가 있음</span></span></span></p></div></blockquote><blockquote id=\"5ee6eac2-d0b5-40b5-bcf3-d0d09f0e0075\"><span><span><span>Dog Fooding 이란?</span></span></span><div><p id=\"1f3269b5-ed9f-4748-945b-04f856cf3a0f\"><span><span><span>서비스 출시 전 사용자의 입장에서 내부 인원이나 개발자가 직접 사용하며 제품을 개선하는 것</span></span></span></p></div></blockquote><blockquote id=\"d8d8bca6-6b84-455e-a31e-37beec168b99\"><span><span><span>Bug Bash란?</span></span></span><div><p id=\"da5d11ea-7ff3-45f3-9431-f5b834cddf15\"><span><span><span>제품이 최종 릴리즈되기 전 다양한 직군의 인원들이 제품을 사용하며 아직 남아있을 수 있는 버그를 찾아내는 활동으로 짧은 시간에 많은 인원이 진행하기 때문에 상대적으로 빠르게 버그를 찾을 수 있음</span></span></span></p></div></blockquote><h3 id=\"979cce86-da59-4609-939c-9fbceceb9bb4\"><span><span><span>토스증권의 Closed Beta Test는 어떻게 진행되었을까요?</span></span></span></h3><p id=\"fc2159fb-c6cf-4130-a215-417b6493dc09\"><span><span><span>업무시간에 임직원 대상으로 진행하는 만큼, 효율적으로 진행하기 위해 여러 준비과정이 필요했는데요.</span></span></span></p><p id=\"fb035a05-766a-43e0-b7b6-7ba34ccf72d0\"><span><span><span>개개인이 자율적으로 참석 가능한 임직원의 신청을 받았는데, 개발자를 제외한 임직원 중에서 70% 이상이 참여할 정도로 많은 관심을 가져주셨어요.</span></span></span></p><p id=\"2703c818-94b9-4efc-925a-c89a27ab4615\"><span><span><span>서비스에 대해 여러 피드백을 받기 위해 직군에 관계없이 참여가 가능한 분들은 모두 신청을 받았는데요. 그러다보니, 알파 환경 자체를 처음 접해보는 임직원분들도 있어 사용성에 어려움이 많아 사전 테스트 환경 준비가 중요했어요. 마치, 실제 서비스가 런칭되었을 때와 동일하게 사용하는 경험을 주기 위해 알파 테스트 환경이지만 운영과 동일한 환경에서 볼 수 있도록 테스트 환경을 마련하였는데, 모두의 시간을 할애하는 만큼 테스트 환경을 위해 InfraOps, Network Engineer, Devops 팀에서 테스트 환경 구축에 많은 도움을 주셨어요.</span></span></span></p><p id=\"b1bf04d3-fd54-489f-8626-30bfaf18b871\"><span><span><span>신청자 대다수가 토스증권 해외 주식에 대한 기본적인 Spec을 전혀 모르기 때문에 테스트 시나리오를 제공해야했어요. 그래서, 탐색적 테스팅의 Test Charter 개념을 섞어서 Test Scenario를 Use Case 형식으로 작성했는데요. 서비스의 주요 퍼널을 통과할 수 있게 작성하고 QA Team의 Peer Review를 통해 시나리오를 준비하였어요.</span></span></span></p><figure id=\"b0e9db8c-ae1a-426d-a875-8e0a16906d33\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/7e6d343d-0544-40eb-b20f-1fcf9a77f1bd\"/></figure><p id=\"73e1c41c-44c4-49ac-aa4f-d4473f0c97d7\"><span><span><span>시나리오는 총 36건 작성을 하였고, 해외 증권 거래소 시간에 맞게 테스트를 진행해야 해서, Use Case를 테스트할 수 있는 Timeline을 설정했어요. 해외 증권 거래소의 테스트 거래소와 연동을 하여 실제 주식이 체결되는 것처럼 보이게 환경을 만들어 두었기 때문에, 먼저 증권 거래소 운영 시간에 맞추고 주식의 매수/매도 유형에 맞춰 시나리오를 만들었는데요. 그래서 해외 주식 서비스는 밤 11시가 넘은 심야에도 계속 진행되어야 했어요.</span></span></span></p><p id=\"8b52766e-2a65-4a13-9533-5e2bf3212afd\"><span><span><span>해당 Timeline에 맞게 임직원 모두가 같은 시간대에 테스트를 하는 것을 유도하기 위해 캘린더 초대도 잊지 않았어요! (참석자 모두, 심야 시간인데도 불구하고 수락을 눌러주셨어요!)</span></span></span></p><p id=\"43f799f2-03f3-4bfd-8033-bb2b328107ed\"><span><span><span>이렇게 준비된 테스트 형식을 모두가 이해하기 쉽게 “</span><span>통합테스트</span><span>” 라는 용어로 정리하였어요!</span></span></span></p><figure id=\"1d3b7495-93d6-44b6-a106-d782cb9d449b\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/ec7cb08a-6e5d-4ab1-b09e-86054d60cbde\"/></figure><p id=\"e0dffab3-4a75-4d47-8fe1-f3eb42a30382\"><span><span><span>이제 마지막으로 테스트 진행 관련된 사항을 어떻게 공유할지, 어떻게 Debrief 할지를 정해야 했는데요.</span></span></span></p><p id=\"21243fb3-6e41-45ed-b94a-95eb1d671e50\"><span><span><span>토스증권은 업무를 보다 빠르고 효율적으로 진행할 수 있도록 만들어진 다양한 사내 툴들이 있어요.</span></span></span></p><p id=\"c66841da-a765-49f6-990a-0f74d27a6d0f\"><span><span><span>대표적으로 Slack에서 JIRA(Bug Tracking System)를 바로 연동하여 이슈를 생성하고 완료까지 처리할 수 있는 (Bot)이 있어요. 또 Slack의 Workflow에서 Emoji를 남기면, 해당 게시글이 다른 채널로 전달되는 기능을 활용해서 보다 편하게 이슈를 모아볼 수 있었어요.</span></span></span></p><p id=\"680f96a0-524a-4533-aa33-516411064c0d\"><span><span><span>글로 설명하려니 이해가 잘 안되시죠?</span></span></span></p><h3 id=\"b23e353d-8506-496b-aa36-a08709753511\"><span><span><span>그러면, 이제 저와 함께 통합테스트를 함께 진행해 볼까요?</span></span></span></h3><figure id=\"91732cce-a3fc-4e43-9423-514d12beb264\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/2a0d754f-0878-4d9d-bb6b-009b24f181d5\"/></figure><ul><li id=\"82291670-97e5-4d2c-87d1-8921da3d0967\"><span><span><span>완료 후 미션에</span><span> DONE </span><span>Emoji를 남기면 Thread에 완료 표기</span></span></span></li></ul><figure id=\"a71d57f4-86f6-449a-8cd5-955f358c4e16\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/cc2f4bfa-23fd-4040-acb9-cb95c81723b0\"/></figure><ul><li id=\"08ab4030-cfe8-4d83-a30e-ad938ee2237a\"><span><span><span>미션 중 이슈로 인해 진행하지 못하는 경우</span><span> SOS </span><span>Emoji를 남기면 Thread에 표기</span></span></span></li></ul><figure id=\"f403aed9-f9a9-488f-9585-dd5e688df995\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/971d304a-0a3d-4a3e-b30a-163f0a8a90ba\"/></figure><ul><li id=\"c7e143ba-b13e-483b-84c7-d9b854d096ca\"><span><span><span>이슈에 Emoji를 남기면 별도 채널로 이동되고, 해당 채널에 이슈 등록</span></span></span></li></ul><figure id=\"976d5c2e-88a8-4675-b053-1a2deae223d4\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/232ff959-6b02-4fb3-82d2-2dcf192629eb\"/></figure><figure id=\"6170d181-653b-4df4-bfa5-57eff512e2b2\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/6e4cff99-c51d-4749-9acd-575834ae4c69\"/></figure><p id=\"349d2653-2512-4325-95ae-47713f9fc746\"><span><span><span>이런 미션의 형태로 진행하니, 임직원들도 게임에 참여하듯이 (미션 클리어! 효과음이 들리시나요?) 즐겁고 적극적으로 진행해 주셨어요. 또한 테스트를 진행하는 동안 이전에 사용하였던 해외증권 서비스의 경험을 비롯한 다양한 의견들을 제시해 주셨어요.</span></span></span></p><p id=\"33269777-16c8-4bfb-b613-455f3489e175\"><span><span><span>그렇게 통합테스트 기간 동안 약 100개가 넘는 피드백이 등록되었는데요. 👀</span></span></span></p><figure id=\"7aa7dd30-97ac-4451-8242-cbf11ee94c8b\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/f9df9b7c-3e8b-40ce-8f66-7a96d4f21085\"/></figure><p id=\"85c03a5f-04ff-4990-9f22-eaea533d2b3e\"><span><span><span>전달된 의견들은 실제로 Bug나 결함보다는 사용자로서의 의견에 더 가까운 내용들이 많았어요. 제시해 주신 여러 의견들을 통해 오픈 전 서비스의 사용성 및 품질을 더 높일 수 있었다고 생각해요.</span></span></span></p><p id=\"f5cb9b27-6122-4602-a248-21f23c8760ca\"><span><span><span>3일이라는 짧다면 짧고 길다면 긴 기간 동안 모두가 즐겁게 테스트에 참여해 주셨어요.</span></span></span></p><h3 id=\"471e9fd2-ea23-4736-a3a7-39fbdc9175bb\"><span><span><span>서비스 출시 전, 통합테스트는 어떤 의미였을까요?</span></span></span></h3><p id=\"d07680c9-b22e-405a-8f56-5eb768c51b07\"><span><span><span>임직원 대상으로 진행한 통합테스트는 QA팀에서 QA Plan에 맞게 여러 테스트 Iteration을 수행하고, 개발 Side의 단위 테스트, 성능 테스트가 진행이 되었다 하더라도 우리가 만든 서비스가 만든 의도에 맞게 동작하는지에 대해 미리 임직원 대상으로 실험할 수 있었어요. 우리가 만들었던 기능 중에서 우려했던 부분 역시 다시 드러나면서 개선이 더 필요한 부분에 대해 Maker 들과 공감대 형성에 가장 큰 역할이 되었습니다.</span></span></span></p><p id=\"1a17b214-f284-4f65-9bb0-c42374b12857\"><span><span><span>또한, 우리가 사용자에게 의도한 대로 동작하는 부분이 제대로 동작하는지까지 미리 알 수 있었고 그 장치들을 더 효과 있게 바꾸는 계기도 되었어요.</span></span></span></p><p id=\"ddaa5b26-7be8-4853-b812-bb76ed38e47c\"><span><span><span>토스증권 QA팀에서는 정량적인 서비스 품질뿐만 아니라, 회사에서 품질을 생각하는 문화에 대해서도 모두가 참여하도록 유도하고 서비스 품질에 대한 정성적인 기준에 대해 다 같이 고민하는 시간을 만들어가는 과정에도 주도적으로 참여해야 한다고 생각합니다.</span></span></span></p><p id=\"95f0ebc8-9228-45ec-b9b8-d2c5c3d0ff21\"><span><span><span>그래서 bugbash, closed beta testing, 탐색적 테스팅 등과 같이, QA라면 흔히 알고 있는 이런 여러 테스트 방식 중에서 필요한 부분으로 토스증권만의 ‘통합테스트’ 라는 컨셉을 만들었어요. 또한, 임직원 70% 이상이 참여하도록 만들었고 그 결과 또한 성황리에 마무리할 수 있었어요.</span></span></span></p><p id=\"d61109d8-bbab-401e-9fc7-33c7c38008ae\"><span><span><span>이후로 임직원과 함께하는 통합테스트는 토스증권의 QA 문화로 자리매김할 수 있었고, 지금도 큰 서비스가 출시될 때마다 통합테스트를 주기적으로 진행하고 있습니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "16": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://wp.toss.tech/wp-content/uploads/2023/01/js_center.png\"/><h1>똑똑하게 브라우저 Polyfill 관리하기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/sojin.jpg\"/><div><div><h3>박서진</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2023. 1. 21</div></div></section></header><div><p id=\"0754394a-1e5c-4fc9-a0e3-b662ccfbcd36\"><span><span><span>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</span></span></span></p><p id=\"3c04e1b9-9ab9-4345-9f5e-cac2ffa640b0\"><span><span><span>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</span></span></span></p><h2 id=\"379ceb00-78fc-4689-a2fd-aec05120d29a\"><span><span><span>Polyfill이란?</span></span></span></h2><p id=\"591be96d-c1cf-4d23-8962-b46fcb5a703c\"><span><span><span>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 </span><code>Promise</code><span>나 </span><code>Set</code><span> 객체가 없는 경우가 있습니다. 편리한 </span><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/at\" rel=\"noreferrer noopener\" target=\"_blank\">Array.prototype.at()</a><span> API는 Chrome 92 이상에서만 지원되기도 합니다.</span></span></span></p><p id=\"3fb60d14-1f6f-4b82-a014-0fc542d90273\"><span><span><span>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>.<span>at</span><span>(</span>-<span>1</span><span>)</span><span>;</span>\n\n<span>Promise</span>.<span>resolve</span><span>(</span><span>1</span><span>)</span><span>;</span>\n\n<span>new</span> <span>Set</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"203e6945-2247-4aea-b397-29edb2246dc6\"><span><span><span>이런 문제를 해결하기 위해서는 오래된 브라우저에서 없는 구현을 채워주어야 합니다. 이렇게 구현을 채워주는 스크립트를 </span><span>Polyfill</span><span>이라고 합니다. 대부분의 Polyfill은 아래와 같이 이미 브라우저에 포함되어 있는지 체크하고, 없으면 값을 채워주는 형태로 동작합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>Array</span>.<span>prototype</span>.<span>at</span> = <span>Array</span>.<span>prototype</span>.<span>at</span> ?? <span>/* Array.prototype.at에 대한 자체 구현 */</span><span>;</span>\n\n</code></pre></div></div></div></div><p id=\"db5754d5-321e-4b07-a7cf-09d53c1a26a5\"><span><span><span>위 스크립트를 실행한 이후에는, 오래된 브라우저에서도 안전하게 </span><code>[1, 2, 3].at(-1)</code><span> 코드를 실행할 수 있습니다.</span></span></span></p><p id=\"02cce68b-496c-4988-8ba2-946abb835bc2\"><span><span><span>표준적으로 사용되는 Polyfill들은 </span><a href=\"https://github.com/zloirock/core-js\" rel=\"noreferrer noopener\" target=\"_blank\">core-js 리포지토리</a><span>에 모여 있습니다. 아래 코드를 실행하면 대부분의 ECMAScript 표준 객체와 메서드를 오래된 브라우저에서도 사용할 수 있게 됩니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>'core-js/actual'</span><span>;</span></code></pre></div></div></div></div><h2 id=\"93f18ed6-8b2b-4349-8e3e-12c0b72178ca\"><span><span><span>Polyfill의 문제</span></span></span></h2><p id=\"a72458f9-d242-4790-9997-8d45d2b74a03\"><span><span><span>위와 같이 코드를 작성하면 폭넓은 브라우저를 지원할 수 있다는 장점이 있지만 문제가 하나 생깁니다. 불러와야 하는 JavaScript 코드가 많아진다는 점입니다. 실행해야 하는 Polyfill 스크립트가 많아질수록 사용자가 경험하는 웹 서비스의 성능은 나빠집니다.</span></span></span></p><p id=\"2e311819-3441-429e-a980-19932c12b9c7\"><span><span><span>특히, 위와 같이 설정하면 최신 버전의 브라우저에서는 대부분의 ECMAScript 표준 객체와 메서드가 포함되어 있음에도 불구하고 불필요한 Polyfill 스크립트를 내려받아야 합니다. 꼭 필요한 Polyfill 스크립트만 선택적으로 불러올 수 있는 방법은 없을까요?</span></span></span></p><h2 id=\"728f08d8-c96d-41e0-8a11-c8256b35eac4\"><span><span><span>첫 번째 방법: @babel/preset-env 사용하기</span></span></span></h2><p id=\"5c8db22d-b5d3-42e1-b416-5b8e4571be44\"><span><span><span>이 문제를 해결하기 위해 사용할 수 있는 첫 번째 방법은 </span><a href=\"https://babeljs.io/docs/en/babel-preset-env\" rel=\"noreferrer noopener\" target=\"_blank\">@babel/preset-env</a><span> Smart Preset을 사용하는 것입니다. 이 Smart Preset은 이미 정의된 브라우저 목록에 따라서 자동으로 필요 없는 Polyfill을 제거해 줍니다.</span></span></span></p><p id=\"3eacbd33-406a-4e41-8b1c-e35995934433\"><span><span><span>예를 들어서, 웹 페이지가 Internet Explorer 11을 지원해야 한다면 아래와 같이 </span><code>babel.config.js</code><span> 를 설정할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>module</span>.<span>exports</span> = <span>{</span>\n  <span>presets</span><span>:</span> <span>[</span>\n    <span>[</span><span>'@babel/preset-env'</span><span>,</span> <span>{</span> <span>targets</span><span>:</span> <span>{</span> <span>ie</span><span>:</span> <span>11</span> <span>}</span> <span>}</span><span>]</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>/* 그 외의 설정 */</span>\n<span>}</span><span>;</span>\n\n</code></pre></div></div></div></div><p id=\"de3d91a3-f8a0-4a7c-b72c-613ff5ced554\"><span><span><span>이후에 동일하게 </span><code>core-js/actual</code><span> 을 import 하더라도 Internet Explorer 11에 필요한 Polyfill 목록만 포함되는 것을 확인할 수 있습니다. 총 221개의 Polyfill이 포함됩니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 입력 코드</span>\n<span>import</span> <span>'core-js/actual'</span><span>;</span></code></pre></div></div></div></div><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 출력 코드</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.symbol.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.symbol.description.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.symbol.async-iterator.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.symbol.has-instance.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.symbol.is-concat-spreadable.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.symbol.iterator.js\"</span><span>)</span><span>;</span>\n<span>// ... 계속 (총 221개의 Polyfill)</span></code></pre></div></div></div></div><p id=\"23d38f00-1b7c-4022-84fb-6bae11fbd673\"><span><span><a href=\"https://babeljs.io/repl/#?browsers=ie%2011&amp;build=&amp;builtIns=entry&amp;corejs=3.21&amp;spec=false&amp;loose=false&amp;code_lz=JYWwDg9gTgLgBAcgMbQKYFoBWBnA9AQyRgFd8AbBAbiA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=env&amp;prettier=false&amp;targets=&amp;version=7.20.12&amp;externalPlugins=&amp;assumptions=%7B%7D\" rel=\"noreferrer noopener\" target=\"_blank\">Babel playground</a></span></span></p><p id=\"079992a9-ee49-4008-9606-5d02845c36be\"><span><span><span>Internet Explorer 11을 지원 브라우저 목록에서 제외하면 훨씬 적은 25개의 Polyfill이 포함됩니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>module</span>.<span>exports</span> = <span>{</span>\n  <span>presets</span><span>:</span> <span>[</span>\n    <span>[</span><span>'@babel/preset-env'</span><span>,</span> <span>{</span> <span>targets</span><span>:</span> <span>'defaults, not ie 11'</span> <span>}</span><span>]</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>/* 그 외의 설정 */</span>\n<span>}</span><span>;</span></code></pre></div></div></div></div><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 입력 코드</span>\n<span>import</span> <span>'core-js/actual'</span><span>;</span></code></pre></div></div></div></div><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// 출력 코드</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.error.cause.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.aggregate-error.cause.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.array.at.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.array.includes.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.object.has-own.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.regexp.flags.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.string.at-alternative.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/es.typed-array.at.js\"</span><span>)</span><span>;</span>\n<span>require</span><span>(</span><span>\"core-js/modules/esnext.array.find-last.js\"</span><span>)</span><span>;</span>\n<span>// ... 계속 (총 25개의 Polyfill)</span>\n\n</code></pre></div></div></div></div><p id=\"7776dba5-ca98-494d-abba-e3e32f94b7fd\"><span><span><a href=\"https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011&amp;build=&amp;builtIns=entry&amp;corejs=3.21&amp;spec=false&amp;loose=false&amp;code_lz=E4UwjgrglqAUDkBjA9qAtAKwM4HoCGiALhHgDbwCUA3EA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=env&amp;prettier=false&amp;targets=&amp;version=7.20.12&amp;externalPlugins=&amp;assumptions=%7B%7D\" rel=\"noreferrer noopener\" target=\"_blank\">Babel playground</a></span></span></p><p id=\"382b647e-abe5-4d3e-a394-5bc8725b11b5\"><span><span><span>이렇게 </span><code>@babel/preset-env</code><span>에 브라우저 지원 범위를 설정하면 Polyfill을 안정적으로 포함하면서 스크립트의 크기를 감축할 수 있습니다.</span></span></span></p><h2 id=\"b8ed2ff6-984d-40f9-b400-ad2d63558c4c\"><span><span><span>두 번째 방법: User-agent에 따라 동적으로 스크립트 생성하기</span></span></span></h2><p id=\"0ce02ebd-a4c4-4681-9872-d50cd1b9c6c9\"><span><span><span>Babel을 올바르게 설정함으로써 포함되는 Polyfill 스크립트의 크기를 줄일 수 있지만, 최신 버전의 브라우저에서 불필요한 스크립트를 내려받게 되는 문제는 동일합니다. 예를 들어서, Chrome 최신 버전은 문제없이 </span><code>[1, 2, 3].at(-1)</code><span> 을 실행할 수 있지만, 관련한 Polyfill 스크립트를 내려받습니다.</span></span></span></p><p id=\"72e0d3a2-21e8-48ef-ad05-b71e369e9ae7\"><span><span><span>이 문제를 해결하는 또다른 방법은 브라우저의 User-agent에 따라서 동적으로 Polyfill 스크립트를 생성하는 것입니다.</span></span></span></p><p id=\"8a2f8969-f2ef-473a-a766-864b7a2aa5b3\"><span><span><span>예를 들어서, Financial Times에서 관리하고 있는 </span><a href=\"http://polyfill.io/\" rel=\"noreferrer noopener\" target=\"_blank\">polyfill.io</a><span> 서비스에서는 </span><a href=\"https://polyfill.io/v3/polyfill.min.js\" rel=\"noreferrer noopener\" target=\"_blank\">https://polyfill.io/v3/polyfill.min.js</a><span> 라고 하는 경로로 동적인 Polyfill 스크립트를 제공합니다.</span></span></span></p><p id=\"2618c1f7-faee-4b6a-ab75-a8287c71a275\"><span><span><span>최신 버전의 Chrome에서 해당 경로에 접속하면, 아무 Polyfill 스크립트도 내려오지 않는다는 것을 알 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>$ </span><span>curl</span> -<span>XGET </span><span>\"https://polyfill.io/v3/polyfill.min.js\"</span> \\\n   -<span>H </span><span>\"User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Mobile Safari/537.36\"</span> \\\n   -<span>v</span>\n<span>/* 빈 스크립트 */</span></code></pre></div></div></div></div><p id=\"f09f95d6-0046-4b5f-9f66-fc0e4063e9a8\"><span><span><span>반대로, Internet Explorer 11에서 실행하면 많은 양의 Polyfill 스크립트가 내려온다는 것을 알 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>$ </span><span>curl</span> -<span>XGET </span><span>\"https://polyfill.io/v3/polyfill.min.js\"</span> \\\n   -<span>H </span><span>\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko\"</span> \\\n   -<span>v</span>\n<span>(</span><span>function</span><span>(</span><span>self</span><span>,</span> <span>undefined</span><span>)</span> <span>{</span>!<span>function</span><span>(</span><span>t</span><span>)</span><span>{</span><span>t</span>.<span>DocumentFragment</span>=<span>function</span> <span>n</span><span>(</span><span>)</span><span>{</span><span>return</span> <span>document</span>.<span>createDocumentFragment</span><span>(</span><span>)</span>\n\n</code></pre></div></div></div></div><p id=\"8498d5e5-4557-429e-a0ac-1f341dc753cc\"><span><span><span>이렇게 User-agent에 따라 동적으로 Polyfill 스크립트를 생성하면 최신 브라우저에서는 아무 Polyfill도 내려주지 않고, 오래된 브라우저에서는 필요한 Polyfill 만 내려줄 수 있게 됩니다. ✨  브라우저가 꼭 필요한 Polyfill 스크립트만 내려받을 수 있는 것이죠.</span></span></span></p><h3 id=\"c8e4c784-d523-49b7-b822-8e413e0ed395\"><span><span><span>자체 Polyfill 서비스 구축하기</span></span></span></h3><p id=\"5acce830-c158-487e-950e-480a75e7bad5\"><span><span><span>토스에서는 </span><a href=\"http://polyfill.io/\" rel=\"noreferrer noopener\" target=\"_blank\">polyfill.io</a><span> 서비스를 그대로 사용할 수도 있었지만, Financial Times가 제공하는 Polyfill 중 일부가 ECMAScript 표준대로 작동하지 않아 오류가 발생한 경험이 있어서 자체적으로 구현했습니다.</span></span></span></p><p id=\"501736d5-0951-4cf8-8073-93932b498d7a\"><span><span><code>core-js</code><span> 와 </span><code>core-js-compat</code><span>, </span><code>browserslist-useragent</code><span> 라이브러리를 사용하면 손쉽게 동적인 Polyfill을 제공하는 Node.js 서버를 만들 수 있었습니다.</span></span></span></p><p id=\"db8126f6-fd87-4a77-a16f-60c83f0765eb\"><span><span><span>먼저, User-agent에 따라서 필요한 core-js polyfill 목록을 계산하기 위해서 아래와 같은 </span><code>getCoreJSPolyfillList</code><span> 함수를 작성할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>{</span> <span>resolveUserAgent</span> <span>}</span> <span>from</span> <span>'browserslist-useragent'</span><span>;</span>\n<span>import</span> <span>compat</span> <span>from</span> <span>'core-js-compat'</span><span>;</span>\n\n<span>/**\n * userAgent에 따라 필요한 Polyfill의 목록을 반환합니다.\n * e.g. ['es.symbol', 'es.symbol.description', 'es.symbol.async-iterator']\n */</span>\n<span>function</span> <span>getCoreJSPolyfillList</span><span>(</span><span>userAgent</span><span>:</span> string<span>)</span> <span>{</span>\n  <span>try</span> <span>{</span>\n    <span>const</span> <span>result</span> = <span>resolveUserAgent</span><span>(</span><span>userAgent</span><span>)</span><span>;</span>\n    <span>const</span> <span>majorVersion</span> = <span>parseMajorVersion</span><span>(</span><span>result</span>.<span>version</span><span>)</span><span>;</span>\n\n    <span>return</span> <span>compat</span><span>(</span><span>{</span>\n      <span>targets</span><span>:</span> <span>`</span><span>${</span><span>result</span>.<span>family</span><span>}</span><span> &gt;= </span><span>${</span><span>majorVersion</span><span>}</span><span>`</span><span>,</span>\n      <span>version</span><span>:</span> <span>coreJSVersion</span><span>,</span>\n    <span>}</span><span>)</span>.<span>list</span><span>;</span>\n  <span>}</span> <span>catch</span> <span>{</span>\n    <span>// 일반적이지 않은 User-Agent인 경우</span>\n    <span>return</span> <span>compat</span><span>(</span><span>{</span>\n      <span>targets</span><span>:</span> <span>'IE &gt;= 11'</span><span>,</span>\n      <span>version</span><span>:</span> <span>coreJSVersion</span><span>,</span>\n    <span>}</span><span>)</span>.<span>list</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>function</span> <span>parseMajorVersion</span><span>(</span><span>versionString</span><span>:</span> string<span>)</span> <span>{</span>\n  <span>const</span> <span>match</span> = <span>versionString</span>.<span>match</span><span>(</span><span>/^(\\\\d+)\\\\.*/</span><span>)</span><span>;</span>\n\n  <span>if</span> <span>(</span><span>match</span> == <span>null</span><span>)</span> <span>{</span>\n    <span>return</span> <span>versionString</span><span>;</span>\n  <span>}</span>\n\n  <span>return</span> <span>match</span><span>[</span><span>1</span><span>]</span><span>;</span>\n<span>}</span>\n\n</code></pre></div></div></div></div><p id=\"2b8ee10d-d2e3-42d5-9cd0-28f2be549f7a\"><span><span><span>이제 필요한 Polyfill 리스트를 하나의 스크립트로 만들면 됩니다. 토스에서는 </span><code>esbuild</code><span> 를 이용하여 core-js 스크립트를 하나로 이어붙이는 방법을 선택했습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>{</span> <span>build</span> <span>}</span> <span>from</span> <span>'esbuild'</span><span>;</span>\n\n<span>/*\n * userAgent에 맞는 완성된 Polyfill 스크립트를 생성한다.\n */</span>\n<span>async</span> <span>function</span> <span>buildPolyfillScript</span><span>(</span><span>userAgent</span><span>:</span> string<span>)</span> <span>{</span>\n  <span>const</span> <span>script</span> = <span>getCoreJSPolyfillScript</span><span>(</span><span>userAgent</span><span>)</span><span>;</span>\n\n  <span>const</span> <span>result</span> = <span>await</span> <span>build</span><span>(</span><span>{</span>\n    <span>stdin</span><span>:</span> <span>{</span>\n      <span>contents</span><span>:</span> <span>script</span><span>,</span>\n      <span>loader</span><span>:</span> <span>'js'</span><span>,</span>\n    <span>}</span><span>,</span>\n    <span>target</span><span>:</span> <span>'es5'</span><span>,</span>\n    <span>bundle</span><span>:</span> <span>true</span><span>,</span>\n    <span>minify</span><span>:</span> <span>true</span><span>,</span>\n    <span>write</span><span>:</span> <span>false</span><span>,</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>result</span>.<span>outputFiles</span><span>[</span><span>0</span><span>]</span>.<span>contents</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>createCoreJSPolyfillScript</span><span>(</span><span>userAgent</span><span>:</span> string<span>)</span> <span>{</span>\n  <span>return</span> <span>getCoreJSPolyfillList</span><span>(</span><span>userAgent</span><span>)</span>\n    <span>/* 실험적인 esnext 기능은 제외합니다. */</span>\n    .<span>filter</span><span>(</span><span>x</span> <span>=&gt;</span> !<span>x</span>.<span>startsWith</span><span>(</span><span>'esnext.'</span><span>)</span><span>)</span>\n    .<span>map</span><span>(</span><span>item</span> <span>=&gt;</span> <span>`import \"core-js/modules/</span><span>${</span><span>item</span><span>}</span><span>\";`</span><span>)</span>\n    .<span>join</span><span>(</span><span>'\\\\n'</span><span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n</code></pre></div></div></div></div><p id=\"204aaaf4-9817-4ec6-8d0c-87e2bc918cd0\"><span><span><span>이제 이 함수를 Node.js 서버에 포함시키거나, Lambda@Edge, Compute@Edge 와 같은 Edge Runtime에 포함하면 손쉽게 나만의 Polyfill 서버를 띄울 수 있습니다.</span></span></span></p><h2 id=\"f1e6820c-c10b-4d80-9d50-a77f0f26b4e3\"><span><span><span>마치며</span></span></span></h2><p id=\"33ba023d-f51f-40a3-9e2d-76d5aae1d520\"><span><span><span>토스팀에서는 자체 제작한 Polyfill 시스템을 이용하여 최신 JavaScript API는 마음껏 활용하면서도 오래된 버전의 브라우저도 빠짐없이 지원할 수 있었습니다.</span></span></span></p><p id=\"f3e817be-e12e-4a3b-acf8-855a679cb5c2\"><span><span><span>글을 마무리하면서, 글의 내용을 요약해보자면 아래와 같습니다.</span></span></span></p><ul><li id=\"b56ff604-faf8-4f5d-beda-20a5f3087c6e\"><span><span><span>Polyfill이란 신규 JavaScript API를 오래된 버전의 브라우저에서도 사용할 수 있도록 하는 방법입니다. 그렇지만, Polyfill 스크립트가 많아지면 웹 성능이 나빠집니다.</span></span></span></li><li id=\"734a066e-c42d-4776-84a4-096c8702d072\"><span><span><span>Babel의 @babel/preset-env 스마트 프리셋을 이용하여 포함할 Polyfill 스크립트의 범위를 지정할 수 있습니다. 다만, 이 경우에도 최신 브라우저는 오래된 브라우저를 위한 Polyfill을 내려받습니다.</span></span></span></li><li id=\"c078ebfa-548a-4f85-96e3-53a039628b0d\"><span><span><span>User-agent에 따라 동적으로 Polyfill 스크립트를 생성할 수 있습니다. 이로써 최신 브라우저에서 내려받는 Polyfill 스크립트를 거의 없게 만들 수 있습니다.</span></span></span></li></ul></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "17": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://wp.toss.tech/wp-content/uploads/2023/03/declarative.png\"/><h1>선언적인 코드 작성하기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/sojin.jpg\"/><div><div><h3>박서진</h3><h3>ㆍ<!-- -->Frontend Developer</h3></div><div>2023. 3. 16</div></div></section></header><div><p id=\"845a104f-2def-44f7-9b42-a4b623a86f75\"><span><span><span>선언적인 코드(Declarative Code)는 프론트엔드 개발을 하다 보면 자주 만나게 되는 개념입니다. 특히 React 생태계에서 웹 서비스를 개발하다 보면 선언적인 코드에 대해 고민하게 되는데요. 이번 아티클에서는 토스 프론트엔드 챕터에서 생각하는 선언적인 코드란 무엇인지, 그리고 실제로 어떻게 선언적인 코드를 작성하는지 공유해드리려고 합니다.</span></span></span></p><h2 id=\"b2e71556-a00a-41b5-bf3f-9b5381ec050b\"><span><span><span>선언적인 코드</span></span></span></h2><p id=\"45322a8d-3f8b-4290-9d7d-13534eb761d6\"><span><span><span>토스 프론트엔드 챕터에서는 선언적인 코드를 “추상화 레벨이 높아진 코드”로 생각하고 있습니다. 예를 들어서, 아래와 같이 주어진 배열의 합을 구하는 함수 </span><code>sum</code><span> 을 생각해봅시다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>sum</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"343fbca0-86f7-4edb-af18-4220771d33fe\"><span><span><code>sum</code><span> 함수는 아래와 같이 </span><code>for</code><span> 문으로 구현할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>function</span> <span>sum</span><span>(</span><span>nums</span><span>:</span> number<span>[</span><span>]</span><span>)</span> <span>{</span>\n  <span>let</span> <span>result</span> = <span>0</span><span>;</span>\n\n  <span>for</span> <span>(</span><span>const</span> <span>num</span> <span>of</span> <span>nums</span><span>)</span> <span>{</span>\n    <span>result</span> += <span>num</span><span>;</span>\n  <span>}</span>\n\n  <span>return</span> <span>result</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"4193b44a-f0e6-4fdc-81ae-08a96ae500a0\"><span><span><span>여기에서 </span><code>sum</code><span> 함수는 초기값이 0이고, 배열이 가지고 있는 각각의 원소를 순회하면서 결과값에 더하는 작업을 추상화합니다. 덕분에 </span><code>sum</code><span> 을 다루는 사람은 복잡한 제어 흐름을 이해할 필요 없이, “배열의 합을 구한다” 라고 하는 동작에 집중하여 함수를 사용할 수 있습니다.</span></span></span></p><p id=\"d656dba5-fe27-4840-a0e4-3600476b6a3c\"><span><span><span>토스는 이렇게 동작에 집중하여 추상화된 </span><code>sum</code><span> 함수를 선언적인 코드로 생각하고 있습니다.</span></span></span></p><p id=\"f63589dc-262e-450b-8592-6cb5cd9d5456\"><span><span><span>여기에서 한 걸음 더 나아가서 </span><code>sum</code><span> 함수 내부의 </span><code>for ... of</code><span> 문을 살펴봅시다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>for</span> <span>(</span><span>const</span> <span>num</span> <span>of</span> <span>nums</span><span>)</span> <span>{</span>\n  <span>/* 동작 ... */</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"9a7c8cc3-19b7-487c-8649-d28c98281e7f\"><span><span><span>이 제어 흐름도 선언적인 코드로 볼 수 있습니다. 배열이 가지고 있는 각각의 요소를 순회하는 동작을 추상화하고 있기 때문입니다.</span></span></span></p><p id=\"c7a0d379-dc10-41f4-ba51-3d72a2a749a7\"><span><span><span>실제로 ECMAScript 표준에 따라서 </span><code>for ... of</code><span> 가 추상화하는 로직을 그대로 드러내면 아래와 같이 나타낼 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>iterator</span> = <span>nums</span><span>[</span><span>Symbol</span>.<span>iterator</span><span>]</span><span>(</span><span>)</span><span>;</span>\n\n<span>let</span> <span>step</span><span>;</span>\n\n<span>while</span> <span>(</span>!<span>(</span><span>step</span> = <span>iterator</span>.<span>next</span><span>(</span><span>)</span><span>)</span>.<span>done</span><span>)</span> <span>{</span>\n  <span>const</span> <span>num</span> = <span>step</span><span>;</span>\n  <span>/* 동작 ... */</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"3e4388a6-f77c-4d7c-ad49-6c026710e488\"><span><span><span>위와 같이, </span><code>for ... of</code><span> 문은 Iterator를 생성하고, Iterator가 끝날 때까지 다음 요소를 차례차례 가져오는 작업을 “각각의 요소를 순회하는 작업”으로 추상화합니다. 이런 관점에서 봤을 때, </span><code>for ... of</code><span> 문은 선언적인 코드입니다.</span></span></span></p><ul><li id=\"36f36e45-f8b2-48b3-8db6-fe65b2516778\"><span><span><span>실제로는 생성된 Iterator를 삭제하는 동작도 존재하므로 보다 추상화되는 로직이 많습니다.</span></span></span></li></ul><p id=\"c8c5578a-be30-4a36-93c0-6752c3efc401\"><span><span><span>코드의 관점을 벗어나면 보다 재미있는 예시를 생각할 수 있습니다.</span></span></span></p><p id=\"5fe69b7c-1635-4f10-acdc-ebd25c0c700d\"><span><span><span>“왼쪽으로 10걸음 걸어라” 라고 하는 말을 생각합시다. 여기에서</span></span></span></p><ul><li id=\"57a4fd75-537e-4682-a0a0-9b1e621f6b09\"><span><span><span>“왼쪽”은 “북쪽을 바라보았을 때 90도 돌아간 위치” 를 추상화한 것입니다.</span></span></span></li><li id=\"a0918d8e-87fb-43b6-8c51-a6c84dbba466\"><span><span><span>“90도”는 “한 번의 회전을 360등분한 각의 90배만큼 시초선에 대해 시계 반대 방향으로 돌아간 것” 을 추상화한 것입니다.</span></span></span></li><li id=\"5790df6f-184d-48f5-8609-53901d284599\"><span><span><span>“시계 방향” 의 정의는 “북반구에서 해시계의 바늘이 돌아가는 방향” 을 추상화한 것입니다.</span></span></span></li></ul><p id=\"c2e89cfd-881f-4115-b31f-a781915a9378\"><span><span><span>그래서 “왼쪽으로 10걸음 걸어라”는 사실 “북쪽을 바라보았을 때 한 번의 회전을 360등분한 각의 90배만큼 북반구에서 해시계의 바늘이 돌아가는 방향으로 돌아서, 동물이 육상에서 다리를 이용해 움직이는 가장 빠른 방법보다 느린, 신체를 한 지점에서 다른 지점으로 옮겨가는 행위를 10번 반복해라” 라는 말을 추상화한, 선언적인 말로 볼 수 있을 것입니다.</span></span></span></p><h2 id=\"07a75f49-871e-4572-b407-fc6c8bef53df\"><span><span><span>좋은 선언적인 코드 작성하기</span></span></span></h2><p id=\"dbc6c21e-0b7f-4068-b093-cfed07f3f18a\"><span><span><span>위에서 선언적인 코드를 추상화 레벨이 높아진 코드로 살펴보았습니다. 그런데 선언적인 코드는 항상 좋은 것일까요? 토스에서는 추상화가 항상 좋은 것은 아닌 것처럼 선언적인 코드도 잘 쓰는 것이 중요하다고 생각합니다.</span></span></span></p><p id=\"9d3e9b9a-1689-425f-ad2f-50d5916f9233\"><span><span><span>토스에서는 좋은 코드를 판단하는 제1원칙을 “수정하기 쉬운 코드”라고 생각합니다. 비즈니스 요구사항은 항상 빠르게 변하기 때문에, 개발자가 기민하게 대응하는 것이 중요하기 때문입니다. 그러면 선언적인 코드가 언제 수정하기 쉽고, 언제 그렇지 않은지 살펴봅시다.</span></span></span></p><p id=\"0a380549-fe7e-4769-984f-ddf17a1b9dbb\"><span><span><span>먼저 아래와 같은 회원가입 폼 컴포넌트를 살펴봅시다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>&lt;</span><span>SignUpForm</span>\n  <span>onSubmit</span>=<span>{</span><span>result</span> <span>=&gt;</span> <span>{</span>\n    <span>/* 회원가입 결과에 따라서 특정 동작 수행 ... */</span>\n  <span>}</span><span>}</span>\n<span>/&gt;</span></code></pre></div></div></div></div><p id=\"f383c7c5-da2f-4ace-a944-6cfe8d1c8b1f\"><span><span><span>위 컴포넌트는 회원가입 로직을 하나의 컴포넌트로 추상화했기 때문에 선언적인 컴포넌트로 볼 수 있습니다.</span></span></span></p><p id=\"18512c8b-6cff-4ea5-89ce-c6fc577396a6\"><span><span><span>이 코드는 수정하기 쉬울까요?</span></span></span></p><p id=\"48bf8c9d-f1a4-48cb-ba96-51ac1b5f3d67\"><span><span><span>먼저 회원가입 폼을 여러 곳에서 사용한다면 각각의 폼을 중복해서 개발할 필요 없이 한 번만 개발하면 되기 때문에 효율적일 것입니다. 또한 회원가입 폼에 변경이 생긴다고 하더라도, 한 곳에서만 바꾸면 다른 화면들에 모두 반영되기 때문에 빨리 수정할 수 있을 것입니다.</span></span></span></p><p id=\"22ae2379-3bac-41c3-8b06-1b52e555ef46\"><span><span><span>수정하기 어려운 지점은 없을까요?</span></span></span></p><p id=\"d728d629-c354-48b3-82b2-500b9cf8dc02\"><span><span><span>화면마다 </span><code>SignUpForm</code><span> 이 조금씩 다르다면, 공통화된 것이 오히려 코드의 복잡함을 가져올 수도 있습니다. 예를 들어서, 어떤 페이지에서는 SNS 회원가입을 일반 이메일 회원가입보다 먼저 보여줘야 할 수 있습니다. 또, 다른 페이지에서는 텍스트나 스타일을 조금씩 다르게 보여줘야 할 수 있습니다.</span></span></span></p><p id=\"c98ca1e9-cf7a-4a46-80c5-eb3463fc9400\"><span><span><span>아래와 같이 </span><code>SignUpForm</code><span> 에서 바뀔 수 있는 부분이 많다면, 내부 구현과 인터페이스도 복잡해지고, 쓰는 쪽에서도 불편할 것입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>&lt;</span><span>SignUpForm</span>\n  <span>signUpOrder</span>=<span>{</span><span>[</span><span>'sns'</span><span>,</span> <span>'normal'</span><span>]</span>\n  <span>title</span>=<span>\"사이트에 어서 오세요\"</span>\n  <span>subtitle</span>=<span>\"먼저 회원가입을 해주세요.\"</span>\n  <span>primaryButtonColor</span>=<span>{</span><span>colors</span>.<span>blue</span><span>}</span>\n  <span>secondaryButtonColor</span>=<span>{</span><span>colors</span>.<span>grey</span><span>}</span>\n  <span>/* 많은 Prop 들 ... */</span>\n  <span>onCancel</span>=<span>{</span><span>/* ... */</span><span>}</span>\n  <span>onSubmit</span>=<span>{</span><span>result</span> <span>=&gt;</span> <span>{</span>\n    <span>/* 회원가입 결과에 따라서 특정 동작 수행 ... */</span>\n  <span>}</span><span>}</span>\n\n</code></pre></div></div></div></div><p id=\"fa08a924-9b53-4610-9cee-e3496ebbd48a\"><span><span><span>이처럼 토스에서는 선언적인 코드가 항상 좋은 것이 아니라, 앞으로 제품이 어떻게 변화할지, 비즈니스 요구사항이 어떻게 되는지에 따라서 달라질 수 있다고 생각하고 있습니다. 앞으로 코드의 어떤 부분이 수정될지 예측하고, 이에 따라 적절한 선언 레벨을 따르는 코드를 작성할 필요가 있습니다.</span></span></span></p><h2 id=\"fd796882-61e9-4126-9223-d704cb2cacd4\"><span><span><span>토스의 선언적 라이브러리</span></span></span></h2><p id=\"5f9cfe6d-7be3-4399-bb83-a4ffba3b0390\"><span><span><span>그렇다면 다양한 상황에서 일반적으로 사용할 수 있는 좋은 선언적 코드는 없을까요? 이번 아티클은 토스 프론트엔드 챕터가 100개가 넘는 서비스들에서 자주 사용하고 있는 선언적 라이브러리에 대해서 소개하고 마무리하려고 합니다.</span></span></span></p><h3 id=\"02865b0b-c140-4c14-88e0-3dd16485b52c\"><span><span><span>useOverlay</span></span></span></h3><figure id=\"4b2fd254-57d2-4da0-aeec-dc8d0f966914\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/d4d3a88f-a1b2-4768-bc5a-93e1671776de\"/></figure><p id=\"a5185193-09f4-4c94-bf51-94a4161a7d8e\"><span><span><span>토스에서는 BottomSheet, Dialog, Toast와 같이 화면 위에 뜨는 오버레이를 띄워야 하는 상황이 많습니다. 토스는 이렇게 오버레이를 띄우는 동작을 추상화하여 </span><code>useOverlay</code><span> 라고 하는 Hook 을 사용합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>overlay</span> = <span>useOverlay</span><span>(</span><span>)</span><span>;</span>\n\n<span>&lt;</span><span>button</span>\n  <span>onClick</span>=<span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>\n    <span>overlay</span>.<span>open</span><span>(</span><span>(</span><span>{</span> <span>isOpen</span><span>,</span> <span>close</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>\n      <span>return</span> <span>(</span>\n        <span>&lt;</span><span>BottomSheet</span> <span>open</span>=<span>{</span><span>isOpen</span><span>}</span> <span>onClose</span>=<span>{</span><span>close</span><span>}</span><span>&gt;</span>\n          나는 바텀시트야\n        <span>&lt;/</span><span>BottomSheet</span><span>&gt;</span>\n      <span>)</span><span>;</span>\n    <span>}</span><span>)</span>\n  <span>}</span><span>}</span>\n<span>&gt;</span>\n  바텀시트 열기\n<span>&lt;/</span><span>button</span><span>&gt;</span></code></pre></div></div></div></div><p id=\"e1928d8b-023f-43fd-a0f9-40279063bf86\"><span><span><span>예를 들어서, 위 코드에서는 </span><code>바텀시트 열기</code><span> 버튼을 누르면 </span><code>나는 바텀시트야</code><span> 라고 하는 바텀시트를 띄웁니다.</span></span></span></p><p id=\"66775cd5-2166-4994-8a4a-d26f7bdf2222\"><span><span><code>useOverlay</code><span> 가 없었더라면 아래와 같이 제어 흐름이 드러나는 코드를 작성했어야 할 것입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>[</span><span>isSheetOpen</span><span>,</span> <span>setIsSheetOpen</span><span>]</span> = <span>useState</span><span>(</span><span>false</span><span>)</span><span>;</span>\n\n<span>&lt;</span><span>button</span> <span>onClick</span>=<span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>setIsSheetOpen</span><span>(</span><span>true</span><span>)</span><span>}</span><span>&gt;</span>\n  바텀시트 열기\n<span>&lt;/</span><span>button</span><span>&gt;</span>\n&lt;<span>BottomSheet </span><span>open</span>=<span>{</span><span>isSheetOpen</span><span>}</span> <span>onClose</span>=<span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>setIsSheetOpen</span><span>(</span><span>false</span><span>)</span><span>}</span>&gt;\n  <span>나는 </span><span>바텀시트야</span>\n&lt;<span>/BottomSheet&gt;</span>\n\n</code></pre></div></div></div></div><p id=\"8ceaf11a-4ccb-4b1a-98ab-6ba43c7cb4f8\"><span><span><code>useOverlay</code><span>에 대한 자세한 정보는 Slash libraries의 </span><a href=\"https://slash.page/ko/libraries/react/use-overlay/src/useoverlay.i18n/\" rel=\"noreferrer noopener\" target=\"_blank\">useOverlay Hook</a><span>을 참고해주세요.</span></span></span></p><h3 id=\"52daacf9-0597-4018-9964-217c2f98d1f9\"><span><span><span>ImpressionArea</span></span></span></h3><p id=\"287b7c36-62ce-4edb-bc5a-a582cb65dee0\"><span><span><span>토스 앱에서는 어떤 영역이 보여졌는지/숨겨졌는지에 따라서 동작하는 로직이 많습니다. 예를 들어서, 사용자가 특정한 요소를 보면 폭죽을 터뜨리거나 토스트를 보여주는 식이죠. 토스에서는 </span><code>ImpressionArea</code><span> 라고 하는 컴포넌트로 이를 추상화하고 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>&lt;</span><span>ImpressionArea</span> <span>onImpressionStart</span>=<span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>/* 보여졌을 때 실행 */</span> <span>}</span><span>}</span><span>&gt;</span>\n  <span>&lt;</span><span>div</span><span>&gt;</span>내가 보여졌으면 onImpressionStart가 실행돼<span>&lt;/</span><span>div</span><span>&gt;</span>\n<span>&lt;/</span><span>ImpressionArea</span><span>&gt;</span>\n\n</code></pre></div></div></div></div><p id=\"00cfc346-32b0-4d07-aa28-4ecf4c952a74\"><span><span><code>ImpressionArea</code><span> 가 없었더라면, 복잡한 </span><code>IntersectionObserver</code><span> API 를 사용하거나, 복잡한 Scroll 이벤트 핸들러 로직을 사용해야 했을 것입니다.</span></span></span></p><p id=\"c8cad8c8-8ceb-416b-b368-03d8c959e4bf\"><span><span><code>ImpressionArea</code><span> 에 대한 자세한 정보는 Slash libraries의 </span><a href=\"https://slash.page/libraries/react/impression-area/src/impressionarea.i18n/\" rel=\"noreferrer noopener\" target=\"_blank\">ImpressionArea 컴포넌트</a><span>를 참고해주세요.</span></span></span></p><h3 id=\"e01870d5-bb05-42e3-8d04-ca55a7106d3f\"><span><span><span>LoggingClick</span></span></span></h3><p id=\"61569556-9c4b-49f9-ba69-22eb4c0fdbf6\"><span><span><span>토스에서는 데이터 주도 의사결정을 위해서 화면에 진입하는 사용자가 몇 명인지, 그 중 몇 명이 버튼을 누르는지를 기록하는 경우가 있습니다. 이런 누르는 동작에 대한 기록을 추상화하여 </span><code>LoggingClick</code><span> 컴포넌트를 사용하고 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>&lt;</span><span>LoggingClick</span> <span>params</span>=<span>{</span><span>{</span> <span>price</span> <span>}</span><span>}</span><span>&gt;</span>\n  <span>&lt;</span><span>button</span> <span>onClick</span>=<span>{</span><span>buy</span><span>}</span><span>&gt;</span>사기<span>&lt;/</span><span>button</span><span>&gt;</span>\n<span>&lt;/</span><span>LoggingClick</span><span>&gt;</span>\n\n</code></pre></div></div></div></div><p id=\"00c148d3-0780-4795-a0a5-ebbc41af6fa4\"><span><span><span>예를 들어서, 위 코드에서 사용자가 버튼을 누르면 “사기” 버튼에 대한 동작이 분석 시스템에 기록됩니다.</span></span></span></p><p id=\"824f60b8-aa94-4893-bf30-c55fd92416a0\"><span><span><code>LoggingClick</code><span> 이 없었다면 아래와 같이 </span><code>log</code><span> 함수를 실행하는 것이 그대로 드러났어야 할 것입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>&lt;</span><span>button</span>\n  <span>onClick</span>=<span>{</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>\n    <span>log</span><span>(</span><span>{</span> <span>title</span><span>:</span> <span>'사기'</span><span>,</span> <span>price</span> <span>}</span><span>)</span><span>;</span>\n    <span>buy</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span><span>}</span>\n<span>&gt;</span>\n  사기\n<span>&lt;/</span><span>button</span><span>&gt;</span>\n\n</code></pre></div></div></div></div></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "18": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://wp.toss.tech/wp-content/uploads/2023/03/00017-3291509353.png\"/><h1>tosspayments-restdocs: 선언형 문서 작성 라이브러리</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/junlee-lee.png\"/><div><div><h3>이준희</h3><h3>ㆍ<!-- -->Server Developer</h3></div><div>2023. 3. 22</div></div></section></header><div><p id=\"2fe73712-53fe-4860-b727-e29bae9bd004\"><span><span><span>최소한의 코드로 문서 작성하기</span></span></span></p><h2 id=\"57e78843-8553-4270-baa3-818740e3e60a\"><span><span><span>들어가며</span></span></span></h2><p id=\"d09ca7d4-746b-4350-a7f2-d711fe1ff1f2\"><span><span><span>토스페이먼츠에서는 두 가지 장점 때문에 </span><a href=\"https://docs.spring.io/spring-restdocs/docs/current/reference/htmlsingle/\" rel=\"noreferrer noopener\" target=\"_blank\">Spring REST Docs</a><span>를 권장하고 있는데요. 첫 번째는 문서 작성 단계부터 API를 통합 테스트할 수 있다는 점, 두 번째는 인터페이스의 의도치 않은 변경을 감지할 수 있다는 점 때문입니다.</span></span></span></p><p id=\"80b2704c-d5e2-4153-92ee-01575979b0d4\"><span><span><span>하지만 Spring REST Docs에는 단점도 있습니다. 장황한 코드 때문에 가독성이 떨어지고, 코드 반복으로 인해 생산성이 떨어지는 아쉬움이 있었습니다. 이런 문제를 해소하기 위해 Kotlin DSL을 구현해서 반복적이고 지루한 Spring REST Docs 코드 작성에 필요한 노력을 줄이는 방법을 </span><a href=\"https://toss.tech/article/kotlin-dsl-restdocs\" rel=\"noreferrer noopener\" target=\"_blank\">한규주님의 이전 글 'Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기'</a><span>에서 소개했었습니다.</span></span></span></p><p id=\"061b3bb5-fc75-4665-8b83-c0dc2fbce188\"><span><span><span>이번에는 나아가 더 높은 가독성, 더 최소화된 코드 중복, 세부 구현 및 의존성 은닉, 마지막으로 확장에 열려있는 특성을 갖춘 문서화 라이브러리 </span><span>'tosspayments-restdocs'</span><span>를 소개하고 개발 후기를 공유합니다.</span></span></span></p><figure id=\"20a10c69-4dcd-45ed-aef7-747fe509bc83\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/ad47edd9-9c63-47c7-bf9e-40d671e15ede\"/></figure><p id=\"b8352829-2230-4470-b76c-c26741a3ec86\"><span><span><span>동일한 컨트롤러를 Spring REST Docs(좌측)와 tosspayments-restdocs(우측)로 문서화했을 때의 차이. 작성한 문서화 코드의 양이 크게 감소했다.</span></span></span></p><h2 id=\"23c074e6-1ad9-4420-abb8-c71930f6284d\"><span><span><span>다시 살펴보기: Spring REST Docs의 문제들</span></span></span></h2><p id=\"e5b15e07-70b6-4e32-b5cf-1b19c61814c4\"><span><span><span>Spring REST Docs 기반 문서화 코드의 아쉬운 점을 아래 코드를 통해 다시 한번 살펴볼게요.</span></span></span></p><figure id=\"9f86c962-09de-4c1f-80bb-7bc4d41bfed1\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/2ef864ac-15cb-4c31-a2ed-20fce4d672b5\"/></figure><p id=\"f974b590-a84e-49e6-8fda-82ba5a299950\"><span><span><span>요청 필드 2개, 응답 필드 3개</span><span>로 구성된 단순한 </span><code>PUT</code><span> 인터페이스지만, 장황하게 작성된 코드 때문에 전체 구조를 한눈에 파악하기 어렵습니다. 이런 구조의 코드는 처음 작성하는 비용이 많이 들 뿐만 아니라 유지보수 비용도 늘립니다. 위 코드의 문제점을 좀 더 구체적으로 살펴보겠습니다.</span></span></span></p><h3 id=\"e0427a32-ebc4-47f8-94fc-c382832684c9\"><span><span><span>1. </span><span>코드 중복</span></span></span></h3><p id=\"433ee386-e47f-46c0-9197-a9c4847f9c9a\"><span><span><span>먼저, 같은 내용이 반복적으로 명세에 포함되어 있습니다. 예를 들어 MockMvcResponse와 REST Docs Snippet을 만들기 위해 Path Variable, 그리고 Request Body Field 코드 중복이 발생했습니다.</span></span></span></p><p id=\"a752b473-9ddb-4480-8cca-b3fbdc84b991\"><span><span><span>또한 Request Body값을 MockMvc에 전달하는 과정에서 샘플 데이터를 통해 필드의 타입 및 샘플이 추론 가능함에도 REST Docs Snippet에 불필요하게 다시 명세하고 있습니다.</span></span></span></p><h3 id=\"90b74fa9-0738-41bd-97fa-cea465777e0a\"><span><span><span>2. </span><span>불필요한 명령</span></span></span></h3><p id=\"49b93064-3230-4572-894a-6200559088a2\"><span><span><code>given()</code><span>, </span><code>prettyPrint()</code><span>, </span><code>then()</code><span>, </span><code>preprocessRequest()</code><span>, </span><code>preprocessResponse()</code><span> 등의 메서드는 인터페이스 명세에 꼭 필요한 핵심이라 하기 어렵습니다. 문서 작성과 관계 없이 빌드에 필요하기 때문에 추가된 사항입니다.</span></span></span></p><h3 id=\"0643d087-dc96-4843-930f-cafe7ad1299c\"><span><span><span>3. 인터페이스 명세 순서</span></span></span></h3><p id=\"1e4995cd-9286-42fa-9721-dd125b746c8a\"><span><span><span>실제 HTTP 프로토콜에서는 Request Line → Request Header → Request Body → Response Line → Response Header → Response Body 순으로 페이로드가 만들어집니다.</span></span></span></p><p id=\"97cbd394-9fb8-40de-842f-cb9b06eedfd6\"><span><span><span>그러나 위의 예시 코드는 이러한 흐름에 맞춘 자연스러운 명세 작성 대신, MockMvc를 구성하는 기반 기술에 의존하는 명령을 나열하는데 집중하고 있습니다. 그래서 코드를 작성할 때나 읽을 때 모두 코드 블록을 왔다갔다 해야 하는 불편을 겪습니다.</span></span></span></p><h3 id=\"e890be61-e453-4d1f-9dd0-53af0d4a7c40\"><span><span><span>4. 기반 기술에 강한 의존</span></span></span></h3><p id=\"7babff3e-8189-4b96-aadb-ae8d9c39030a\"><span><span><span>기반 기술에 강하게 의존하고 있기 때문에 기반 기술에 브레이킹 체인지가 생기거나, 유지보수가 중단되면 대응이 어렵습니다.</span></span></span></p><p id=\"451e789e-ba69-41e7-8616-2a0b40652284\"><span><span><span>또, 이렇게 기반 기술에 많이 의존하게 되면 문서를 작성하는 모든 개발자가 기반 기술의 세부 항목을 학습해야 합니다. 가령 MultiPart API, Streaming API, Reactive API 등 다른 형태의 API를 문서화할 때마다 개발자는 사용할 MockMvc의 세부 기능을 각각 학습해야 합니다. 이런 방식은 문서화에 필요한 학습 비용을 높이고 지속적인 대응을 어렵게 만듭니다.</span></span></span></p><p id=\"48149d72-404f-44fc-af24-bc62e070c2bb\"><span><span><span>위 코드를 tosspayments-restdocs 라이브러리를 사용해서 다시 작성한 코드 예시입니다.</span></span></span></p><p id=\"1dfc7fc9-0148-4914-9718-dde40d315e47\"><span><span><span>생성될 문서를 직관적으로 예측할 수 있고, 기반 기술을 완전히 추상화해서 코드가 절반 이하로 감소했습니다.</span></span></span></p><figure id=\"7579d1f3-abd5-4ca8-b7ed-ffd373a83148\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/6def4227-a802-42dc-9be1-6f525d7445d5\"/></figure><p id=\"187add49-88b5-40c0-ba86-e959936a7f3e\"><span><span><span>tosspayments-restdocs를 적용한 결과</span></span></span></p><p id=\"ab314e79-f5dd-4230-bad7-af62f73c0b58\"><span><span><span>이런 개선점을 만든 tosspayments-restdocs 라이브러리에는 선언형 프로그래밍, 타입 추론 개념이 녹아있는데요. 어떻게 적용됐는지 하나씩 설명해보겠습니다.</span></span></span></p><h3 id=\"2e6489b5-06b5-438b-a050-6234f1015f33\"><span><span><span>선언형 프로그래밍</span></span></span></h3><figure id=\"2b45f011-dcc9-424f-ba9e-f0abb7a0411b\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/1ab8297c-3570-4c9f-8483-c1d65c06bd93\"/></figure><p id=\"3d40fd47-32fd-42ed-9881-c11bdfeed9f0\"><span><span><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Element\" rel=\"noreferrer noopener\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Glossary/Element</a></span></span></p><p id=\"e8271b91-8572-4d54-8106-0dc7de7aa98c\"><span><span><span>선언적으로 코드를 작성하는 대표적인 사례는 HTML입니다. HTML에서는 표현하고자 하는 항목을 요소(Element)로 추상화하고, 요소의 태그(Tag), 속성(Attribute), 내용(Content)을 명세해서 최종 결과물을 만듭니다.</span></span></span></p><p id=\"8592e7be-03bd-4347-aa15-b23ed11dde2a\"><span><span><span>같은 방식으로, tosspayments-restdocs에서는 API의 실제 형태(HTTP의 페이로드)를 있는 그대로 표현할 수 있도록 Documentation, Request Line, Request Header, Request Body, Response Body를 요소화했습니다. 이렇게 모든 문서화 항목을 요소로 만들었기 때문에 HTML을 작성하는 방식처럼 선언적으로 문서를 작성할 수 있습니다.</span></span></span></p><p id=\"20473b0c-8e0b-432f-82dc-880428e77cac\"><span><span><span>선언적인 작성에는 이런 장점이 있습니다.</span></span></span></p><ul><li id=\"3507ab81-62b9-4546-9f50-60013088676b\"><span><span><span>명세의 내용에 집중하게 됩니다.</span><span> 세부 기술 및 이를 위한 불필요한 명령 없이, 문서화 코드의 본질인 인터페이스 명세에 집중할 수 있습니다.</span></span></span></li><li id=\"568a11a0-7540-426a-96fb-a832f735a549\"><span><span><span>꼭 필요한 정보만 명세할 수 있습니다.</span><span> 꼭 필요한 항목만 요소의 속성으로 선언하고, 추가적인 속성들은 중괄호를 열어 표현하게 됩니다.</span></span></span></li><li id=\"bd8d2312-cd65-47f7-824d-d350518c59b2\"><span><span><span>읽기 쉬운 코드가 됩니다.</span><span> 최종 결과물의 실제 형태가 그대로 녹아져 있으므로, 위에서 아래로 한번만 읽으면 결과를 파악할 수 있습니다.</span></span></span></li><li id=\"695c15f4-4e8b-4459-9b07-947d6a96615e\"><span><span><span>확장이 쉽습니다.</span><span> 새로운 문서화 항목이 생기는 경우 요소를 새로 정의하면 됩니다. 기존 항목에 자식 항목이 새롭게 생기는 경우에도 마찬가지로 대응이 가능합니다.</span></span></span></li><li id=\"f92a2773-d6f2-42c4-8d77-87798ce8e1ef\"><span><span><span>구현 방법에서 자유로워집니다.</span><span> 각 요소를 어떻게, 무엇으로 렌더링 할 지를 모두 라이브러리에 위임해서 기반 기술의 변화나 결과물의 포맷 변화가 코드에 미치는 영향을 줄일 수 있습니다.</span></span></span></li></ul><h3 id=\"fda88915-cec8-4a40-87f0-7c532a0a628b\"><span><span><span>선언형 프로그래밍 구현 - 함수와 확장 함수</span></span></span></h3><p id=\"ef351f04-0caf-4eaf-b265-6b157a20d8fe\"><span><span><span>tosspayments-restdocs의 문서화 코드 진입점인 </span><code>documentation</code><span> 요소 함수를 살펴보겠습니다.</span></span></span></p><figure id=\"22535891-28d4-43c4-9723-5b1c3d0314a4\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/f2d6be02-3b9c-45a3-99fe-32a394912d8e\"/></figure><p id=\"34660ffb-786e-41a6-8e6f-c441f8a4d83f\"><span><span><span>documentation 함수 호출 예</span></span></span></p><figure id=\"23e45a00-b350-4cfe-ad94-d60ae6162a0c\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/685c3e8d-b60f-471d-9098-6d8f5082c927\"/></figure><p id=\"91b26e39-75e7-495e-a0e2-6bf1c89797e2\"><span><span><span>documentation 내부 구현(이해를 돕기 위해 단순화하였습니다)</span></span></span></p><p id=\"d6e6bdbb-f1b0-4101-85a8-9e9daa43a300\"><span><span><code>documentation</code><span>은 문서의 이름(</span><code>documentName</code><span>)을 필수 속성으로, </span><code>requestLine</code><span> 등 세부 스펙 요소 추가적인 속성으로 취급하는 요소 함수로, 문서화의 시작(문서 스펙 정의)과 끝(문서 출력)을 담당합니다.</span></span></span></p><p id=\"8e3ebe7a-6632-4f43-9fb6-2f06533c7a54\"><span><span><span>앞서 </span><span>꼭 필요한 항목만 요소의 속성으로 선언하고, 추가적인 속성들은 중괄호를 열어 표현한다</span><span>고 했는데요. 이 개념을 코틀린으로 구현하면서 필수 속성은 함수의 파라미터로, 추가 속성은 람다 함수 파라미터로 표현했습니다. 요소의 모든 속성을 파라미터로 펼쳐두면 함수가 장황해지고 확장성이 떨어지기 때문입니다.</span></span></span></p><p id=\"a0244c69-4a1a-4525-9a01-b293752ce3bc\"><span><span><span>추가 속성을 람다 확장 함수(</span><a href=\"https://kotlinlang.org/docs/extensions.html#extension-functions\" rel=\"noreferrer noopener\" target=\"_blank\">Extension Function</a><span>) 스코프 내에서 정의하도록 하면 스코프 내에서 일어나는 일들에는 함수가 관여하지 않습니다. 그래서 편의성을 확보하면서 확장성을 유지할 수 있고, 스코프를 계층화하여 도메인을 더욱 잘 표현할 수 있습니다.</span></span></span></p><p id=\"a4da0fa0-08e4-4199-b275-06c69949e4e2\"><span><span><span>예를 들어 </span><code>documentation</code><span> 요소 함수의 람다 확장 함수(</span><code>specCustomizer: DocumentSpec.() -&gt; Unit</code><span>) 스코프에서는 </span><code>RequestLineSpec</code><span>, </span><code>RequestBodySpec</code><span>, </span><code>ResponseBodySpec</code><span> 등을 세부 요소 스펙으로 품고 있는 </span><code>DocumentSpec</code><span>의 </span><code>this</code><span>가 주어집니다. 스코프 및 스코프에 </span><code>this</code><span>를 주입하는 이런 방식에는 다음과 같은 장점이 있습니다.</span></span></span></p><ul><li id=\"bd64f3fd-2402-4f3b-954d-2f93a097a8e8\"><span><span><span>스코프 단위로 특화된 기능을 제공할 수 있습니다.</span><span> 예를 들어 </span><code>requestLine</code><span> 함수는 </span><code>DocumentSpec</code><span>의 세부 요소 스펙인 </span><code>RequestLineSpec</code><span>을 정의하기 위한 요소 함수입니다.</span></span></span></li><li id=\"38c28e65-b4b8-457a-bc5b-916cbe74d43d\"><span><span><span>구조화된 확장성을 갖습니다.</span><span> 새로운 속성이 추가되었을 때 스코프 내에 함수나 프로퍼티를 추가하여 쉽게 대응할 수 있습니다. 또한 새로운 자식 요소를 갖게 되는 경우에도 동일한 방식으로 람다 확장 함수 스코프를 정의해 대응할 수 있습니다. documentation → requestBody → field 로 이어지는 nested scope 가 그 예입니다.</span></span></span></li></ul><h3 id=\"3bca09d3-4a20-4c31-b600-852012e21c5c\"><span><span><span>타입 추론</span></span></span></h3><p id=\"93df4058-2e34-4a4c-aae2-b1ae9156b306\"><span><span><span>Spring REST Docs의 문제 중 하나는 필드의 타입을 REST Docs Snippet에 다시 명세하는 비효율적인 작성 방식입니다.</span></span></span></p><p id=\"cfd1c0ae-ef81-4d4e-84e8-a18c3766db11\"><span><span><span>Kotlin에서는 Inline Function 한정으로 </span><a href=\"https://kotlinlang.org/docs/inline-functions.html#reified-type-parameters\" rel=\"noreferrer noopener\" target=\"_blank\">Reified Type Parameter</a><span>를 제공합니다. 타입 정보가 소거되는 일반적인 Generic Function의 Type Parameter와 달리, Reified Type Parameter의 경우에는 타입 정보가 소거되지 않아 라이브러리에서 접근할 수 있습니다.</span></span></span></p><p id=\"af8da1e8-2aa3-42e5-9151-9bc14c372164\"><span><span><span>tosspayments-restdocs에서는 항상 문서화 요소가 샘플을 받게 강제하고, 샘플의 타입과 값을 내부 자료구조에 저장하도록 했습니다.</span></span></span></p><figure id=\"3849c2d5-b306-439e-853f-a19ce912bc6a\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/72ab4cfe-a089-42b0-9192-66a17fc63ccc\"/></figure><p id=\"900b13d9-765e-40aa-95b3-f666b90ac48b\"><span><span><span>sample이 reified T로 선언되어 타입 정보(T::class.java)에 접근이 가능합니다.</span></span></span></p><p id=\"3b58e1c6-059c-4b31-8757-a6979ff20124\"><span><span><span>타입 정보가 남아있다면 문서를 작성하는 개발자를 대신해 다양한 작업을 자동화 할 수 있습니다. tosspayments-restdocs에서는 타입 명세, 열거형 예시 작성, 포멧 명세 등에 타입 정보를 활용하고 잇습니다.</span></span></span></p><figure id=\"16bb1045-95a5-4f67-b4a5-9127ff0252d3\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/31dbb200-5259-44f7-9274-96a555b8c772\"/></figure><p id=\"03bb67f4-34b6-412f-9f84-075e62563ec9\"><span><span><span>타입 정보 활용 예(타입별 양식 자동생성) – 열거형은 엔트리 나열, 시간 타입은 타임 포멧을 반환</span></span></span></p><figure id=\"92f4c19a-dfc2-4b27-b9ef-d8a3fdbaedfc\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/63bb7eef-8268-4577-a247-e2fada07ab7d\"/></figure><p id=\"98815754-de78-4bf8-8cae-bc120b8261dc\"><span><span><span>타입 정보 활용 예(생성된 문서) – 열거형 타입으로부터 얻은 정보로 ResultType의 엔트리(SUCCESS, ERROR)가 자동생성 되었습니다.</span></span></span></p><p id=\"1d5f2b08-2a0f-4c58-852f-995e12f90d80\"><span><span><span>지금까지 문서를 최소한의 코드로 작성하면서 변화에도 더 유연하게 대처할 수 있는 tosspayments-restdocs 라이브러리와, 라이브러리에 녹인 생각들을 소개했습니다.</span></span></span></p><p id=\"7db962ac-8d21-42ca-993a-46b5dcef855c\"><span><span><span>tosspayments-restdocs는 토스페이먼츠의 다양한 팀에서 Spring REST Docs, kotlin-dsl-restdocs를 대신해 활용하며 생산성을 높이고 있습니다.</span></span></span></p><p id=\"8feef5b6-ea9b-4031-b33d-2397766ee206\"><span><span><span>개발자가 더욱 변하지 않고 가치있는 일에 집중할 수 있도록, 토스페이먼츠에서는 생산성을 높이기 위한 다양한 활동을 이어나가고 있습니다. 함께 고민하며 더욱 좋은 문화와 기술을 만들어나가면 좋겠습니다.</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "19": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://wp.toss.tech/wp-content/uploads/2023/03/center.png\"/><h1>ESLint와 AST로 코드 퀄리티 높이기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/sung-jeon.jpeg\"/><div><div><h3>전성</h3><h3>ㆍ<!-- -->Frontend Platform Engineer</h3></div><div>2023. 3. 31</div></div></section></header><div><h2 id=\"0f5453dd-3b7f-45e7-9e43-7cf085d22408\"><span><span><span>코딩 컨벤션을 일관적으로 유지하기</span></span></span></h2><p id=\"10df46c5-9b04-4f11-8dd3-e2f92cda885d\"><span><span><span>일관적인 코딩 컨벤션을 가지면 코드를 읽기 쉬워지고, 안티패턴을 방지할 수 있습니다. 결과로 버그도 줄고, 코드를 쉽게 유지보수할 수 있죠.</span></span></span></p><p id=\"822a9494-126d-4066-af65-90804885c4ae\"><span><span><span>하지만 이것을 사람이 직접 적용하는 것은 한계가 있기 때문에, 여러 가지 정적 분석 도구를 활용하게 됩니다. JavaScript/TypeScript 코드베이스에서는 주로 ESLint를 통해 컨벤션과 맞지 않는 코드를 사전에 감지하게 되는데요. 이러한 정적 분석 도구를 이용하게 되면 코드 리뷰 등 사람이 직접 읽지 않아도 컨벤션과 다른 부분을 기계적으로 잡아낼 수 있습니다.</span></span></span></p><h2 id=\"122d5963-fc14-49e7-b82b-3ebaba1150d4\"><span><span><span>이미 만들어진 규칙에서 오는 한계</span></span></span></h2><p id=\"cdc899f4-f739-44bb-a531-fc9539ec9be9\"><span><span><span>ESLint에서는 생태계 내 다양한 플러그인 등을 통해 많은 수의 자주 사용되는 코딩 컨벤션을 커버할 수 있습니다. 하지만 우리 회사의 컨벤션에 맞는 규칙이 없다면 어떨까요? 조직이 커지고 요구 사항이 변화하게 되면서 커뮤니티에서 만들어진 규칙만으로는 조직 내 사용례에 정확히 부합하지 않는 경우가 생깁니다. 사내 라이브러리 내 사용 방식에 대한 컨벤션을 정의하거나, 조직 내 컨벤션과 커뮤니티에서 통용되는 컨벤션이 다소 다를 수도 있죠.</span></span></span></p><p id=\"f3687c76-bbf2-469c-9e03-2d3ab17f13f0\"><span><span><span>예를 들어 토스에서는 SSR을 통해 서버 사이드에서 React 렌더링을 한 뒤 애플리케이션에 제공해서 로딩 속도를 높이고 있는데요, 이로 인해 브라우저 환경에서 작동하는 코드가 서버 사이드에서 실행되면서 의도치 않은 버그를 유발하는 케이스가 있습니다. 이러한 경우 미리 브라우저에서 호환되지 않는 코드를 감지하여 사전에 오류를 예방할 수 있다면 큰 도움이 되겠죠.</span></span></span></p><h3 id=\"ae0ba426-358b-467d-b935-b3ffc44602c5\"><span><span><span>린터는 어떻게 규칙을 적용할까?</span></span></span></h3><p id=\"cb6461fb-9b24-46c5-a280-653bceb65966\"><span><span><span>이러한 제약 사항을 해결하기 위해서는 우리만의 ESLint 규칙을 정의할 수 있어야 합니다. 그런데 ESLint는 어떻게 코드에 대한 규칙을 만들고 적용하고 있을까요?</span></span></span></p><p id=\"d721fc2c-372f-439a-ad7b-548a4ef3097c\"><span><span><span>예를 들어서, Production 환경에서 로그가 함부로 찍히지 않도록 console.log 사용을 제한하는 규칙을 만드는 상황을 생각합시다.</span></span></span></p><p id=\"10dc32d4-5ba4-4a0a-ab3b-9fe9c5316748\"><span><span><span>간단하게 정규식으로 구현해보면 이런 형식이 될 것입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>if</span> <span>(</span><span>sourceCode</span>.<span>match</span><span>(</span><span>/console\\\\.log/</span><span>)</span> != <span>null</span><span>)</span> <span>{</span>\n  <span>console</span>.<span>log</span><span>(</span><span>\"console.log를 사용하면 안 돼요!\"</span><span>)</span> \n<span>}</span></code></pre></div></div></div></div><p id=\"bd277275-cfa1-4299-925c-002afd6846c5\"><span><span><span>하지만 이 방법은 생각했던 만큼 잘 작동하지 않습니다.</span></span></span></p><p id=\"88bb2551-6d6b-4678-86b8-da989dbff2a4\"><span><span></span></span></p><p id=\"35ae0739-2827-4987-b47b-6aac58415e8d\"><span><span><span>예를 들어서, 이 코드에서 console.log가 문자열 안에 있는지도 알 수 없습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>message</span> = <span>\"console.log()를 쓰지 마세요.\"</span><span>;</span>\n\n<span>&lt;</span><span>Button</span><span>&gt;</span>console.log 로그 활성화<span>&lt;/</span><span>Button</span><span>&gt;</span></code></pre></div></div></div></div><p id=\"0831ed82-1246-4fde-a961-c25b6490f7f3\"><span><span></span></span></p><p id=\"19a09b6b-cad7-4978-ad36-23702e95fded\"><span><span><span>주석 안에 있는지도 알 수 없죠.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// console.log(…) 를 쓰지 마세요.</span></code></pre></div></div></div></div><p id=\"242ae007-7012-493a-a262-5a54ff85d309\"><span><span><span>이러한 작은 케이스들을 하나하나 대응할 수도 있지만, ESLint는 좀 더 강력한 방법을 사용합니다.</span></span></span></p><p id=\"46f3ddd5-a0be-4e2e-a972-fc23a222a9f5\"><span><span></span></span></p><h3 id=\"bd6950dd-07c6-4c61-ba9c-5977e3d726d0\"><span><span><span>AST에서 원하는 정보 찾아내기</span></span></span></h3><p id=\"4ff81279-fa9b-455b-8da2-4d18663e236d\"><span><span><span>ESLint는 Abstract Syntax Tree(AST)를 이용해서 규칙을 정의하고 적용합니다.</span></span></span></p><p id=\"78baa208-7b1d-4873-8ecd-21fdb44961a6\"><span><span><span>AST는 소스 코드를 읽어낸 뒤 각 코드에서 구문 정보를 정리하여 나타낸 트리 형태의 자료 구조입니다. 예를 들어서, </span><code>console.log</code><span> 함수 호출과, 문자열이나 주석 속의 </span><code>console.log</code><span> 를 구별할 수 있게 해 줍니다.</span></span></span></p><p id=\"783ab44d-1362-4e7f-bf7c-c86739f083ae\"><span><span><span>AST의 상세한 구조는 파서마다 약간의 차이가 있지만, </span><a href=\"https://astexplorer.net/\" rel=\"noreferrer noopener\" target=\"_blank\">AST Explorer</a><span>라는 도구를 사용하면 소스 코드를 넣었을 때 어떤 AST가 나오는 지를 쉽게 확인할 수 있습니다. 일례로 </span><code>console.log()</code><span> 을 acorn이라고 하는 파서에서 파싱을 시도하면 이런 AST를 얻을 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>{</span>\n  <span>\"type\"</span><span>:</span> <span>\"ExpressionStatement\"</span><span>,</span>\n  <span>\"expression\"</span><span>:</span> <span>{</span>\n    <span>\"type\"</span><span>:</span> <span>\"CallExpression\"</span><span>,</span>\n    <span>\"callee\"</span><span>:</span> <span>{</span>\n      <span>\"type\"</span><span>:</span> <span>\"MemberExpression\"</span><span>,</span>\n      <span>\"object\"</span><span>:</span> <span>{</span> <span>\"type\"</span><span>:</span> <span>\"Identifier\"</span><span>,</span> <span>\"name\"</span><span>:</span> <span>\"console\"</span> <span>}</span><span>,</span>\n      <span>\"property\"</span><span>:</span> <span>{</span> <span>\"type\"</span><span>:</span> <span>\"Identifier\"</span><span>,</span> <span>\"name\"</span><span>:</span> <span>\"log\"</span> <span>}</span>\n    <span>}</span><span>,</span>\n    <span>\"arguments\"</span><span>:</span> <span>[</span><span>]</span>\n  <span>}</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"4a4cdb17-3d37-4429-a939-595abef1960f\"><span><span></span></span></p><p id=\"ce6894d9-86aa-4877-8752-ee517136bf08\"><span><span><span>이와 다르게, 문자열에 포함되어 있는 console.log() 의 파싱을 시도하면 이런 AST를 얻을 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>{</span> \n  <span>\"type\"</span><span>:</span> <span>\"Literal\"</span><span>,</span> \n  <span>\"value\"</span><span>:</span> <span>\"console.log()\"</span><span>,</span> \n  <span>\"raw\"</span><span>:</span> <span>\"\\\"console.log()\\\"\"</span> \n<span>}</span></code></pre></div></div></div></div><p id=\"7a022455-85bb-4a0d-b28c-a0d8520cb876\"><span><span><span>함수를 호출하는 경우, CallExpression과 MemberExpression이 사용되고, 문자열 안에 있는 경우 Literal이 사용되는 것을 볼 수 있네요.</span></span></span></p><p id=\"7323467b-ca6c-4a38-9673-cabf60be1283\"><span><span></span></span></p><p id=\"b8e626b8-574a-4715-be91-8c73e3fdd010\"><span><span><span>여기서 얻은 정보를 바탕으로 acorn을 이용해 console.log를 감지하는 스크립트를 작성해볼 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>import</span> <span>{</span> <span>Parser</span> <span>}</span> <span>from</span> <span>\"acorn\"</span><span>;</span>\n<span>import</span> <span>{</span> <span>simple</span> <span>}</span> <span>from</span> <span>\"acorn-walk\"</span><span>;</span>\n\n<span>simple</span><span>(</span><span>Parser</span>.<span>parse</span><span>(</span><span>sourceCode</span><span>)</span><span>,</span> <span>{</span>\n  <span>CallExpression</span><span>(</span><span>{</span> <span>callee</span> <span>}</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>callee</span>.<span>object</span>.<span>name</span> === <span>\"console\"</span> &amp;&amp; <span>callee</span>.<span>property</span>.<span>name</span> === <span>\"log\"</span><span>)</span> <span>{</span>\n      <span>console</span>.<span>log</span><span>(</span><span>\"console.log를 사용하면 안 돼요!\"</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"36c1a478-c055-4bc8-8b50-071741446b21\"><span><span><span>이렇게 </span><code>acorn-walk</code><span> 를 사용하면 CallExpression에 해당하는 console.log만 감지할 수 있습니다. 주석이나 문자열, 화이트스페이스에 관계없이 안전하게 소스코드를 분석할 수 있는 것이죠.</span></span></span></p><h2 id=\"4bf7dcf2-511f-4bf3-84a9-ff327df1a704\"><span><span><span>ESLint에서 사용할 규칙 직접 정의하기</span></span></span></h2><p id=\"1f2bd612-1545-4650-a261-e990f783d31b\"><span><span><span>ESLint는 espree라고 하는 파서를 통해 소스 코드를 파싱하고, 이 결과를 각 플러그인에서 순회하며 규칙을 실행합니다. 우리가 원하는 규칙을 직접 플러그인을 통해 정의하고, 실행할 수 있어요.</span></span></span></p><p id=\"beeed20c-917b-478b-bde9-cdc781c91aa5\"><span><span><span>Espree AST만 읽을 수 있다면 ESLint 규칙도 쉽게 만들 수 있습니다.</span></span></span></p><p id=\"b698ec78-617d-469f-8b19-8cb90cf545ff\"><span><span></span></span></p><p id=\"f51862f9-f81d-4cac-a1dd-c33311cd5d70\"><span><span><span>토스에서는 소스 코드 내에서 HTTP 링크를 찾아 HTTPS 링크로 바꿔야 한다고 알려주는 ban-http 와 같은 규칙을 정의하고 있습니다. 이런 규칙을 어떻게 직접 정의할 수 있는지 알아볼까요?</span></span></span></p><p id=\"de47c2d6-bd2a-4da8-862e-9360ff2bf627\"><span><span><span>먼저 소스 코드 내 문자열이 Espree AST에서 어떻게 표현되는 지를 알아봐야 합니다. AST Explorer에서 상단의 파서 설정을 Espree로 변경해주면 이를 쉽게 알 수 있습니다.</span></span></span></p><p id=\"85e984f7-f783-4e85-b15f-441ac0b433cf\"><span><span><span>Literal 타입의 노드에서 value를 읽으면 문자열 내용을 알 수 있네요.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>{</span>\n  <span>\"type\"</span><span>:</span> <span>\"Literal\"</span><span>,</span>\n  <span>\"value\"</span><span>:</span> <span>\"http://toss.im\"</span><span>,</span>\n  <span>\"raw\"</span><span>:</span> <span>\"\\\"http://toss.im\\\"\"</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"c0d549d4-173d-4afd-803f-bd27c3abf193\"><span><span></span></span></p><p id=\"de7b3c68-0f5c-4bc3-8c7c-64d5da649f15\"><span><span><span>이를 기반으로 아래와 같이 ESLint 규칙을 새로 정의할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>module</span>.<span>exports</span> = <span>{</span>\n  <span>meta</span><span>:</span> <span>{</span>\n    <span>/* ... */</span>\n  <span>}</span><span>,</span>\n  <span>create</span><span>:</span> <span>function</span> <span>(</span><span>context</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span>\n      <span>Literal</span><span>:</span> <span>function</span> <span>(</span><span>node</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>typeof</span> <span>node</span>.<span>value</span> !== <span>\"string\"</span><span>)</span> <span>{</span>\n          <span>return</span><span>;</span>\n        <span>}</span>\n        <span>if</span> <span>(</span><span>node</span>.<span>value</span>.<span>indexOf</span><span>(</span><span>\"http://\"</span><span>)</span> &gt;= <span>0</span><span>)</span> <span>{</span>\n          <span>context</span>.<span>report</span><span>(</span><span>{</span> <span>node</span><span>,</span> <span>messageId</span><span>:</span> <span>\"isHttpBanned\"</span> <span>}</span><span>)</span><span>;</span>\n        <span>}</span>\n      <span>}</span><span>,</span>\n    <span>}</span><span>;</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span></code></pre></div></div></div></div><p id=\"afd42aa1-8439-4672-b8a5-9edb81859b77\"><span><span><span>위 코드는 Literal을 만났을 때, 그 Literal의 값이 “http://” 로 시작하는 문자열이면 에러를 리포트하는 코드입니다. 생각보다 복잡하지는 않죠?</span></span></span></p><p id=\"fc946e41-fa84-448f-9041-2d3e9e1bda01\"><span><span></span></span></p><p id=\"4eec763c-03e6-4309-85c1-0bd3f3fdb619\"><span><span><span>이렇게 작성된 규칙을 ESLint에 추가하면 개발자들이 개발 중 규칙에 맞지 않는 코드를 작성했을 때 이렇게 알려줄 수 있어요.</span></span></span></p><figure id=\"b6754f73-d6c5-401f-b27a-39316ba0f272\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/ea40fcb2-2a0f-4e8e-b8bc-a3e4d7ac84ba\"/></figure><p id=\"f78e986a-e8dd-44ce-b2c0-2944153a8c3c\"><span><span></span></span></p><h2 id=\"47b25641-d7ad-4639-87e4-2cb6c6030577\"><span><span><span>토스에서 사용하는 여러가지 규칙들</span></span></span></h2><p id=\"1e134602-143f-4d3b-b251-176370c999e2\"><span><span><span>이를 바탕으로 토스에서는 여러 가지 ESLint 규칙을 만들어서 플러그인으로 배포하고, 이를 서비스에서 사용하여 코딩 컨벤션을 유지하고 있습니다. 몇 가지 사용하는 규칙들은 아래와 같은 규칙들이 있어요.</span></span></span></p><ul><li id=\"6062071a-32da-4f92-b517-0bb3dc62b204\"><span><span><span>토스 프론트엔드 챕터 내 맥락이 강한 규칙들</span></span></span><div><ul><li id=\"fa4f35ff-bbf0-4370-922e-234167098514\"><span><span><span>사내 라이브러리 사용 시 deprecated된 API 사용 금지</span></span></span></li><li id=\"17d3b165-bdd2-46b4-a715-d6bdafe0719e\"><span><span><span>이전 토스 도메인 사용 금지</span></span></span></li></ul></div></li><li id=\"06aa9b82-7bda-4364-8d3a-ae97afc200a3\"><span><span><span>외부 라이브러리 사용에 관련한 규칙들</span></span></span><div><ul><li id=\"65a0cf19-34fa-4913-8ea5-b6f3cfb1ef1b\"><span><span><span>사용하지 않기로 한 패키지 사용 제한 (ban-axios, ban-lodash)</span></span></span></li><li id=\"32292ea6-fd23-45d4-b8eb-1f8c2da93dac\"><span><span><span>훅 이름에서 한글 허용 (rules-of-hooks)</span></span></span></li><li id=\"5b6d3ad1-15b1-4337-a55e-157c4a1d2ec0\"><span><span><span>SSR에서 사용 시 오류를 내는 라이브러리 사용 제한 (ban-ssr-unsafe-method)</span></span></span></li></ul></div></li></ul><p id=\"9cd4004d-cf8a-4340-be3e-faca956613cc\"><span><span><span>또한 ESLint 외에도 자체 제작한 도구를 통해 사용해 deperecated 된 API의 사용이나 중복된 코드를 감지하기도 해요.</span></span></span></p><h2 id=\"1aaddf61-fa5a-4ed7-9fd1-d709da96e075\"><span><span><span>더 알아보기</span></span></span></h2><p id=\"90b4f2ef-00e1-4bda-abf5-62d687a77ab7\"><span><span><span>ESLint 플러그인을 만드는 방법과 ESLint API 자체에 대한 글은 ESLint 공식 문서에서 더 자세히 알 수 있어요.</span></span></span></p><p id=\"e1175b56-c2d4-4725-8d52-ee905ea79ae7\"><span><span><a href=\"https://eslint.org/docs/latest/extend/plugins\" rel=\"noreferrer noopener\" target=\"_blank\">Create Plugins – ESLint – Pluggable JavaScript Linter</a></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div><span>다른 글 둘러보기</span><div><img srcset=\"https://wp.toss.tech/wp-content/uploads/2021/05/techblog-03-jscodeshift.png\"/><div><span>JSCodeShift로 기술 부채 청산하기</span><span>2021. 05. 04</span></div></div></div><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "20": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://static.toss.im/illusts-content/img-tech-cover.png\"/><h1>Spring Boot Actuator의 헬스체크 살펴보기</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/gwonsung-yang.jpeg\"/><div><div><h3>양권성</h3><h3>ㆍ<!-- -->Server Developer</h3></div><div>2023. 4. 1</div></div></section></header><div><figure id=\"3fb196dd-f059-4b9e-b015-71b45d879f82\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/b723d071-c4e9-4235-a2c2-0578324d4b2e\"/></figure><p id=\"9b07008c-4808-4177-83d3-cd8cbf2a8f84\"><span><span><span>뭐든 알고 쓰는 게 참 중요한 것 같습니다. 단순히 “</span><span>지금은 잘 돌아가니까 문제 없다</span><span>”는 접근은 문제가 발생하기 전까지는 문제를 방치하기 마련입니다.</span></span></span></p><p id=\"c8ba371e-c268-41cf-8722-3dca39e7849b\"><span><span><span>사용하는 기술이나 구조에 대해 끊임없이 질문을 던지고 탐구하는 과정은 </span><a href=\"https://blog.toss.im/article/core-values-are-evolving\" rel=\"noreferrer noopener\" target=\"_blank\">토스팀 코어밸류 3.0</a><span> 중 하나인 </span><span>Question Every Assumption, 모든 기본 가정에 근원적 물음을 제기한다</span><span>에도 부합하는 사례인것 같습니다. 이번 포스트에서는 제가 개발 과정에서 헬스 체크를 별다른 생각 없이 </span><a href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html\" rel=\"noreferrer noopener\" target=\"_blank\">Spring Boot Actuator</a><span>가 제공하는 기능을 사용하면서 겪은 이슈를 간략하게 설명해보겠습니다.</span></span></span></p><h2 id=\"3b77ef4f-7f94-430f-8e53-a67db96b93c1\"><span><span><span>들어가기에 앞서</span></span></span></h2><p id=\"34c1ea45-6821-4e9e-b29c-20dfb1ee97f5\"><span><span><span>이 포스트는 작성 시점 기준에서 최신 Spring Boot GA(General Availability) 버전인 3.0.5 버전을 기준으로 설명합니다. 해당 버전의 하위/상위 버전에서는 기능이 미묘하게 다르게 동작할 수 있습니다. 2.x 버전에서도 큰 맥락에서는 동일한 동작을 보장하리라 추측되지만 본인이 사용하는 버전에 해당하는 자세한 내용을 찾아보시길 권장합니다.</span></span></span></p><h2 id=\"7ed352c8-ffa6-4679-82d5-f4420b75a925\"><span><span><span>헬스 체크란?</span></span></span></h2><p id=\"e5b46d92-5e8c-43f6-a054-17955f6dd83b\"><span><span><span>서비스의 고가용성(HA, High Availability), 고성능을 위한 부하 분산 등의 이유로 우리는 서버의 이중화(혹은 그 이상)를 하고, 앞에서 어떤 서버로 요청을 보낼지 라우팅 역할을 하는 로드 밸런서를 둡니다.</span></span></span></p><p id=\"0d016baa-77c3-44fa-bba2-e47c6cc51fa7\"><span><span><span>로드 밸런서가 적절히 부하를 분산하여 A/B 서버 중 한 대에게 클라이언트의 요청을 보냅니다.</span></span></span></p><figure id=\"add2a753-2810-46e0-805e-a3fc7c0d68f7\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/54d46c5c-e55f-45e9-91d4-4ae09261823b\"/></figure><p id=\"b079255d-7c77-469f-b2d7-c220040dba49\"><span><span><span>하지만 아래와 같이 서버 한 대가 서비스 불가 상태라면 어떻게 해야할까요? 해당 서버에 요청이 들어가야할까요?</span></span></span></p><figure id=\"ca415714-cdc6-4a12-88fa-b74945439443\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/b407e183-633c-475e-890d-a0a9a3bf12f6\"/></figure><p id=\"531f7554-397b-4015-bf42-33b717ceb286\"><span><span><span>혹은 대량의 트래픽이 들어올 것을 대비하는 등등의 이유로 서버를 증설해야 하는데 해당 서버가 관련된 소스코드를 로딩하고 있다면 어떻게 해야할까요? 이 때도 마찬가지로 해당 서버에 요청이 들어가야할까요?</span></span></span></p><figure id=\"8399b081-75d0-4ed1-ab81-0c1a60e2c527\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/962592e0-a1b7-4ae6-8c06-965feb2b624a\"/></figure><p id=\"950e02c2-46e3-497c-8005-bfaa360f4733\"><span><span><span>두 케이스 모두 해당 서버로 요청을 보내면 안 됩니다.</span><span> 정상적인 서비스가 불가능해서 클라이언트의 요청을 수행할 수 없습니다. 장애를 유발하거나 해당 서버의 부하를 크게 증가시켜 오히려 장애를 더 심각하게 만들 수도 있습니다.</span></span></span></p><p id=\"12745b2f-6136-4de3-bbbe-55ff1b6bb5ae\"><span><span><span>따라서 로드 밸런서에서는 각 서버의 헬스 체크 API를 호출해서 해당 서버가 현재 서비스 가능한 상태인지 아닌지 주기적으로 점검합니다.</span></span></span></p><p id=\"e60dd40a-fcfc-49c9-a15e-2d7ae12b9036\"><span><span><span>헬스 체크 API 경로는 커스텀하게 설정 가능합니다.</span></span></span></p><figure id=\"5e067b74-b0d9-4072-830e-fd96af14f9c5\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/922d18fe-e327-4b81-ae76-cef344e04965\"/></figure><p id=\"793daad0-4b58-44d8-8441-6c8db65b6daa\"><span><span><span>헬스 체크에서 서버에 문제가 발견되면 로드 밸런서는 해당 서버로 요청을 보내지 않게 됩니다.</span></span></span></p><figure id=\"dfab1b50-77ff-4722-b539-87bc6f271321\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/8ed05059-6d6b-4ab2-97e5-8f2d21ba3acd\"/></figure><figure id=\"be4c0b8f-8b5f-4557-9802-1ff6ea465dd9\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/fda05a5f-a912-41ac-b062-9fbed004a031\"/></figure><p id=\"649fd311-ea65-4318-a6fc-262c235044f4\"><span><span><span>헬스 체크는 정상적으로 서비스가 가능한 서버에만 트래픽을 보내서 서비스의 고가용성을 확보</span><span>하는 데 도움됩니다.</span></span></span></p><h2 id=\"076173e7-1225-440d-aa17-30ffbd176a11\"><span><span><span>Spring Boot Actuator의 헬스 체크</span></span></span></h2><p id=\"fb0ff008-925d-4fe6-880e-c10c4284b6e5\"><span><span><a href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html\" rel=\"noreferrer noopener\" target=\"_blank\">Spring Boot Acutator</a><span>를 의존성으로 추가하면 기본적으로 헬스 체크 엔드포인트가 활성화됩니다.</span></span></span></p><figure id=\"606ab5c4-4734-415b-bf38-de08605d7b81\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/25662522-581c-47b0-aae4-603cc518d4e8\"/></figure><p id=\"9030f81c-0474-48d5-8b32-802067e8c21e\"><span><span><span>Spring Boot 3.x 기준으로 헬스 체크 엔드포인트는 </span><code>/actuator/health</code><span>이고, 설정을 바꾸지 않아도 해당 엔드포인트로 접속하면 HTTP 200 상태 코드와 해당 서버의 상태가 Response Body로 응답됩니다.</span></span></span></p><p id=\"2f074034-3d07-4a17-b6ac-7ff803dc9d1d\"><span><span><span>크롬 개발자 도구로 확인해본 Spring Boot Actuator의 헬스 체크 결과</span></span></span></p><figure id=\"56d33aad-4515-4fe4-99da-3c2fcf0500fd\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/22273634-6fc7-44cb-8737-83b196706bfb\"/></figure><p id=\"6f40b571-67ac-49c8-885f-fea7e0b38601\"><span><span><span>Spring Boot Actuator는 어떠 기준으로 서버의 헬스 체크를 할까요? 확인하려면 </span><a href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health\" rel=\"noreferrer noopener\" target=\"_blank\">Health Information 문서</a><span>를 살펴보면 됩니다. 해당 정보는 보안에 민감한 요소가 들어있을 수 있어서 퍼블릭하게 접근이 가능해서는 안 됩니다. 저는 로컬에서 간단하게 확인만 해보는 목적으로 </span><code>application.yml(application.properties)</code><span> 파일에 </span><code>management.endpoint.health.show-details: always</code><span>로 설정한 후에 다시 헬스 체크 결과를 확인했습니다.</span></span></span></p><figure id=\"b1b20e63-4c95-495e-8767-271c776e2fd8\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/9ec46d73-6b2e-4679-8543-0f2ef37b0b3f\"/></figure><p id=\"a2033f43-ac67-458a-9e3e-a9fec8f86345\"><span><span><a href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health.auto-configured-health-indicators\" rel=\"noreferrer noopener\" target=\"_blank\">Auto-configured HealthIndicators</a><span>(</span><a href=\"https://docs.spring.io/spring-framework/docs/6.0.7/reference/html/web.html#mvc\" rel=\"noreferrer noopener\" target=\"_blank\">WebMVC</a><span> 전용)와 </span><a href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator.endpoints.health.auto-configured-reactive-health-indicators\" rel=\"noreferrer noopener\" target=\"_blank\">Auto-configured ReactiveHealthIndicators</a><span>(</span><a href=\"https://docs.spring.io/spring-framework/docs/6.0.7/reference/html/web-reactive.html#spring-webflux\" rel=\"noreferrer noopener\" target=\"_blank\">Webflux</a><span> 전용)에 나열된 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java\" rel=\"noreferrer noopener\" target=\"_blank\">HealthIndicator</a><span>(혹은 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java\" rel=\"noreferrer noopener\" target=\"_blank\">ReactiveHealthIndicator</a><span>)는 </span><a href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/using.html#using.auto-configuration\" rel=\"noreferrer noopener\" target=\"_blank\">Spring Boot Auto Configuration</a><span>에 의해 자동으로 활성화되는데 관련된 의존성이 존재할 때만 활성화 되는 것들도 있습니다. 예를 들어, </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java\" rel=\"noreferrer noopener\" target=\"_blank\">DataSourceHealthIndicator</a><span>는 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthContributorAutoConfiguration.java\" rel=\"noreferrer noopener\" target=\"_blank\">DataSourceHealthContributorAutoConfiguration</a><span>에 의해 설정되는데 </span><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/\" rel=\"noreferrer noopener\" target=\"_blank\">Spring Data JPA</a><span> 같이 DataSource를 사용하는 의존성을 추가했을 때 활성화됩니다.</span></span></span></p><p id=\"f2b76f61-05db-474f-a2ae-60052d2999fb\"><span><span><span>그럼 코드레벨에서 각 </span><code>(Reactive)HealthIndicator</code><span>들이 어떻게 사용되는지 보겠습니다.</span></span></span></p><figure id=\"e9de5dff-4368-4900-8a80-d9ad516b2b3b\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/ed18c40e-44d8-49c6-814e-85448bd0f118\"/></figure><p id=\"55be9eea-666e-43a6-ad8b-c40945de9dec\"><span><span><span>먼저 </span><code>/actuator/health</code><span>에 접속한 뒤에 브레이크 포인트를 걸고 디버그 모드로 살펴보면 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointSupport.java#L155-L161\" rel=\"noreferrer noopener\" target=\"_blank\">HealthEndpointSupport 클래스의 getAggregateContribution 메서드</a><span>에서 각 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java\" rel=\"noreferrer noopener\" target=\"_blank\">HealthContributor</a><span>(혹은 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthContributor.java\" rel=\"noreferrer noopener\" target=\"_blank\">ReactiveHealthContributor</a><span>)를 순회하면서 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointWebExtension.java#L92-L95\" rel=\"noreferrer noopener\" target=\"_blank\">헬스 체크하는 코드</a><span>를 보실 수 있습니다. (헬스 체크하는 코드에 있는 HealthIndicator 인터페이스는 HealthContributor 인터페이스를 상속받았습니다.)</span></span></span></p><figure id=\"83c2fca6-2ba6-40fc-b93a-2e68f311309b\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/5d78216b-1bfc-4a38-8744-1b97fecbecaa\"/></figure><p id=\"de68d269-7073-4efa-9dad-81eada82461e\"><span><span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointSupport.java#L193-L202\" rel=\"noreferrer noopener\" target=\"_blank\">HealthEndpointSupport 클래스의 getCompositeHealth 메서드</a><span>에서는 각 HealthIndicator로부터 수집한 상태를 바탕으로 현재 서버의 상태를 진단합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code>@<span>Override</span>\n<span>public </span><span>Status </span><span>getAggregateStatus</span><span>(</span><span>Set</span>&lt;<span>Status</span>&gt; <span>statuses</span><span>)</span> <span>{</span>\n    <span>return</span> <span>statuses</span>.<span>stream</span><span>(</span><span>)</span>.<span>filter</span><span>(</span><span>this</span><span>:</span><span>:</span>contains<span>)</span>.<span>min</span><span>(</span><span>this</span>.<span>comparator</span><span>)</span>.<span>orElse</span><span>(</span><span>Status</span>.<span>UNKNOWN</span><span>)</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>/**\n * {@link Comparator} used to order {@link Status}.\n */</span>\n<span>private </span><span>class</span> StatusComparator <span>implements </span><span>Comparator</span>&lt;<span>Status</span>&gt; <span>{</span>\n\n    @<span>Override</span>\n    <span>public </span><span>int </span><span>compare</span><span>(</span><span>Status </span>s1<span>,</span> <span>Status </span>s2<span>)</span> <span>{</span>\n        <span>List</span>&lt;<span>String</span>&gt; <span>order</span> = <span>SimpleStatusAggregator</span>.<span>this</span>.<span>order</span><span>;</span>\n        <span>int </span><span>i1</span> = <span>order</span>.<span>indexOf</span><span>(</span><span>getUniformCode</span><span>(</span><span>s1</span>.<span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n        <span>int </span><span>i2</span> = <span>order</span>.<span>indexOf</span><span>(</span><span>getUniformCode</span><span>(</span><span>s2</span>.<span>getCode</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n        <span>return</span> <span>(</span><span>i1</span> &lt; <span>i2</span><span>)</span> ? -<span>1</span> : <span>(</span><span>i1</span> != <span>i2</span><span>)</span> ? <span>1</span> : <span>s1</span>.<span>getCode</span><span>(</span><span>)</span>.<span>compareTo</span><span>(</span><span>s2</span>.<span>getCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n<span>}</span></code></pre></div></div></div></div><p id=\"5489fdb8-e7ed-4aaf-875c-c5184848e39c\"><span><span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L73-L76\" rel=\"noreferrer noopener\" target=\"_blank\">SimpleStatusAggregator의 getAggregateStatus 메서드</a><span>에서는 각 상태를 수집해서 하나의 Status로 반환하고 있는데 이 때 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L100-L113\" rel=\"noreferrer noopener\" target=\"_blank\">StatusComparator</a><span>가 사용됩니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>defaultOrder</span>.<span>add</span><span>(</span><span>Status</span>.<span>DOWN</span>.<span>getCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>defaultOrder</span>.<span>add</span><span>(</span><span>Status</span>.<span>OUT_OF_SERVICE</span>.<span>getCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>defaultOrder</span>.<span>add</span><span>(</span><span>Status</span>.<span>UP</span>.<span>getCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>defaultOrder</span>.<span>add</span><span>(</span><span>Status</span>.<span>UNKNOWN</span>.<span>getCode</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>DEFAULT_ORDER</span> = <span>Collections</span>.<span>unmodifiableList</span><span>(</span><span>getUniformCodes</span><span>(</span><span>defaultOrder</span>.<span>stream</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"8f557929-25d5-4881-8974-0f613b50de2c\"><span><span><span>이 때 가장 중요한 것은 Status의 순서인데 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L42-L50\" rel=\"noreferrer noopener\" target=\"_blank\">SimpleStatusAggragtor의 static 생성자 블럭</a><span>을 보게되면 위와 같은 순서로 추가하고 있고,</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>public </span><span>SimpleStatusAggregator</span><span>(</span><span>)</span> <span>{</span>\n    <span>this</span>.<span>order</span> = <span>DEFAULT_ORDER</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"dd8bc03b-a14b-4fbb-a512-00ae530e2c21\"><span><span><span>별도의 순서를 주지 않은 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleStatusAggregator.java#L56-L58\" rel=\"noreferrer noopener\" target=\"_blank\">기본 생성자</a><span>는 </span><code>defaultOrder</code><span>에 추가한 순서를 사용하는 것을 볼 수 있습니다.</span></span></span></p><figure id=\"f334bed6-9798-4d62-bc8a-a7fd18a2e177\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/e884a2de-f8d2-43fc-8313-2befacfbc3a8\"/></figure><p id=\"f835ee01-9046-4449-a48d-5dbef548aeff\"><span><span><code>getAggregateStatus</code><span>는 </span><code>Status</code><span> 중에 가장 순서가 빠른(오름차순) 것 하나를 반환하게 되어있기 때문에 만약에 </span><code>Down</code><span>을 반환한 </span><code>HealthIndicator</code><span>가 하나라도 존재하면 서비스의 상태를 </span><code>Down</code><span>으로 생각해서 </span><code>503</code><span>을 반환하게 됩니다.</span></span></span></p><h2 id=\"17ef1a3a-0798-4b2b-ae47-dec1d9ae0399\"><span><span><span>헬스 체크에서 조심해야 하는 점</span></span></span></h2><p id=\"51eaf309-2f08-400a-9687-97ec88da01b5\"><span><span><span>Spring Boot Actuator 헬스 체크의 동작원리를 잘 모르고 사용하면 일어날 수 있는 문제를 설명하겠습니다.</span></span></span></p><h3 id=\"f3004334-a5f9-4ac2-b469-20a263a42848\"><span><span><span>1. 의도치 않은 장애 발생</span></span></span></h3><figure id=\"fa7bae35-c3da-4f58-bef6-5f20bc56b9af\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/ac29f22f-9c4f-4fab-b363-ef277f1ced95\"/></figure><p id=\"a5a26635-8a33-4fa7-9b44-9787f774ca91\"><span><span><span>각 서버에서는 서비스를 제공하는 서비스 DB와 데이터를 분석하는 로그 DB가 있다고 가정하겠습니다. 그리고 로그 DB에 적재하는 작업은 비동기로 별도의 스레드에서 처리하도록 작업을 해놨다고 가정하겠습니다. 로그 데이터 저장이 불가능하더라도 실시간 서비스에는 문제가 없도록 하기 위해서죠.</span></span></span></p><p id=\"bcb69494-fd9f-4cac-9a51-010a45ae02f8\"><span><span><span>이 때 만약 로그 DB에 작업을 해야해서 순단이 발생하거나 접속에 문제가 생긴다면 어떻게 될까요? 아래 정답을 확인하기 전에 1분 동안 한 번 생각해보시길 바랍니다.</span></span></span></p><figure id=\"f92e5c80-0cf0-4353-af9e-80ae22aeffa6\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/staging/72fb78ea-17f9-4671-b23e-c485a83547fc\"/></figure><p id=\"b66c8aa6-5007-4c35-a3c8-f01a32056214\"><span><span><span>위에 Spring Boot Actuator의 헬스 체크는 여러 </span><code>HealthIndicator</code><span>가 수집한 상태를 토대로 서비스의 상태를 판단한다고 말씀드렸습니다. 그 순서를 차근차근 설명해보겠습니다.</span></span></span></p><ol><li id=\"feef43fe-e77a-4c2e-a7cd-846463262eb3\"><span><span><code>RoutingDataSourceHealthContributor</code><span>에 의해 여러 DataSource의 헬스를 체크합니다.</span></span></span><div><ol><li id=\"1008f8d9-db8d-4e08-a2dd-7b7c8198dcd6\"><span><span><code>DataSourceHealthIndicator</code><span>에 의해 서비스 DB의 상태를 체크했을 때는 </span><code>UP</code><span>이 반환됩니다.</span></span></span></li><li id=\"f3f67763-53df-407d-8ff8-289c140e782c\"><span><span><code>DataSourceHealthIndicator</code><span>에 의해 로그 DB의 상태를 체크했을 때는 </span><code>DOWN</code><span>이 반환됩니다.</span></span></span></li></ol></div></li><li id=\"90e91a6c-a797-4072-8e2a-d5449ca98220\"><span><span><span>수집한 상태들은 </span><code>SimpleStatusAggregator</code><span>에 의해 서비스 상태를 판단하게 되는데 아무런 순서 설정을 하지 않았으면 DOWN인 게 하나라도 있다면 </span><code>DOWN</code><span>이 반환됩니다.</span></span></span></li><li id=\"1eb5846a-a4b8-403b-b0d5-c5af9b85c934\"><span><span><span>서비스의 상태가 </span><code>DOWN</code><span>(</span><code>503</code><span>)으로 판단됐기 때문에 로드 밸런서에서는 서버로 트래픽을 보내지 않게 됩니다.</span></span></span></li><li id=\"81e7e1a5-cfcc-4245-a807-1793b1c899d6\"><span><span><span>서비스 DB에 문제가 없음에도 불구하고 클라이언트의 요청은 처리되지 않고 장애가 발생합니다.</span></span></span></li></ol><p id=\"10c453a5-40ff-49be-a5d5-896211497fc7\"><span><span><span>우리는 분명 최대한 높은 가용성을 보장하기 위해 로그 DB의 장애가 전파되지 않도록 격리했음에도 불구하고 장애가 발생할 수 있습니다. 이를 해결하기 위해서는 아래와 같은 방법 등등이 있습니다.</span></span></span></p><ul><li id=\"10738f67-44b4-4751-8c73-c1b88fec6df3\"><span><span><span>Spring Boot Actuator의 헬스 체크가 아닌 직접 헬스 체크 API를 구현할 수도 있습니다.</span></span></span></li><li id=\"c22d2e46-6085-4c87-9b62-f3daf25889fe\"><span><span><code>HealthIndicator</code><span> 중에 헬스 체크에 영향을 끼치지 않길 희망하는 것들은 비활성화 시키는 방법도 있습니다. (RDB를 예로 들자면 </span><code>management.health.db.enabled: false</code><span>(기본값 </span><code>true</code><span>)로 설정한다거나)</span></span></span></li><li id=\"beecc4cb-8b3a-44ac-88bf-bbdcfb9daf07\"><span><span><span>문제가 되는 </span><code>HealthIndicator</code><span> 빈을 직접 생성해서 Auto Configuration의 동작을 오버라이딩 하는 방법 등등이 있습니다.</span></span></span></li></ul><p id=\"f260ae14-994d-44b6-a4a2-1dede5176642\"><span><span><span>다만 헬스 체크에 이런 저런 로직들이 들어간다는 것은 일반적으로 예측 가능하지 못할 수 있으므로 팀 내에 꼭 공유가 잘 되어야할 것입니다.</span></span></span></p><h3 id=\"6e6a0b51-9965-44ad-9844-28a43606884b\"><span><span><span>2. 트러블 슈팅의 지연</span></span></span></h3><blockquote id=\"e3bf6b42-182e-4628-8719-0d9f9e8767ce\"><span><span><span>비슷한 상황으로, 예전에 API 서버에서 외부 의존성 중에 ES만 죽었는데, API 서버가 죽었다고 판단돼서 DOWN이 된적이 있었어요. 헬스 체크에서 detail 옵션을 키면, 상세하게 쭉 나오더라고요. 당시에 LB 통해서 접근이 안 됐는데, WAS는 개별로 접근했을 때는 문제가 없어 보여서 트러블 슈팅이 늦어졌었습니다.</span></span></span></blockquote><p id=\"14a49b42-9539-45c8-9d7d-8053afacf7a3\"><span><span><span>이는 실제 사내에서 비슷한 상황이 발생했을 때 트러블 슈팅이 지연된 사례입니다. Spring Boot Actuator 헬스체크의 동작원리를 정확히 이해했다면 ES(Elasticsearch) 서버가 죽었을 때 해당 서버의 헬스체크도 같이 죽게 된다는 걸 예측할 수 있습니다. (</span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestClientHealthIndicator.java\" rel=\"noreferrer noopener\" target=\"_blank\">ElasticsearchRestClientHealthIndicator</a><span> 혹은 </span><a href=\"https://github.com/spring-projects/spring-boot/blob/v3.0.5/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/data/elasticsearch/ElasticsearchReactiveHealthIndicator.java\" rel=\"noreferrer noopener\" target=\"_blank\">ElasticsearchReactiveHealthIndicator</a><span>가 ES 서버의 헬스체크를 해서 헬스체크 API 응답에 전체적으로 영향을 끼치기 때문에)</span></span></span></p><p id=\"2aca3ba0-6708-4867-b0f9-f03834fbb3aa\"><span><span><span>하지만 헬스체크의 동작원리를 잘 모르면 우리가 장애를 격리했다고 생각한 시스템(위의 상황에서는 ES)에만 문제가 있는데 왜 장애가 발생하는지, 왜 도메인을 통해서 접근하면 접근이 안 되는지 상황 파악이 안 될 수 있습니다. 서버는 정상적으로 살아있고 부하도 없는 상황이라면 헬스 체크 API를 호출할 생각도 못 하고, 로드 밸런서의 버그인지부터 의심을 할 수도 있습니다. 이렇게 엉뚱한 포인트를 의심하게 되면 장애 상황은 계속 되고, 서버를 재시작해도 근본적인 문제를 해결(위 상황에서는 ES 서버의 복구)하기 전까지는 여전히 헬스 체크에 실패할테니 장시간 장애가 지속될 수도 있습니다.</span></span></span></p><p id=\"e3053b5e-6cf7-4464-a25a-501a07bcabea\"><span><span><span>결국 각 서버 인스턴스마다 직접 헬스 체크 API를 호출해서 정상 응답을 받는지 확인해봐야하는데 여기까지 사고의 흐름이 다다르는데 너무 많은 시간 소요와 불필요한 리소스 낭비들을 초래하게 됩니다.</span></span></span></p><h2 id=\"adeb1265-a328-4162-98ec-8deedf6b6ff8\"><span><span><span>마치며</span></span></span></h2><p id=\"c9a5d433-59b7-4660-8014-f355e9823814\"><span><span><span>평상시에는 헬스 체크하면 </span><span>그냥 </span><code>200 OK</code><span>만 응답하는 정말 심플한 API</span><span> 수준으로만 생각하고 큰 신경도 쓰지 않았습니다. 근데 사소한 것에 한 번 데인 뒤로부터는 개발자가 왜 호기심이 많아야하는지 한 번 더 깨닫게 되었습니다. 그냥 단순히 돌아만가는 코드가 아닌 이 코드가 왜 그렇게 돌아가는지, 우리가 왜 이 기술을 선택하게 된 것인지, 끊임없이 고민하고 탐구하기 위해서는 강력한 호기심이 동기부여가 되기 때문입니다. 이러한 고민을 미리했다면 장애 상황을 미연에 방지할 수 있고, 장애 발생 이후에라도 이슈 분석을 통해 트러블 슈팅 능력도 크게 향상된다는 것을 다시 한번 깨닫게 되는 소중한 경험이었습니다.</span></span></span></p><h2 id=\"78a05fd6-10f7-4dcc-88f9-8ee5c37af38c\"><span><span><span>참고 링크</span></span></span></h2><ul><li id=\"c7b69cfc-998e-497d-88f6-6a15142e77e4\"><span><span><a href=\"https://docs.spring.io/spring-boot/docs/3.0.5/reference/html/actuator.html#actuator\" rel=\"noreferrer noopener\" target=\"_blank\">Spring Boot Actuator Docs</a></span></span></li><li id=\"4184bb9c-ab98-4f20-9eff-a7a7e5173792\"><span><span><a href=\"http://forward.nhnent.com/hands-on-labs/java.spring-boot-actuator/06-health.html\" rel=\"noreferrer noopener\" target=\"_blank\">NHN Forward spring-boot-actuator documentation</a></span></span></li></ul></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div><span>다른 글 둘러보기</span><div><img srcset=\"https://wp.toss.tech/wp-content/uploads/2022/04/techblog-08-rest-docs.png\"/><div><span>Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기</span><span>2022. 04. 11</span></div></div><div><img srcset=\"https://wp.toss.tech/wp-content/uploads/2022/05/techblog-09-error-handling.png\"/><div><span>에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)</span><span>2022. 05. 14</span></div></div><div><img srcset=\"https://wp.toss.tech/wp-content/uploads/2023/03/00017-3291509353.png\"/><div><span>tosspayments-restdocs: 선언형 문서 작성 라이브러리</span><span>2023. 03. 22</span></div></div></div><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "21": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://static.toss.im/assets/toss-tech/node%20js-security.png\"/><h1>Node.js url.parse() 취약점 컨트리뷰션</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/pyozzi.jpeg\"/><div><div><h3>표상영</h3><h3>ㆍ<!-- -->Security Researcher</h3></div><div>2023. 5. 12</div></div></section></header><div><p id=\"35025821-8431-49e9-a35a-10ca54e364e1\"><span><span><span>토스 </span><span>보안기술팀(Security Tech)에서는 개발 서비스 외에도 서비스에서 사용하고 있는 프레임워크나 Third-party에 대한 취약점 연구도 수행하고 있습니다.</span></span></span></p><p id=\"60c11a15-f348-42e8-930e-7028f35c5b65\"><span><span><span>이번 아티클은 Node.js의 Built-in API 중 하나인 </span><code>url.parse()</code><span> 의 Hostname Spoofing 취약점을 발견하고 안전한 코드로 패치될 수 있도록 컨트리뷰션 했던 과정을 다뤄보려 합니다.</span></span></span></p><figure id=\"74f0d10b-6cac-4c51-bdc0-c7a91d3e5646\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/e3f8b985-f5c3-4e89-b50f-5c711d50fe77\"/><figcaption><a href=\"https://github.com/nodejs/node/pull/45011\" rel=\"noreferrer noopener\" target=\"_blank\">https://github.com/nodejs/node/pull/45011</a></figcaption></figure><hr/><h2 id=\"c1349cd2-f8db-4fdd-906f-444c9918c084\"><span><span><span>url.parse() 취약점 발생 원인</span></span></span></h2><p id=\"ce73a9e9-5c04-44da-b421-45680ff3ef8d\"><span><span><span>Node.js의 url.parse()는 </span><code>WHATWG URL API</code><span> 가 아닌 자체적인 스펙으로 개발된 함수입니다.</span></span></span></p><aside><h4><span><span><span>WHATWG URL API\n</span><code>WHATWG</code><span>는 Web Hypertext Application Technology Working Group의 약어로 국제 웹 표준화 그룹을 뜻하고, </span><code>WHATWG URL API</code><span> 는 국제 표준 스펙으로 URL(Uniform Resource Locator)을 다룰 수 있도록 제공되는 API를 말합니다.  </span></span></span></h4></aside><p id=\"6e7c2d07-b892-43fc-914c-e2f533838857\"><span><span><code>WHATWG URL API</code><span> 가 등장하기 전, URL 파싱 기능을 제공하기 위해 자체적으로 개발된 함수로 보이는데요. 표준 스펙이 아닌 자체적으로 해석하다보니 다른 파서(parser)들과 해석 </span><span>결과가 달라지게 되고,</span><span> 이 때문에 의도치 않은 코드흐름이 발생하게 됩니다.</span></span></span></p><p id=\"c058b654-10f9-4923-8663-06d6afb26d32\"><span><span><span>url.parse()에서는 hostname을 잘못된 방식으로 파싱하여 취약점이 발생하게 되었는데요. Node.js의 url라이브러리는 </span><a href=\"https://github.com/nodejs/node/blob/v19.0.1/lib/url.js\" rel=\"noreferrer noopener\" target=\"_blank\">여기</a><span>에서 </span><span>확인할 수 있고</span><span>, 취약점이 </span><span>발생했던 부분</span><span>은 아래의 </span><code>getHostname()</code><span> 함수입니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>/* comment\n해당 취약점은 v19.1.0에서 패치되었습니다. \n아래 코드는 v19.1.0 이전 버전에서 확인할 수 있습니다.\n*/</span>\n<span>function</span> <span>getHostname</span><span>(</span><span>self</span><span>,</span> <span>rest</span><span>,</span> <span>hostname</span><span>)</span> <span>{</span>\n  <span>for</span> <span>(</span><span>let</span> <span>i</span> = <span>0</span><span>;</span> <span>i</span> &lt; <span>hostname</span>.<span>length</span><span>;</span> ++<span>i</span><span>)</span> <span>{</span>\n    <span>const</span> <span>code</span> = <span>hostname</span>.<span>charCodeAt</span><span>(</span><span>i</span><span>)</span><span>;</span>\n    <span>const</span> <span>isValid</span> = <span>(</span><span>code</span> &gt;= <span>CHAR_LOWERCASE_A</span> &amp;&amp; <span>code</span> &lt;= <span>CHAR_LOWERCASE_Z</span><span>)</span> ||\n                    <span>code</span> === <span>CHAR_DOT</span> ||\n                    <span>(</span><span>code</span> &gt;= <span>CHAR_UPPERCASE_A</span> &amp;&amp; <span>code</span> &lt;= <span>CHAR_UPPERCASE_Z</span><span>)</span> ||\n                    <span>(</span><span>code</span> &gt;= <span>CHAR_0</span> &amp;&amp; <span>code</span> &lt;= <span>CHAR_9</span><span>)</span> ||\n                    <span>code</span> === <span>CHAR_HYPHEN_MINUS</span> ||\n                    <span>code</span> === <span>CHAR_PLUS</span> ||\n                    <span>code</span> === <span>CHAR_UNDERSCORE</span> ||\n                    <span>code</span> &gt; <span>127</span><span>;</span>\n\n    <span>// Invalid host character</span>\n    <span>if</span> <span>(</span>!<span>isValid</span><span>)</span> <span>{</span>\n      <span>self</span>.<span>hostname</span> = <span>hostname</span>.<span>slice</span><span>(</span><span>0</span><span>,</span> <span>i</span><span>)</span><span>;</span>\n      <span>return</span> <span>`/</span><span>${</span><span>hostname</span>.<span>slice</span><span>(</span><span>i</span><span>)</span><span>}</span><span>${</span><span>rest</span><span>}</span><span>`</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n  <span>return</span> <span>rest</span><span>;</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"71de1d88-3abf-4b8c-b7ae-4c214af4830a\"><span><span><code>getHostname()</code><span> 함수의 로직은 단순합니다. 반복문을 통해 전달된 값의 문자를 하나씩 가져온 뒤, 조건에 맞는 값을 구하는 로직인데요. </span></span></span></p><p id=\"4d4b2664-6c62-4fa0-93fb-adb691a36510\"><span><span><span>여기서 </span><code>isValid</code><span> 라는 특정 조건을 정의해두고, 현재 문자가 조건에 충족되지 않으면 해당 문자의 앞 인덱스까지 slice하여 그 문자열을 hostname으로 설정합니다. 그리고 그 뒤 문자들은 앞에 </span><code>/</code><span>를 붙여 경로(path)로 사용합니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>const</span> <span>isValid</span> = <span>(</span><span>code</span> &gt;= <span>CHAR_LOWERCASE_A</span> &amp;&amp; <span>code</span> &lt;= <span>CHAR_LOWERCASE_Z</span><span>)</span> ||\n                <span>code</span> === <span>CHAR_DOT</span> ||\n                <span>(</span><span>code</span> &gt;= <span>CHAR_UPPERCASE_A</span> &amp;&amp; <span>code</span> &lt;= <span>CHAR_UPPERCASE_Z</span><span>)</span> ||\n                <span>(</span><span>code</span> &gt;= <span>CHAR_0</span> &amp;&amp; <span>code</span> &lt;= <span>CHAR_9</span><span>)</span> ||\n                <span>code</span> === <span>CHAR_HYPHEN_MINUS</span> ||\n                <span>code</span> === <span>CHAR_PLUS</span> ||\n                <span>code</span> === <span>CHAR_UNDERSCORE</span> ||\n                <span>code</span> &gt; <span>127</span><span>;</span></code></pre></div></div></div></div><p id=\"11e29da6-9891-4153-a0fe-f47ace32ca8d\"><span><span><code>isValid</code><span> 의 조건을 정규식으로 표현해보면 </span><code>/[a-zA-Z0-9\\.\\-\\+_]/u</code><span> 와 같은데요. </span><span>*ECMAScript기준 \n</span><span>“hostname으로는 저 범위의 문자들만 올 수 있어!”</span><span> 라고 설정해둔 것이죠.</span></span></span></p><figure id=\"cf54f93a-4b74-4c55-9cd2-e3825af37c03\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/cd876c5c-26be-4495-9d80-178d05af124d\"/></figure><div id=\"2658824d-f61d-488d-a348-fe4f19d803bb\"><div role=\"button\"><div><span><span aria-hidden=\"true\" role=\"presentation\"></span><img role=\"presentation\" src=\"https://static.toss.im/icons/svg/icon-play-mono.svg\"/></span></div><span><span><span>디버깅 코드</span></span></span></div></div><p id=\"14890d2f-0bad-4c27-9bd2-14a666d31aa2\"><span><span><code>getHostname()</code><span> 함수에 디버깅 코드를 추가하고 확인해보면, 실제로 </span><code>isValid</code><span> 범위 밖 </span><span>문자</span><span>일 경우 hostname 파싱을 중단하고, 나머지 문자열은 앞에 </span><code>/</code><span> 를 붙여 경로(path)로 사용하는 것을 볼 수 있습니다.</span></span></span></p><p id=\"ed4a2ffa-f910-4d5b-921e-15dbac4661a7\"><span><span><span>때문에, </span><code>http://EVIL_DOMAIN*.toss.im</code><span> 의 hostname이 </span><code>EVIL_DOMAIN</code><span> 이 되어버리고, Hostname Spoofing 취약점이 발생하게 됩니다.</span></span></span></p><aside><h4><span><span><span>Hostname Spoofing</span><span>\nHostname Spoofing은 시스템을 대상으로 Hostname을 속이는 해킹 기법을 말합니다.\n</span><span>Spoofing은 ‘속이다’라는 사전적 의미를 갖고 있으며, 시스템을 대상으로 어떠한 정보를 속이는 해킹 기법을 Spoofing이라고 합니다.</span><span>\n</span></span></span></h4></aside><p id=\"6dd2bf1e-95b1-426d-8fcf-b4dfc16f9cd4\"><span><span></span></span></p><h3 id=\"41463295-757c-406c-9e40-5d77749163b2\"><span><span><span>WHATWG URL API ↔ url.parse() 비교</span></span></span></h3><figure id=\"d3a5a531-15b0-4631-81e0-23601b38820b\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/d7b3c869-a60b-4ff1-87c8-00a8cf44b8ff\"/></figure><p id=\"80aa1ee2-a4bd-49b5-9c46-ebcb432ec1b0\"><span><span><code>WHATWG URL API</code><span> 의 hostname 파싱 결과를 보면 </span><code>evil_domain*.toss.im</code><span> 으로 Node.js와 다른 것을 확인할 수 있습니다.</span></span></span></p><h3 id=\"96be7734-f19d-4858-8c88-6e5533fc2110\"><span><span><span>Reserved Characters</span></span></span></h3><p id=\"a5fab008-40d6-4b57-81d9-468f3aefd54d\"><span><span><span>Node.js에서 이렇게 파싱하는 이유는 </span><code>RFC(Request For Comments)</code><span> 문서를 보면 알 수 있습니다. </span><a href=\"https://www.rfc-editor.org/rfc/rfc3986\" rel=\"noreferrer noopener\" target=\"_blank\">RFC 3986</a><span>는 </span><code>Standard URI Syntax</code><span> 를 정의해둔 문서인데요.</span></span></span></p><p id=\"fb72e5ae-3594-4319-bb98-f8bf27936ee1\"><span><span><span>문서의 여러 항목 중 아래 </span><span>2.2 Reserved Characters</span><span>를</span><span> </span><span>보면 그 이유를 찾을 수 있습니다.</span></span></span></p><figure id=\"b41210c6-578c-4363-8647-69694ced3fdd\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/a1957177-0336-44ef-a88e-9e9d1421a631\"/><figcaption><a href=\"https://www.rfc-editor.org/rfc/rfc3986#section-2.2\" rel=\"noreferrer noopener\" target=\"_blank\">https://www.rfc-editor.org/rfc/rfc3986#section-2.2</a></figcaption></figure><p id=\"5e11285c-1e59-4140-8edc-959fdcc94fb9\"><span><span><code>Reserved Characters</code><span> 는 URI를 구성할 수 있는 문자 중 특수 목적을 갖고 사용할 문자들을 미리 예약해둔 것인데요. 예를 들면 port 구분자로 사용되는 </span><code>:(colon)</code><span> , path 구분자로 사용되는 </span><code>/(slash)</code><span> 가 예약된 문자인 것이죠. </span></span></span></p><p id=\"d4a3778f-b6e1-4a1a-81f9-56c9f0befe35\"><span><span><span>따라서, </span><code>*</code><span>, </span><code>!</code><span>, </span><code>$</code><span>, </span><code>:</code><span>, </span><code>#</code><span> 와 같은 문자들은 hostname으로 사용할 수 없습니다.</span></span></span></p><p id=\"1bc20a33-55ac-4c0d-84d4-111f030fafa2\"><span><span><span>그 아래를 보면 사용해도 되는 </span><code>Unreserved Characters</code><span> 도 정의되어 있습니다.</span></span></span></p><figure id=\"c58a0e42-dc54-4191-854c-fd7d28a43a86\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/64e5b467-9132-4375-bc88-ab4d6e7db893\"/><figcaption><a href=\"https://www.rfc-editor.org/rfc/rfc3986#section-2.3\" rel=\"noreferrer noopener\" target=\"_blank\">https://www.rfc-editor.org/rfc/rfc3986#section-2.3</a></figcaption></figure><p id=\"132cdaf9-1bff-422c-8de0-619cf0c271af\"><span><span><span>정의된 문자들을 보면 위에서 확인한 url.parse()의 </span><code>isValid</code><span> 조건과 비슷한 것을 알 수 있죠.</span></span></span></p><p id=\"45cc2f21-7a64-43f9-a864-2dd899857fd0\"><span><span></span></span></p><hr/><h2 id=\"4f89b0d8-0779-4b9d-a3f9-b9b5a50a54ac\"><span><span><span>취약점 악용 시나리오</span></span></span></h2><p id=\"872ae8ff-55de-416b-8c01-e5915fce2147\"><span><span><span>이러한 </span><code>WHATWG URL API</code><span> ↔ </span><code>url.parse()</code><span> 간 파싱 결과 차이는 서비스의 도메인 검증로직을 우회하는데 악용할 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>// server.ts (exec command: ts-node server.ts)</span>\n<span>/* dependencise\n\n\texpress@^4.18.1\n\tts-node@^10.9.1\n\ttypescript@^4.3.2\n\tnode-fetch@2\n\t@types/node-fetch@^2.6.2\n\n*/</span>\n\n<span>import</span> <span>express</span><span>,</span> <span>{</span> <span>Request</span><span>,</span> <span>Response</span><span>,</span> <span>NextFunction</span> <span>}</span> <span>from</span> <span>'express'</span><span>;</span>\n\n<span>const</span> <span>node_fetch</span> = <span>require</span><span>(</span><span>\"node-fetch\"</span><span>)</span><span>;</span>\n<span>const</span> <span>app</span> = <span>express</span><span>(</span><span>)</span><span>;</span>\n\n<span>app</span>.<span>get</span><span>(</span><span>\"/image/resize\"</span><span>,</span> <span>async</span> <span>(</span><span>req</span><span>:</span> Request<span>,</span> <span>res</span><span>:</span> Response<span>)</span> <span>=&gt;</span> <span>{</span>\n\t<span>// GET메소드로 url파라미터 입력 받음</span>\n\t<span>const</span> <span>url</span> = <span>req</span>.<span>query</span>.<span>url</span> <span>as</span> string<span>;</span> <span>// [1]</span>\n\t<span>// WHATWG URL API를 이용해 hostname 파싱</span>\n\t<span>const</span> <span>host</span> = <span>new</span> <span>URL</span><span>(</span><span>url</span><span>)</span>.<span>hostname</span><span>;</span> <span>// [2]</span>\n\n\t<span>// 파싱한 hostname 검증 (example.com과 *.example.com일 경우에만 분기문 통과)</span>\n\t<span>if</span><span>(</span><span>host</span> === <span>\"toss.im\"</span> || <span>host</span>.<span>endsWith</span><span>(</span><span>\".toss.im\"</span><span>)</span><span>)</span> <span>{</span> <span>// [3]</span>\n\t\t<span>// 검증된 hostname일 경우, node_fetch로 http request</span>\n\t\t<span>var</span> <span>result</span> = <span>await</span> <span>node_fetch</span>.<span>default</span><span>(</span><span>url</span><span>)</span><span>;</span> <span>// [4]</span>\n\t\t<span>var</span> <span>requestUrl</span> = <span>result</span>.<span>url</span><span>;</span> <span>// [5]</span>\n\t\t<span>// 파라미터로 입력된 url과 node_fetch로 실제 요청한 url 콘솔 출력</span>\n\t\t<span>console</span>.<span>log</span><span>(</span><span>`Input URL: </span><span>${</span><span>url</span><span>}</span><span> / Request URL: </span><span>${</span><span>requestUrl</span><span>}</span><span>`</span><span>)</span><span>;</span> <span>// [6]</span>\n\t<span>// 그 외 경우는 reject</span>\n\t<span>}</span> <span>else</span> <span>{</span>\n\t\t<span>console</span>.<span>log</span><span>(</span><span>\"reject\"</span><span>)</span><span>;</span>\n\t<span>}</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>app</span>.<span>listen</span><span>(</span><span>4540</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>\n<span>}</span><span>)</span><span>;</span></code></pre></div></div></div></div><p id=\"66e99a70-9bec-4e4d-8a61-ec2eee5f007d\"><span><span><span>위 코드는 사용자에게 파라미터로 url을 입력받고, 입력된 url 검증 후 fetch하는 간단한 웹서버입니다.</span></span></span></p><p id=\"e8c3a047-c3f2-41e9-bd01-0e1eba2bdf30\"><span><span><code>new URL(url).hostname</code><span> 으로 hostname을 가져온 뒤, hostname이 </span><code>toss.im</code><span> 과 일치하거나 </span><code>.toss.im</code><span> 으로 끝나는지 확인합니다. 일반적으로 도메인을 검증할 때 사용하는 방식이죠.</span></span></span></p><figure id=\"e99ac27b-b956-482c-bac2-ebcd20fad988\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/1324853d-038e-4944-b80c-eb4d1b99a232\"/><figcaption><span>파라미터로 입력한 url과 node-fetch에서 실제로 요청한 url 콘솔 출력</span></figcaption></figure><p id=\"4ac0d9b6-7912-40b4-90ed-54bf35e1db52\"><span><span><span>이 경우, 위 그림처럼 url파라미터 값을 </span><code>https://google.com!.toss.im</code><span> 로 입력하면 검증 로직이 우회되고 서버는 </span><code>https://google.com/!.toss.im/</code><span> 으로 요청하게 되는데요. 그 이유는 </span><code>node-fetch</code><span> 라이브러리 코드를 보면 알 수 있습니다.</span></span></span></p><div><div><div><button><svg fill=\"none\" height=\"100%\" viewbox=\"0 0 12 13\" width=\"100%\"><g clip-path=\"url(#a)\"><path d=\"M8.21 1.344H2.317c-.54 0-.983.463-.983 1.03v7.212h.983V2.374H8.21v-1.03Zm1.474 2.06H4.281c-.54 0-.983.464-.983 1.03v7.213c0 .566.442 1.03.983 1.03h5.403c.54 0 .983-.464.983-1.03V4.435c0-.567-.442-1.03-.983-1.03Zm0 8.243H4.281V4.435h5.403v7.212Z\" fill=\"currentColor\"></path></g><defs><clippath id=\"a\"><path d=\"M0 0h12v12H0z\" fill=\"currentColor\" transform=\"translate(0 .676)\"></path></clippath></defs></svg></button></div><div><div><pre translate=\"no\"><code><span>/* node-fetch v2.6.11 \n * [https://github.com/node-fetch/node-fetch/tree/v2.6.11]\n * request.js\n *\n * Request class contains server only options\n *\n * \n */</span>\n\n<span>import</span> <span>Url</span> <span>from</span> <span>'url'</span><span>;</span> <span>// [1]</span>\n<span>import</span> <span>Stream</span> <span>from</span> <span>'stream'</span><span>;</span>\n<span>import</span> <span>whatwgUrl</span> <span>from</span> <span>'whatwg-url'</span><span>;</span>\n<span>import</span> <span>Headers</span><span>,</span> <span>{</span> <span>exportNodeCompatibleHeaders</span> <span>}</span> <span>from</span> <span>'./headers.js'</span><span>;</span>\n<span>import</span> <span>Body</span><span>,</span> <span>{</span> <span>clone</span><span>,</span> <span>extractContentType</span><span>,</span> <span>getTotalBytes</span> <span>}</span> <span>from</span> <span>'./body'</span><span>;</span>\n\n<span>const</span> <span>INTERNALS</span> = <span>Symbol</span><span>(</span><span>'Request internals'</span><span>)</span><span>;</span>\n<span>const</span> <span>URL</span> = <span>Url</span>.<span>URL</span> || <span>whatwgUrl</span>.<span>URL</span><span>;</span>\n\n<span>// fix an issue where \"format\", \"parse\" aren't a named export for node &lt;10</span>\n<span>const</span> <span>parse_url</span> = <span>Url</span>.<span>parse</span><span>;</span> <span>// [2]</span>\n<span>const</span> <span>format_url</span> = <span>Url</span>.<span>format</span><span>;</span>\n\n<span>/**\n * Wrapper around `new URL` to handle arbitrary URLs\n *\n * @param  {string} urlStr\n * @return {void}\n */</span>\n<span>function</span> <span>parseURL</span><span>(</span><span>urlStr</span><span>)</span> <span>{</span>\n\t<span>/*\n\t\tCheck whether the URL is absolute or not\n\n\t\tScheme: https://tools.ietf.org/html/rfc3986#section-3.1\n\t\tAbsolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n\t*/</span>\n\t<span>if</span> <span>(</span><span>/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/</span>.<span>exec</span><span>(</span><span>urlStr</span><span>)</span><span>)</span> <span>{</span>\n\t\t<span>urlStr</span> = <span>new</span> <span>URL</span><span>(</span><span>urlStr</span><span>)</span>.<span>toString</span><span>(</span><span>)</span> <span>// [3]</span>\n\t<span>}</span>\n\n\t<span>// Fallback to old implementation for arbitrary URLs</span>\n\t<span>return</span> <span>parse_url</span><span>(</span><span>urlStr</span><span>)</span><span>;</span> <span>// [4]</span>\n<span>}</span></code></pre></div></div></div></div><p id=\"f4a096c9-87fb-443d-81b3-b25200d2981d\"><span><span><span>위 코드는 </span><code>node-fetch</code><span> 라이브러리에서 url을 파싱하는 코드 부분입니다. 중요한 부분은 주석으로 번호 표시를 해두었는데요.</span></span></span></p><ul><li id=\"2d58674c-18d1-4117-a8c4-69c8af9268a9\"><span><span><span>[1]</span><span>: Node.js의 url 라이브러리를 가져옵니다.</span></span></span></li><li id=\"73aaee98-6dea-4191-9e2e-ee68f1b437b9\"><span><span><span>[2]</span><span>: Node.js의 url.parse()함수를 parse_url 변수에 저장합니다.</span></span></span></li><li id=\"e4ef692b-0264-4314-b272-3dff993049aa\"><span><span><span>[3]</span><span>: 파싱할 url이 정규식 조건과 일치하면 </span><code>WHATWG URL API</code><span> 로 파싱합니다.</span></span></span></li><li id=\"35f2fc74-23b8-434d-849d-32d912194bd2\"><span><span><span>[4]</span><span>: 그 외에 경우는 Node.js의 url.parse()함수로 파싱합니다.</span></span></span></li></ul><p id=\"af1b4f1d-ded5-4dae-ad07-4b65eb4abfbf\"><span><span><span>url 파라미터로 입력한 </span><code>https://google.com!.toss.im</code><span> 은 </span><span>[3]</span><span> </span><span>정규식 조건에 충족되지 않으니, </span><span>[4]</span><span> url.parse()로 hostname이 파싱되었고 Node.js의 잘못된 파싱 방식으로 인해 </span><code>https://google.com/*.toss.im</code><span> 으로 요청하게 된 것입니다.</span></span></span></p><p id=\"85a3cb07-564f-441d-8657-a5615ef692b0\"><span><span><span>이처럼 서비스 서버의 검증 로직을 우회하고 공격자가 원하는 임의의 도메인으로 요청하도록 하는 공격기법을 </span><code>SSRF(Server Side Request Forgery)</code><span> 라고 하는데요. 공격자는 SSRF 공격을 통해 외부에 공개되어 있지 않은 서비스 내부 망에 접근하여 민감한 정보들을 탈취하거나, 관리자 기능들을 악용할 수 있습니다.</span></span></span></p><p id=\"ed76045a-86aa-4fb7-b175-d887cdf085d4\"><span><span></span></span></p><hr/><h2 id=\"4e6d1cde-69d4-4282-8131-561154e07aa1\"><span><span><span>취약점 패치 컨트리뷰션</span></span></span></h2><p id=\"949f21e4-382c-416e-92fc-1b51119d07e1\"><span><span><span>화이트해커 문화에는 취약점을 제보하고 그에 따른 보상을 지급하는 </span><code>버그바운티(Bug Bounty)</code><span> 라는 프로그램이 존재합니다. 보안에 중요한 가치를 두고 있는 기업들이 독립적으로 운영하기도 하고, 국가기관에서 운영하기도 하는데요.</span></span></span></p><figure id=\"2937194b-7e4c-4239-80eb-ff87cbe1c6b6\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/4db14784-be0d-496b-86bb-eb16ca9699e4\"/><figcaption><span>토스 버그바운티 챌린지</span></figcaption></figure><p id=\"1491aee1-d877-4bae-8f41-fa1cf4720b77\"><span><span><span>토스에서도</span><span> 작년에 자체적으로 </span><code>토스 버그바운티 챌린지</code><span> </span><a href=\"https://bugbounty.toss.im\" rel=\"noreferrer noopener\" target=\"_blank\">(https://bugbounty.toss.im</a><span>)를 진행한 바 있고, 국가 기관에서는 한국인터넷진흥원(</span><a href=\"https://knvd.krcert.or.kr/index.do\" rel=\"noreferrer noopener\" target=\"_blank\">KISA</a><span>)이 국내 소프트웨어에 대한 취약점을 제보받고 있습니다.</span></span></span></p><figure id=\"3e35e7d1-e577-4de7-b5b4-d003d1b2ccea\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/06104d54-2673-440f-866c-36bebd43e0b9\"/><figcaption><span>Node.js url.parse() 취약점 제보</span></figcaption></figure><p id=\"e2f676d3-fcd7-44c2-b17e-fab5134ac44c\"><span><span><span>저 또한 버그바운티 프로그램을 통해 Node.js 측에 취약점을 제보하였고, 취약점을 알맞게 패치할 수 있는 방안들에 대해 논의하면서 컨트리뷰션을 진행하였는데요.</span></span></span></p><figure id=\"e3edad89-3edb-459a-b73b-81c89cf07cb8\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/ee1e0e0a-59bc-4661-b5b1-6ef220b36ea5\"/></figure><p id=\"826295cd-e514-46f1-bdf0-175ba9ab0f18\"><span><span><span>기존에 </span><code>Unreserved Characters</code><span> 를 화이트리스트로 처리하는 방식 대신 </span><code>Reserved Characters</code><span> 를 블랙리스트로 처리하는 방식으로 변경하여 </span><code>isValid</code><span> </span><span>조건을 좀 더 엄격하게 가져가도록 </span><span>패치하였습니다.</span></span></span></p><figure id=\"42214dfe-5d68-4f8a-a5d5-84d9448c1804\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/f57928de-0a86-457c-be93-eb534288e723\"/></figure><p id=\"43116e15-1d8b-4f6c-9319-6bef912f31e7\"><span><span><a href=\"https://github.com/nodejs/node/pull/45011\" rel=\"noreferrer noopener\" target=\"_blank\">https://github.com/nodejs/node/pull/45011</a><span> 에서 패치된 코드를 확인해 볼 수 있고, 해당 Pull Request는 </span><code>v19.1.0</code><span>, </span><code>v18.13.0</code><span> 에서 적용되었습니다.</span></span></span></p><figure id=\"4a411b5c-5c55-42ea-b2df-530a27912326\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/93422efe-4354-47fe-9503-bae51c7466da\"/><figcaption><a href=\"https://nodejs.org/api/url.html#urlparseurlstring-parsequerystring-slashesdenotehost\" rel=\"noreferrer noopener\" target=\"_blank\">https://nodejs.org/api/url.html#urlparseurlstring-parsequerystring-slashesdenotehost</a></figcaption></figure><p id=\"835853be-20aa-45e1-85f9-8168fb7c81c8\"><span><span><span>추가로 기존에 </span><code>Legacy</code><span> 상태였던 url.parse()함수를 </span><code>Deprecated</code><span> 로 변경하였는데요. </span><code>--pending-deprecation</code><span> 옵션을 사용하는 경우, 런타임에서 </span><code>Deprecated</code><span> 함수임을 경고하도록 패치되었습니다.</span></span></span></p><p id=\"ff93eed6-9f79-47d8-9c1b-665dec421a4c\"><span><span><span>이 글을 읽으신 분들도 Node.js를 사용하고 계시다면, 취약점이 존재하는 버전을 사용 중인지 확인해보시는 것을 권장드립니다.</span><span> </span><span>*취약점은 </span><code>v19.1.0</code><span>, </span><code>v18.13.0</code><span> 에서 패치되었습니다.</span></span></span></p><p id=\"11bd33b7-28d4-4fa8-85ea-1af2e776f2b1\"><span><span><span>그리고 저희 보안기술팀(Security Tech)에서 이와 같은 보안 연구를 같이 해나갈 동료분들을 찾고 있습니다. 관심이 있으시다면 언제든지 </span><a href=\"https://toss.im/career/job-detail?job_id=4555752003&amp;company=%ED%86%A0%EC%8A%A4&amp;detailedPosition=%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%2F%EC%B7%A8%EC%95%BD%EC%A0%90+%EB%B6%84%EC%84%9D\" rel=\"noreferrer noopener\" target=\"_blank\">문</a><span>을 두드려 주세요!</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "22": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"대화하는 사람들 일러스트레이션\" srcset=\"https://static.toss.im/assets/toss-tech/frontend-diving-club.jpg\"/><h1>놀러오세요! 프론트엔드 다이빙 클럽</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/yurim-jin.jpg\"/><div><div><h3>진유림</h3></div><div>2023. 7. 21</div></div></section></header><div><p id=\"72cbd4e5-16a5-41c5-97c9-1c66c6e607c0\"><span><span><span>안녕하세요, 토스 프론트엔드 개발자 진유림입니다. </span></span></span></p><p id=\"c34d1b31-911c-445d-8407-398fc85085e4\"><span><span><span>저는 개발을 처음 배울 때부터 커뮤니티 안에서 성장해왔는데요. 9XD, GDG, Facebook Developer Circle등 다양한 온/오프라인 커뮤니티에서 각양각색의 개발자를 만나며 IT업계에 대한 애정을 키우고, 지식은 나눌수록 커진다는 것을 깨달았어요.</span></span></span></p><p id=\"b1173932-d909-472e-bef6-436012696ef1\"><span><span><span>그러나 코로나 이후로는 오프라인 모임이 중단되었고, 개발 이야기를 나눌 수 있는 사람들이 회사 내로 한정되어 버린 것이 아쉬웠어요. 그래서 시작했습니다, 다양한 회사와 다양한 연차의 개발자들이 모여 노하우를 나누는 프론트엔드 커뮤니티, ‘프론트엔드 다이빙 클럽’을요.</span></span></span></p><figure id=\"b8545397-f2f3-47d1-9af5-b706afb8603d\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/facebd3b-6ecd-4617-ae24-20726783ce5b\"/></figure><h2 id=\"a118293d-106b-4ae6-b7fd-c776987bc046\"><span><span><span>프론트엔드 다이빙 클럽?</span></span></span></h2><p id=\"aef9831c-3d13-4ec5-bc78-9f70b601a1aa\"><span><span><span>커뮤니티 이름으로부터 유추할 수 있듯이, ‘프론트엔드 다이빙 클럽’(이하 프다클)은 프론트엔드에 관한 깊은 이야기를 나눌 수 있는 공간입니다.</span></span></span></p><p id=\"756b824a-56e5-447f-94bf-e7615540c545\"><span><span><span>격월로 소규모 오프라인 모임을 개최하며, 한 번 이상 참석한 사람들은 프라이빗 슬랙에 가입하여 온라인으로도 소통을 이어갈 수 있습니다.</span></span></span></p><p id=\"a98299ed-20f1-480a-a869-1c19184b0978\"><span><span></span></span></p><figure id=\"c8e5681e-d823-4117-9e04-271072a2e85a\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/e664a323-0e3a-421d-94df-f1203bdc10ae\"/></figure><p id=\"b8fd3664-957c-4057-8487-650687323f66\"><span><span></span></span></p><p id=\"3df9acc8-f224-40be-9542-366c734bbcb7\"><span><span><span>각 모임마다 주제가 바뀌고, 해당 주제에 관심이 많은 분들이 참가하여 다양하고 깊은 의견을 들을 수 있는 게 특징입니다.</span></span></span></p><p id=\"ee589093-3dea-442f-93a9-c91878c9b82c\"><span><span><span>지난 세 번의 모임은 다음과 같은 주제로 진행되었습니다:</span></span></span></p><ol><li id=\"465521bc-38d6-45e1-ba3a-094cf1ba6ba2\"><span><span><span>웹뷰 위에서 서비스 개발하기</span></span></span></li><li id=\"ad291523-a5f4-4c20-8498-4feb06241060\"><span><span><span>프론트엔드 자동화</span></span></span></li><li id=\"998d24e4-c860-4042-b736-eba44ef64500\"><span><span><span>프론트엔드 일하는 방식/문화 공유</span></span></span></li></ol><p id=\"2479e82e-d1e0-464a-9e4a-dec5a4c831ff\"><span><span><span>지금까지 네이버, 유니크굿, 무신사, 아임포트, 오늘의집, 뱅크샐러드, 29cm, 카카오페이, 당근마켓, 우아한형제들, 두나무 등 30개 이상의 회사로부터 1년차부터 20년차까지 다양한 연차의 프론트엔드 개발자 분들이 참석하여 의견을 공유하였습니다. </span></span></span></p><p id=\"94584f5a-bff8-4342-bde5-e2002adf2f8c\"><span><span></span></span></p><p id=\"42b2fc47-5b34-439a-916b-beadfe41aa6a\"><span><span><span>앞으로의 모임에서는 다음과 같은 주제를 기획하고 있습니다:</span></span></span></p><ul><li id=\"53b83b6c-3918-4dc1-87ad-e09960c603ab\"><span><span><span>프론트엔드 테스팅</span></span></span></li><li id=\"60ee48dc-7554-4f05-a499-d7c8ee359aec\"><span><span><span>좋은 면접이란</span></span></span></li><li id=\"67202708-9e86-4d46-b083-af43b99a1cba\"><span><span><span>프론트엔드 커리어 패스</span></span></span></li></ul><p id=\"6af07bd6-aa76-4593-a07f-826c7e949c55\"><span><span><span>이 주제들은 타 회사의 시각을 듣고 인사이트를 얼마나 많이 얻을 수 있는지를 기준으로 선택되고 있습니다.</span></span></span></p><p id=\"e75fc477-29da-48d5-bb34-c53952b9efb3\"><span><span><span>주제별 발표는 2세션 씩 진행하며, 다양한 회사의 관점을 짧지만 뾰족하게 접할 수 있는 시간으로 준비하고 있습니다. 발표자 신청은 모두가 할 수 있으니 관심 있는 분들의 신청 부탁 드려요(토스 프론트엔드 트위터</span><a href=\"https://twitter.com/TossFrontend\" rel=\"noreferrer noopener\" target=\"_blank\">https://twitter.com/TossFrontend</a><span>에 공지).</span></span></span></p><p id=\"44df82db-43f7-4537-80c4-48f2995e3134\"><span><span></span></span></p><h2 id=\"f1afbf72-1ae7-4e43-90b5-0386edb3b8b0\"><span><span><span>모임은 어떻게 진행되나요?</span></span></span></h2><figure id=\"9f8398af-3fce-4a71-93f6-c6e4a0529139\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/1578a327-c61b-4eea-8dce-7dbe25a03d96\"/></figure><p id=\"d2cb228a-8ac2-4aab-86bf-3263005c1455\"><span><span><span>금요일 7시, 역삼역 토스 오피스에서 진행되는 오프라인 모임은 다음과 같은 타임라인으로 진행됩니다.</span></span></span></p><ul><li id=\"c7da29f0-11dd-413b-b21d-0d6f54d1b88d\"><span><span><span>7:00 인트로</span></span></span><div><ul><li id=\"edbdb38b-8188-4f6b-bbd1-552b7e21fcb6\"><span><span><span>설문조사로 응답해주신 관심 주제(e.g. 코드리뷰, 기술부채 관리 등)를 기반으로 미리 배치된 조(6명 규모)에 착석</span></span></span></li><li id=\"44cb0761-ab08-4483-aaf1-43b3d156dc8b\"><span><span><span>하와이 풍 음식 먹으며 조별 아이스 브레이킹</span></span></span></li></ul></div></li><li id=\"6040aea9-76ee-4cd7-81aa-44e244019321\"><span><span><span>7:30 첫 번째 발표</span></span></span><div><ul><li id=\"6391055d-6a58-45f0-9650-2146ddd680c0\"><span><span><span>세션 듣기 및 질의응답</span></span></span></li><li id=\"3d9877fe-8338-424a-9e7b-e2112c3e6c2c\"><span><span><span>조별 토의 및 발표</span></span></span></li></ul></div></li><li id=\"6fd83cb6-95be-44d3-839e-4e42e6185537\"><span><span><span>8:10 두 번째 발표</span></span></span><div><ul><li id=\"6e93b1cf-3e37-4989-9ae7-d0fd2348865c\"><span><span><span>세션 듣기 및 질의응답</span></span></span></li><li id=\"021f60cb-9641-4c67-97ac-8f258558c8b3\"><span><span><span>조별 토의 및 발표</span></span></span></li></ul></div></li><li id=\"66926d15-91b5-45bb-bc83-d1f8f9edac6c\"><span><span><span>8:50 마무리 및 조 섞기 + 네트워킹</span></span></span></li></ul><p id=\"a298bc3c-9352-47cb-a407-a810188b38ab\"><span><span></span></span></p><p id=\"e0cb4c4d-399c-4319-886d-26d0a72afc1b\"><span><span><span>발표를 듣고 그냥 돌아가는 것이 아니라 주제에 대해 활발히 토론하고 살아있는 인사이트를 얻을 수 있도록, 조별로 토론하는 시간을 많이 배치했습니다.</span></span></span></p><p id=\"b97651b4-22ab-4407-b783-7c603d98708d\"><span><span><span>주제에 대한 관심이 많은 분들이 참석하셔서 그런지, 아니면 네트워킹을 통해 친밀도가 높아져서 그런지 모든 발표에서 질문이 10~15개씩 나오는 것이 인상적이었습니다.</span></span></span></p><p id=\"aa3c590a-9fb1-44ae-8825-727860dfc4a2\"><span><span></span></span></p><h2 id=\"34908392-f03b-4ddd-892f-8d0b487ca845\"><span><span><span>참여자 후기</span></span></span></h2><p id=\"01f54fd3-6eb3-4b80-94d0-955dc8476329\"><span><span><span>발표자의 한 마디</span></span></span></p><p id=\"851b574e-f830-4f4c-8cb1-6d7bf81136b1\"><span><span><span>Q. 발표를 하며 얻어간 것이 있나요?</span></span></span></p><p id=\"40f35192-9d65-46f5-bdb5-ef4b2c30aff4\"><span><span><span>A. 비슷한 고민을 회사 밖에서도 함께하는 동료 개발자들과 이야기하는 경험은 정말 귀하다고 느꼈어요. 무언가 만들거나 해결했지만 '이게 정말 좋은 방법일까'라는 고민이 남을 때가 있는데요. 프다클은 '이렇게 풀 수도 있구나', '이런 고민도 있구나'를 공유하면서 생각을 넓힐 수 있는 자리였습니다.</span></span></span></p><p id=\"a6d63355-b088-423b-a027-0d2982e38cbf\"><span><span></span></span></p><p id=\"011214a6-576c-44cf-8402-a19ec15f3f7a\"><span><span><span>참여자의 한 마디</span></span></span></p><p id=\"8763bfcd-cbf7-447e-9660-20c3149e5cff\"><span><span><span>Q. 프다클에 매번 참여하는 이유는?</span></span></span></p><p id=\"d5581585-d963-44c6-83a4-8ad39e56ce45\"><span><span><span>A. 좋은 스피커분들의 발표를 다양한 분들과 같이 들으며 식견을 넓혀갈 수 있는 점, 다양한 회사의 프론트 개발자분들과 네트워킹을 할 수 있는 기회, 바빠서 자주 보지 못하는 지인과, 겸사겸사 좋은 자리에 함께 하는 것, 그리고 여러 멋진 분들을 보면서 더 자극받는 시간이 되기도!</span></span></span></p><p id=\"b08175f1-c5f2-4242-ae79-c7b969276547\"><span><span></span></span></p><p id=\"d5003cd3-eb3b-47e4-a596-457727b4ca46\"><span><span><span>준비 위원회의 한 마디</span></span></span></p><p id=\"9759a404-c12a-49b1-89e9-b3c52baaf0ae\"><span><span><span>Q. 어떤 분들이 프다클에 참여하시면 좋을까요?</span></span></span></p><p id=\"8cab59f2-1d60-44da-a7fc-aa508c4c3ff2\"><span><span><span>A. 다이빙 클럽은 컨퍼런스 보다는 토론의 장에 가깝습니다. 지식과 경험을 공유하는 것에서 의미와 가치를 느끼시는 분들을 환영해요. 발표를 듣고 자신의 현업에서 적용하는 것 뿐 아니라, 관련해서 본인의 경험들을 적극적으로 나눠주시고 다른 분들의 경험을 경청해주시는 분들께서 참여해 주시기를 기대하고 있어요. </span></span></span></p><h2 id=\"564ebc28-a179-448c-a0b6-33b3a4997059\"><span><span><span>어떻게 참가할 수 있나요?</span></span></span></h2><p id=\"3e00fedf-fcf1-4daa-960e-2520df85d31f\"><span><span><span>프다클 커뮤니티는 초대 기반으로 발전해오고 있습니다. 매 모임마다 슬랙에 가입된 기존 멤버 대상으로 티켓을 20장씩 제공하고(선착순 10명, 추첨 10명), 이 분들이 지인을 동행하여 총 40명의 사람들이 모이게 됩니다.</span></span></span></p><p id=\"5284c8cf-8f98-4cbc-b127-4ba80e62c656\"><span><span><span>발표자 신청도 프다클에 참여할 수 있는 또 다른 방법입니다. 발표자 신청 폼은 토스 프론트엔드 트위터(</span><a href=\"https://twitter.com/TossFrontend\" rel=\"noreferrer noopener\" target=\"_blank\">https://twitter.com/TossFrontend</a><span>) 에 올라갈 예정이니, 참여 원하시는 분들은 구독해주세요. </span></span></span></p><p id=\"f2cc15fc-8cff-410b-9555-68754f643542\"><span><span><span>초대 기반인지라 커뮤니티 확장이 느리다는 아쉬움이 있긴 하지만, 그래도 해당 주제에 진정으로 관심이 있는 분들이 모이게 되어서 오프라인에서도, 온라인에서도 깊은 토론을 할 수 있다는 장점이 있습니다.</span></span></span></p><p id=\"6bb96456-0a74-4952-b831-7aab23d33b93\"><span><span><span>프다클 합류를 희망하신다면, </span><a href=\"https://forms.gle/m2wRA6E4mfydefH48\" rel=\"noreferrer noopener\" target=\"_blank\">구글폼</a><span>을 통해 간단한 경력 정보와 함께 자기소개를 남겨주세요. 남겨주신 정보를 토대로, 매 회차 모임의 방향성에 따라 함께할 분을 선별하여 초대권을 보내드릴게요.</span></span></span></p><p id=\"b48334da-b622-41d6-a378-89b643f2cc9a\"><span><span><span>올 해 안에는 더 큰 규모의 공개 모임을 진행할 계획도 있습니다. 기대해주세요!</span></span></span></p></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>",
    "23": "<div class=\"p-container p-container--default css-rh35o9\"><div><div></div><article><header><img alt=\"\" srcset=\"https://static.toss.im/assets/toss-tech/slash_juneseokbeomgun_thumb.png\"/><h1>레고처럼 조립하는 토스 앱</h1><section><img alt=\"\" src=\"https://static.toss.im/assets/toss-tech/slash_juneseokbeomgeun.png\"/><div><div><h3>이준석/송범근</h3><h3>ㆍ<!-- -->iOS Developer</h3></div><div>2023. 8. 22</div></div></section></header><div><p id=\"d5fde4e7-1972-4d47-afc5-06e741047f64\"><span><span></span></span></p><blockquote id=\"a29a38c9-1406-4a30-96f7-699cb6d51050\"><span><span><span>100만 줄.</span></span></span></blockquote><p id=\"58f443d2-ce9e-4eb3-8693-46f63a9c78cc\"><span><span><span>이게 뭐냐고요?</span></span></span></p><p id=\"9ec5932b-4bca-434c-92f5-42111f5afbcb\"><span><span><span>바로, </span><span>토스 iOS 앱의 코드량</span><span>입니다.</span></span></span></p><p id=\"71354a92-d839-4a96-8eea-b3f4881cf013\"><span><span></span></span></p><p id=\"32ba5429-d091-4e00-98e0-0be035e1d13f\"><span><span><span>토스팀은 사용자에게 가치를 전달하기 위해 끊임없이 서비스를 개발해왔어요. 지금 토스 앱 안에는 수백 개의 서비스가 들어있습니다. 그렇게 성장해오는 동안, 토스 iOS 앱도 Swift 100만 줄이 넘는 거대한 프로젝트로 자라났습니다.</span></span></span></p><p id=\"c1bec3a0-2166-431d-b9b4-e34c25f056e3\"><span><span></span></span></p><p id=\"23200f3c-f760-4a19-80b7-703d6cfae718\"><span><span><span>이 글을 읽고 계신 iOS 개발자분들에게 질문을 드려볼게요. </span></span></span></p><p id=\"b85e75b6-08c6-49ce-b856-078ff00243d1\"><span><span><span>이렇게 프로젝트가 크고 복잡해지면 뭘 해야 할까요?</span></span></span></p><p id=\"f8618c17-366f-4ec8-83ef-7a97f25cf81e\"><span><span></span></span></p><p id=\"9a9af0d5-03d2-403d-a599-19659d4c8981\"><span><span><span>바로 모듈 분리입니다!</span></span></span></p><p id=\"40828b06-962e-45d4-8cdc-23ab9a425037\"><span><span><span>앱을 하나의 큰 Xcode 프로젝트로 관리하는 대신, 여러 개의 작은 모듈로 나눕니다. 그리고 모듈 간의 적절한 구조를 설계하는 거죠.</span></span></span></p><p id=\"6fe4ec02-1c9a-4f19-942d-ac86f9f19a6a\"><span><span><span>코드 베이스가 커지면, 모듈 분리도 점점 더 중요해지죠. 그래서 토스 iOS 챕터도 모듈화에 대한 많은 고민을 했는데요. </span></span></span></p><p id=\"772aea4d-0ee0-466a-9db7-35289aef7b0c\"><span><span><span>이 글에서는, 저희가 어떻게 슈퍼 앱 토스의 모듈을 관리하고 있는지 살펴볼게요.</span></span></span></p><p id=\"9f5c7665-bc6e-47c3-98a4-d39825a75d70\"><span><span><span>먼저 기존 토스 앱의 구조를 알아봐야겠죠? </span></span></span></p><figure id=\"2375f176-4d9c-4ae7-a173-afd25d1aeae4\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/bd962e71-ee22-4e8d-b060-0634fdadcdeb\"/></figure><p id=\"eed5dee8-b86f-48f1-bda5-cf5cfe6148a0\"><span><span><span>기존 토스 앱은 가장 일반적인 계층 구조로 이루어져 있었어요. 책임과 역할에 따라 계층을 나눠 해당 계층에는 그에 맞는 모듈들이 위치하고, 하위 계층에 있는 모듈은 상위 계층에 있는 모듈을 의존할 수 없는 형태죠.</span></span></span></p><p id=\"897180f5-26fb-489b-893f-3ec37bf68130\"><span><span><span>공통적으로 쓰이는 유틸리티 모듈들이 모여있는 Foundation 계층.</span></span></span></p><p id=\"eaab5961-3a5d-4bf0-aa78-bbf894e7f7af\"><span><span><span>수백 개의 서비스 모듈이 위치한 Feature 계층.</span></span></span></p><p id=\"6bc65152-f2a2-4db7-903a-80e8afb82310\"><span><span><span>최종적으로 사용자에게 제공될 앱이 위치한 App 계층.</span></span></span></p><p id=\"932c2d92-8a15-4ae3-9549-a506d20a36b8\"><span><span><span>이렇게 계층적으로만 모듈을 관리하고 있었어요.</span></span></span></p><p id=\"0a65ddf6-eaca-474d-861c-b93cc3a93332\"><span><span><span>일반적인 계층 구조도 꽤 오랜 시간 잘 작동했습니다. 계층 안에서의 모듈 분리도 되어있었고요. 하위 계층의 모듈이라면 필요에 따라 가져다 활용할 수 있었죠.</span></span></span></p><p id=\"397393e7-bc1f-474b-8314-cc5667ed02ac\"><span><span><span>하지만 수년간 토스에는 정말 많은 서비스가 생겼습니다. 다시 말해 Feature 계층에 모듈들이 엄청나게 늘어났죠.</span></span></span></p><p id=\"7f5bf245-0951-4578-8414-a0e86233ae26\"><span><span></span></span></p><p id=\"7cc10bd1-b1e8-4660-afd5-680255719b3b\"><span><span><span>그러다 보니 문제가 발생했습니다.</span></span></span></p><p id=\"6965bb9d-ad6b-416a-b673-52e971894160\"><span><span><span>단순히 모듈 수가 많아서는 아니었어요. 많은 서비스가 생겨나면서, </span><span>모듈 간의 의존성이 폭발적으로 늘어나는 게 문제</span><span>였죠.</span></span></span></p><p id=\"f7b31910-7995-4049-9513-340991427d7b\"><span><span><span>하나의 서비스가 Feature 레이어의 여러 모듈을 활용하는 경우가 많이 생겼습니다. 결과적으로 같은 계층 내에 의존 관계가 복잡해졌고요.</span></span></span></p><p id=\"2045729e-2208-4fc8-aa18-83f02b598e0d\"><span><span><span>그러자 순환 참조와 같은 문제가 발생하기도 했어요. 전반적인 모듈 구조도 이해하기에 너무 어려워졌습니다. </span></span></span></p><p id=\"c400b710-38d9-4b73-99e0-b2549162d5c8\"><span><span><span>처음에는 계층 구조를 유지하면서 대응을 해봤어요. 공통 기능을 다시 묶어서 하위 계층의 모듈로 분리하거나, 새로운 계층을 추가하여 공통 모듈을 추가로 분리하는 방식도 시도했고요.</span></span></span></p><p id=\"c3024b86-63f3-49c2-aefd-ce3169472791\"><span><span><span>그런데 이렇게 하다 보니 지나치게 많은 계층이 생겨났어요. 적절한 계층 및 모듈 분리의 기준을 세우기도 애매해지더라고요.</span></span></span></p><blockquote id=\"0569812b-7100-4489-8745-cd9f51db72dc\"><span><span><span>이대로는 안 되겠다. 다른 방법이 필요하다. </span></span></span></blockquote><p id=\"32f981f4-75bf-4019-9d91-e8036d24fa99\"><span><span><span>iOS 개발자 모두가 느끼기 시작했습니다.</span></span></span></p><p id=\"efffedd7-58d3-4162-ad96-155381a138f8\"><span><span><span>Microfeatures 아키텍처는 Tuist가 소개한 모듈 구조예요. (Tuist는 iOS 프로젝트 관리 툴입니다.)</span></span></span></p><p id=\"c4953461-a40a-43da-93c7-e516cb304dca\"><span><span><span>크게 보면, Microfeatures 아키텍처는 아래와 같이 5개의 요소로 구성되어 있어요.</span></span></span></p><figure id=\"35b09f63-167a-4086-9d13-46c896d59e94\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/367cca97-5b46-4479-a521-d2410322435d\"/></figure><p id=\"74a3e710-0e39-4d37-bcdf-62e1c5096b6a\"><span><span><span>Feature(Source)</span></span></span></p><p id=\"50cd8b2a-a4da-4354-b400-daaf32a5fc94\"><span><span><span>Feature의 실제 기능이 구현된 코드가 위치한 모듈이에요.\n</span></span></span></p><p id=\"1678a6bc-6a89-46d3-9a39-99ba4fe55395\"><span><span><span>Interface</span></span></span></p><p id=\"b9724da1-3b6a-49f2-964c-9a9c6670bc43\"><span><span><span>Feature에서 제공하는 기능에 대한 외부 인터페이스와 모델을 제공하는 모듈이에요.\n</span></span></span></p><p id=\"ab7b9c34-4567-4298-aa7d-dfd60c902a5e\"><span><span><span>Testing</span></span></span></p><p id=\"fda81fa0-eaa7-412b-a2cb-ea714a3cd215\"><span><span><span>단위 테스트나 Example 앱에서 사용될 코드와 Mock 데이터 등을 제공하는 모듈이에요.\n</span></span></span></p><p id=\"0239b55f-9bc6-4ce2-be03-5f504456f464\"><span><span><span>Tests</span></span></span></p><p id=\"eb6dc8f5-c4b8-4b06-938b-fd9ec8b4b87b\"><span><span><span>단위 테스트, UI 테스트 등이 위치한 모듈이에요.\n</span></span></span></p><p id=\"f302a825-685e-4ae9-8cee-219d892d4f61\"><span><span><span>Example</span></span></span></p><p id=\"9b5af6dd-f1eb-4d85-a023-84ca760cb8f5\"><span><span><span>Feature의 기능을 간단히 체험해 볼 수 있는 작은 앱이에요.</span></span></span></p><p id=\"21cdd31b-75e7-4c79-a455-efddd964b945\"><span><span></span></span></p><p id=\"05931b9f-1691-4e5a-8692-b1ea81449cf6\"><span><span><span>그래서 이 요소들을 가지고 하나의 서비스를 담당하던 모듈을 쪼개는 거예요.</span></span></span></p><p id=\"a24af55c-d26a-4a47-9ab5-6bc5701894d5\"><span><span></span></span></p><p id=\"5097b398-618e-4694-b62e-4d0e1781e75c\"><span><span><span>홈 서비스를 예로 들어볼까요?</span></span></span></p><p id=\"90095c7e-e61c-4fb7-aa7a-dd22e8c8ba3f\"><span><span><span>기존에 하나였던 Home 모듈을 이렇게 5개의 모듈로 나누게 되는 거예요.</span></span></span></p><ul><li id=\"5de7a98c-70aa-46e3-a8ef-200e9fceb456\"><span><span><span>Home (Feature)</span></span></span></li><li id=\"cd9bbbea-92ba-4ab3-96fe-8995f5ace07e\"><span><span><span>HomeInterface (Interface)</span></span></span></li><li id=\"ec380e17-2884-4445-973e-48267e875ee7\"><span><span><span>HomeTesting (Testing)</span></span></span></li><li id=\"5249053b-9173-461d-9ab5-923781f8e3a2\"><span><span><span>HomeTests (Tests)</span></span></span></li><li id=\"ad51f023-9f6c-4a3d-9722-20c20f2ca628\"><span><span><span>HomeExample (Example)</span></span></span></li></ul><figure id=\"7006ea10-f9d8-4e04-ba3f-88afa093ecb6\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/4ea1458c-1267-4c1b-852d-baf3f209794e\"/></figure><p id=\"e0d23a50-3556-4bf7-abe4-cb0cbda5ab7d\"><span><span><span>이것을 여러 서비스로 확장해 보면 이렇게 돼요.</span></span></span></p><p id=\"1ad9d8db-0057-421a-b30f-944729a46173\"><span><span><span>Interface 모듈에 있는 인터페이스를, Feature, Testing 모듈이 구현합니다. </span></span></span></p><p id=\"fcacc627-2176-4de6-af63-5709210fa237\"><span><span><span>Tests 모듈에 테스트를 작성하고요.</span></span></span></p><p id=\"c1c66fcd-a3dd-41a7-8e83-4f27a14f221b\"><span><span><span>Example 앱을 구성할 때는 Feature 혹은 Testing 모듈 중 필요한 것을 골라서 사용해요.</span></span></span></p><p id=\"0fe948fa-fcfa-4cf3-bb3a-71397305585d\"><span><span></span></span></p><p id=\"e1514aee-5c6f-4081-b896-51e749086871\"><span><span><span>이때 자체적으로 개발한 DI(Dependency Injection) Container를 사용해요. Interface 모듈에 대한 Feature 모듈의 구현을 주입하는 역할을 맡고 있죠.</span></span></span></p><p id=\"4d48abdd-b49c-4760-959e-e6323ca495d3\"><span><span><span>Microfeatures 아키텍처 구조로 바뀌고 난 이후에는 뭐가 달라졌을까요?</span></span></span></p><p id=\"e9cdc978-5f58-4c16-9763-33d0f7d0135e\"><span><span><span>다른 서비스에서 </span><span>Home 서비스의 코드를 필요로 할 때 Home 모듈을 직접 사용하지 않아요. </span><span>대신 HomeInterface 모듈을 사용하죠. HomeInterface에는 외부에 제공되는 인터페이스가 있어요. 이 Home의 기능을 사용할 때는 이 인터페이스를 씁니다.</span></span></span></p><p id=\"172ae4f9-1ed0-4053-98ff-9e35d46c00d7\"><span><span><span>이렇게 하면 한 서비스가 다른 서비스의 코드를 사용하더라도, 같은 계층 (Feature ↔ Feature, Interface ↔ Interface) 내의 의존 관계가 생기지 않게 돼요.</span></span></span></p><p id=\"47e83175-70a5-4779-bcb2-6f48849acd8a\"><span><span><span>같은 계층 내에 의존 관계가 복잡해지는 문제를 해결했습니다.</span></span></span></p><p id=\"9b81da29-4db4-413c-8f1e-bdce318340bf\"><span><span><span>쉽고 멋있게 해결한 척했지만… 사실 Microfeatures 아키텍처를 도입하는 것은 꽤나 험난한 길이었어요.</span></span></span></p><p id=\"0751e922-9495-4830-b587-72fdf203fec3\"><span><span><span>일단 작업량이 만만치 않았죠. 기존에 하나였던 모듈을 5개의 모듈로 분리해야 하는 작업인데, 기존의 모듈도 이미 수백 개였거든요.</span></span></span></p><p id=\"c07ff794-4e61-4685-ba4c-36cd753ae2e4\"><span><span><span>수많은 컨플릭이 발목을 잡았어요. 공통 모듈을 자주 건드릴 수밖에 없었고. 현재 작업 중인 모듈이 있고, 그 모듈이 의존하는 다른 모듈 분리 작업이 동시에 진행되었어요. 컨플릭이 자주 발생할 수밖에 없는 상황이었죠.</span></span></span></p><p id=\"37a9fc6b-5b75-4220-9158-0d10babe9605\"><span><span><span>현실적인 리소스의 문제도 있었고요. 토스에선 빠른 실험을 위해 ‘매주’ 앱 배포를 진행하는데요. 이런 환경에서 사일로 업무도 하고, 구조 개선을 위한 모듈 분리도 하는 건 쉽지 않은 일이었죠.</span></span></span></p><figure id=\"8a1c438d-a694-436c-a600-7d968ea7017b\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/f3aad9e2-7fe6-47b0-8d3f-acf0ee402a36\"/></figure><p id=\"4ac65046-5afe-42db-b30b-ea9dd8e31486\"><span><span><span>iOS 챕터에서는 작업량을 줄이기 위해서, Tuist에서 제공하는 </span><a href=\"https://docs.tuist.io/commands/scaffold\" rel=\"noreferrer noopener\" target=\"_blank\">Stencil 템플릿과 Tuist Scaffold 기능</a><span>을 최대한 활용했어요. 토스 앱의 모듈 구조에 알맞게 Tuist extension 을 적절히 구현했습니다. 다양한 Template 을 만들어서 단 1줄의 코드로 새로운 모듈을 생성할 수 있도록 했죠.</span></span></span></p><p id=\"e052a58d-125a-4949-96b6-60001da54c4b\"><span><span><span>하지만 무엇보다도 </span><span>iOS 챕터 전체가 모두 적극적으로 참여했던 게 도입을 해낼 수 있었던 가장 큰 이유</span><span>예요. 기존 구조의 문제를 겪고 있던 분들이 도입의 필요성에 많이 공감해 주셨고요. 너 나 할 것 없이 담당하고 있던 기능들에 Microfeatures 아키텍처를 적용해 나갔어요. 담당자가 퇴사를 했다든지, 공통적으로 쓰는 모듈이라든지 그런 애-매한 모듈들도 있었는데요. 다들 본인 것처럼 적극적으로 나서주셨죠.</span></span></span></p><p id=\"63fcd45d-18e0-48ec-8442-04aae61a40c5\"><span><span><span>Microfeature 아키텍처의 장점은 이게 끝이 아닙니다.</span></span></span></p><p id=\"98d560b3-2a35-461f-9e76-64c84edcf3dc\"><span><span></span></span></p><p id=\"42383b50-99e1-49ea-a4e4-613d240b4065\"><span><span><span>Example 앱</span><span>이 있기 때문이죠!</span></span></span></p><p id=\"d4174237-db9d-4511-9483-367256392b47\"><span><span><span>Example 앱은 필요한 기능만을 담은 별도의 미니 앱이라고 보시면 돼요. </span></span></span></p><p id=\"014d2de4-3259-4184-ab1c-d21462217b7d\"><span><span></span></span></p><p id=\"ec8514d1-6929-4ef1-a1d4-322d5442d672\"><span><span><span>Microfeature 아키텍처가 도입된 후로, 개발할 때 Example 앱을 적극 활용하고 있어요. 실제로 송금 Example 앱, 자동이체 Example 앱, 본인확인 Example 앱 등등 다양한 Example 앱이 있습니다.</span></span></span></p><p id=\"c00e16aa-b8e0-4bc8-b159-3ee3b88b4c27\"><span><span><span>Microfeature 아키텍처가 있다면 Example 앱을 만드는 건 어렵지 않아요. 구현을 확인해 보고 싶은 기능의 Feature 모듈을 사용하고요. 나머지 기능의 경우 Testing 모듈에 있는 Mock을 연결하면 되죠.</span></span></span></p><p id=\"7e09f5e7-b8ac-4162-8422-caa8f901e52a\"><span><span><span>아래 그림은 송금 Example 앱인데요. 실제 송금 결과 케이스들을 바로바로 볼 수 있도록 만들어놓았어요.</span></span></span></p><figure id=\"aad974a9-35fc-49c8-8925-ef571362d8e1\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/df54e91d-65d8-4fd0-bf9b-9c4865db8721\"/></figure><p id=\"83b6da58-a0e3-4c4b-91ee-3f573aba7129\"><span><span><span>특히 </span><span>UI 개발을 할 때 무척 편리</span><span>합니다. \n아까 말씀드린 것처럼, 토스 앱은 어마어마하게 큰 앱이거든요. Swift만 100만 줄이 넘고요. 모듈은 약 700개나 있고요. 그니까 빌드 시간이 엄청 길 수밖에 없어요.</span></span></span></p><p id=\"135e703c-8c34-4c7f-ab37-e4ba35da4804\"><span><span><span>만약 토스 앱 전체를 빌드하고 나서, 수정한 화면이 어떻게 보이는지 확인해야 된다면? UI 수정 확인 한번 하려고 한참을 기다려야 합니다. </span></span></span></p><p id=\"2543e6ae-ae90-420e-af96-b7e015460c51\"><span><span><span>빌드 할 때마다 수십 초씩 걸린다는 건 상당히 불편한 일이잖아요. 해보신 분들은 이게 얼마나 생산성을 떨어뜨리는지 아실 거예요.</span></span></span></p><p id=\"9afd71cb-4a42-49ea-b353-2f9fe4e31864\"><span><span><span>Example 앱은 이럴 때 빛을 발합니다. </span><span>Example 앱은 토스 전체 앱 빌드보다 훨씬 빠르거든요. (무려 5배)</span><span> 전체 앱이 아닌 일부분만을 빌드하기 때문이죠.</span></span></span></p><p id=\"dcf526d8-1205-4b7e-9a1a-65ed5f284faf\"><span><span></span></span></p><p id=\"9b1d324f-8175-4db5-a672-4ca03808a062\"><span><span><span>Example을 하다 보면, 협업을 하는데도 굉장히 편리해요.</span></span></span></p><p id=\"1e5900a8-fb47-47b4-9257-aa77a134fdf1\"><span><span><span>토스 디자인 시스템(TDS)을 만드는 디자인 플랫폼 팀의 예시를 들어드릴게요.</span></span></span></p><p id=\"d9cdba89-cdae-497a-9d6a-17328241da42\"><span><span><span>TDS에는 AnimateTop라는 컴포넌트가 있습니다. 말 그대로 애니메이션 효과가 들어있는 제목이에요. 그런데 이걸 코드로만 보면, 실제 느낌은 알기 어렵잖아요.</span></span></span></p><p id=\"af339f71-de07-415d-87e4-13102f7dab15\"><span><span><span>그럴 때 ShowCaseExample 앱을 사용해요. AnimateTop이 다양한 속성을 적용했을 때 어떻게 보이는지 실제로 확인해 볼 수 있죠.</span></span></span></p><figure id=\"fbf1e9d0-de0b-446d-8054-e9f2796d5f53\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/1ab807ba-674e-41a8-a9b1-6bfa8b531fb0\"/></figure><p id=\"76784592-6bf5-4c07-95a9-32edcea8f9da\"><span><span><span>개발을 하고 나면, Example 앱을 사내에서 배포할 수 있어요.</span></span></span></p><p id=\"9811c49f-051e-4fb5-ad96-002fb4f2c219\"><span><span><span>복잡한 화면이나 애니메이션을 개발하다 보면 디자이너 분과 빌드 된 앱을 같이 확인하는 경우가 꽤 많아요. 중간중간 실제 화면을 확인해보기 위해 다른 팀원에게 앱을 빌드하여 보여주는 경우도 흔히 있고요.</span></span></span></p><p id=\"76a1219f-d31a-44a5-b1fd-cfca4aba035c\"><span><span><span>그럴 때 Example 앱을 사용하면, “00님, 이거 와서 봐주세요, 어때요?” 매번 여쭤볼 필요가 없어요. Example 앱 배포했습니다! 알려드리면 직접 받아서 확인하면 되거든요. 직접 사용하시는 PO나 디자이너 분들도 정말 편하다고 하시더라고요.</span></span></span></p><figure id=\"b0e26cfe-2f3d-4532-9ebb-aaa2994e25bb\"><img alt=\"\" src=\"https://static.toss-internal.com/ipd-tcs/toss_core/live/e0b187de-ee7d-4254-96ea-edd3b594f203\"/></figure><p id=\"f70d0c5e-92cc-410b-b2b4-dcc8b4e41a14\"><span><span><span>디자인 플랫폼 팀에서는 새로운 인터랙션, 컴포넌트 등을 만드는 일이 많은데요. 이 Example 앱을 적극 활용해서 개발부터 QA까지 하고 있습니다.</span></span></span></p><p id=\"db588b6c-d041-46b3-af38-9f2777386116\"><span><span></span></span></p><h2 id=\"2870969c-025d-497b-a427-584eed5a1ad3\"><span><span><span>🔔 요약 정리</span></span></span></h2><ul><li id=\"64c3e4db-aea1-408c-b2ad-fba646366a82\"><span><span><span>앱의 코드 베이스가 커지고 복잡해질수록, </span><span>모듈 분리와 관리가 중요</span><span>해진다.</span></span></span></li><li id=\"e28ecefc-0a06-4de8-b9d7-325ffb0740c4\"><span><span><span>기존 토스 iOS 앱은 </span><span>일반적인 계층 구조</span><span>로 나눠서 모듈을 관리했다.</span></span></span></li><li id=\"4de6c244-c418-4b49-bb10-63c5b64ff423\"><span><span><span>하지만 앱 내 서비스가 계속 많아지면서, </span><span>같은 계층 내의 의존 관계가 너무 복잡</span><span>해졌다.</span></span></span></li><li id=\"579fd945-db88-4efb-84fe-4d7d33d4c500\"><span><span><span>토스 iOS 챕터는 이 문제를 해결하기 위해 </span><span>Microfeature 아키텍처를 도입</span><span>했다.</span></span></span></li><li id=\"ff9a5836-1e21-4b18-8874-2528235fea37\"><span><span><span>Microfeature 아키텍처 도입은 작업량, 컨플릭, 리소스의 문제로 쉽지 않은 과제였지만, </span><span>iOS 챕터 모두가 합심하여 결국 성공!</span></span></span></li><li id=\"0a392026-56d3-40d8-9580-234b35ce4746\"><span><span><span>Microfeature 아키텍처를 도입하면서 </span><span>Example 앱</span><span>도 적극적으로 쓰게 되었다.</span></span></span></li><li id=\"c9bd2eb9-7b71-44dc-8c58-0eb5170faa8a\"><span><span><span>Example 앱은 전체 앱보다 빌드가 5배 빨라서 </span><span>개발 생산성이 올라가고</span><span>, 사내 배포가 가능해서 </span><span>협업에도 도움이 된다.</span></span></span></li></ul></div><div><h2>재미있게 읽으셨나요?</h2><p>좋았는지, 아쉬웠는지, 아래 이모지를 눌러 의견을 들려주세요.</p><div><div>😍</div><div>🤔</div></div><div><button aria-disabled=\"false\" type=\"button\"><span aria-hidden=\"true\" role=\"presentation\"></span>아티클 공유하기</button></div></div></article><div id=\"portal-container\"></div><div id=\"tds-pc__portal-container\"></div></div></div>"
}